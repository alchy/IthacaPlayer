===== File: CMakeLists.txt =====
Path: C:\Users\jindr\IthacaPlayer\CMakeLists.txt
=====
cmake_minimum_required(VERSION 3.22)

project(ITHACA_PLAYER VERSION 0.0.1)

add_subdirectory(JUCE)

juce_add_plugin(IthacaPlayer
    COMPANY_NAME "Lord Audio"
    IS_SYNTH TRUE
    NEEDS_MIDI_INPUT TRUE
    NEEDS_MIDI_OUTPUT FALSE
    IS_MIDI_EFFECT FALSE
    PLUGIN_MANUFACTURER_CODE Lau0
    PLUGIN_CODE Itca
    FORMATS AU VST3 Standalone
    PRODUCT_NAME "IthacaPlayer")

juce_generate_juce_header(IthacaPlayer)

target_sources(IthacaPlayer
    PRIVATE
        Logger.h
        Logger.cpp
        SampleLibrary.h
        SampleLibrary.cpp
        SampleLoader.h   # Přidaný header pro SampleLoader
        SampleLoader.cpp # Přidaný source pro SampleLoader
        MidiStateManager.h
        MidiStateManager.cpp
        VoiceManager.h
        VoiceManager.cpp
        PluginEditor.h
        PluginEditor.cpp
        PluginProcessor.h
        PluginProcessor.cpp)

target_compile_definitions(IthacaPlayer
    PUBLIC
        JUCE_WEB_BROWSER=0
        JUCE_USE_CURL=0
        JUCE_VST3_CAN_REPLACE_VST2=0)

target_link_libraries(IthacaPlayer
    PRIVATE
        juce::juce_audio_utils
    PUBLIC
        juce::juce_recommended_config_flags
        juce::juce_recommended_lto_flags
        juce::juce_recommended_warning_flags)


===== File: JUCE-BUILD.md =====
Path: C:\Users\jindr\IthacaPlayer\JUCE-BUILD.md
=====
# https://cmake.org/download/
# https://trirpi.github.io/posts/developing-audio-plugins-with-juce-and-visual-studio-code/


# pridani JUCE
- git submodule add https://github.com/juce-framework/JUCE.git JUCE

cd JUCE
cmake -B build
cmake -B build -DJUCE_BUILD_EXTRAS=ON
cmake --build build --target AudioPluginHost

# Visual Studio Code

Build the Project 
- Terminal > Run Build Task (or press Ctrl+Shift+B)

Run Without Debugging 
- 


===== File: Logger.cpp =====
Path: C:\Users\jindr\IthacaPlayer\Logger.cpp
=====
#include "Logger.h"
#include "PluginEditor.h"
#include <sstream>

std::atomic<bool> Logger::loggingEnabled{true};

/**
 * @brief Konstruktor Logger.
 * Inicializuje singleton a přidává file logger.
 * Oprava: Použit unique_ptr místo deprecated ScopedPointer.
 */
Logger::Logger() {
    // Oprava: Inicializace file loggeru (umístění v default app log složce)
    fileLogger_ = std::unique_ptr<juce::FileLogger>(
        juce::FileLogger::createDefaultAppLogger("IthacaPlayer", "IthacaPlayer.log", "Start IthacaPlayer logu", 0)
    );
    DBG("Logger initialized.");  // Přidaný debug pro konzoli
}

/**
 * @brief Vrátí singleton instanci Logger.
 * @return Reference na instanci
 */
Logger& Logger::getInstance()
{
    static Logger instance;
    return instance;
}

/**
 * @brief Loguje zprávu s časovým razítkem, komponentou a závažností.
 * @param component Komponenta (např. třída/metoda)
 * @param severity Závažnost (info, debug, error, warn)
 * @param message Zpráva
 * Oprava: Přidán zápis do fileLogger, pokud existuje.
 */
void Logger::log(const juce::String& component, const juce::String& severity, const juce::String& message)
{
    if (!loggingEnabled.load(std::memory_order_relaxed))
        return;

    try {
        auto now = juce::Time::getCurrentTime();
        juce::String timestamp = now.formatted("%Y-%m-%d %H:%M:%S");
        juce::String logEntry = "[" + timestamp + "] [" + component + "] [" + severity + "]: " + message;

        pushToLogQueue(logEntry);
        scheduleGUIUpdate();

        // Oprava: Zápis do souboru, pokud fileLogger existuje
        if (fileLogger_ != nullptr) {
            fileLogger_->logMessage(logEntry);
        }
    } catch (...) {
        // Bezpečný fallback při chybě
        DBG("Logger error in log method.");  // Přidaný debug pro chyby
    }
}

void Logger::pushToLogQueue(const juce::String& logEntry)
{
    std::lock_guard<std::mutex> lock(logMutex_);

    uint8_t writeIndex = logQueue_.writeIndex.load();
    uint8_t currentCount = logQueue_.count.load();

    logQueue_.logs[writeIndex] = logEntry;
    logQueue_.writeIndex.store(static_cast<uint8_t>(writeIndex + 1));

    if (currentCount < 256) {
        logQueue_.count.store(currentCount + 1);
    } else {
        logQueue_.readIndex = static_cast<uint8_t>(logQueue_.readIndex + 1);
    }

    if (logQueue_.count.load() > MAX_LOG_ENTRIES) {
        uint8_t excess = logQueue_.count.load() - MAX_LOG_ENTRIES;
        logQueue_.readIndex = static_cast<uint8_t>(logQueue_.readIndex + excess);
        logQueue_.count.store(MAX_LOG_ENTRIES);
    }
}

void Logger::setEditor(AudioPluginAudioProcessorEditor* ed)
{
    std::lock_guard<std::mutex> lock(editorMutex_);
    editorPtr_ = ed;
    DBG("Editor set in Logger.");  // Přidaný debug pro nastavení editoru
}

void Logger::scheduleGUIUpdate()
{
    juce::MessageManager::callAsync([this]() {
        std::lock_guard<std::mutex> lock(editorMutex_);
        if (editorPtr_ != nullptr) {
            editorPtr_->updateLogDisplay();
        }
    });
}

juce::StringArray Logger::getLogBuffer() const
{
    return getCurrentLogs();
}

juce::StringArray Logger::getCurrentLogs() const
{
    std::lock_guard<std::mutex> lock(logMutex_);

    juce::StringArray result;
    uint8_t currentCount = logQueue_.count.load();
    uint8_t readIndex = logQueue_.readIndex;

    for (uint8_t i = 0; i < currentCount; ++i) {
        uint8_t index = static_cast<uint8_t>(readIndex + i);
        result.add(logQueue_.logs[index]);
    }
    return result;
}

void Logger::clearLogs()
{
    std::lock_guard<std::mutex> lock(logMutex_);
    logQueue_.writeIndex.store(0);
    logQueue_.count.store(0);
    logQueue_.readIndex = 0;
    for (auto& log : logQueue_.logs) {
        log = juce::String();
    }
    DBG("Logs cleared.");  // Přidaný debug pro čištění logů
}

size_t Logger::getLogCount() const
{
    return logQueue_.count.load(std::memory_order_relaxed);
}


===== File: Logger.h =====
Path: C:\Users\jindr\IthacaPlayer\Logger.h
=====
#pragma once

#include <juce_core/juce_core.h>
#include <juce_gui_basics/juce_gui_basics.h>
#include <juce_events/juce_events.h>
#include <atomic>
#include <mutex>
#include <array>
#include <memory>

#define MAX_LOG_ENTRIES 100

class AudioPluginAudioProcessorEditor;

class Logger
{
public:
    static Logger& getInstance();

    void log(const juce::String& component, const juce::String& severity, const juce::String& message);
    static std::atomic<bool> loggingEnabled;

    void setEditor(AudioPluginAudioProcessorEditor* ed);

    juce::StringArray getLogBuffer() const;
    void clearLogs();
    size_t getLogCount() const;

private:
    Logger();
    ~Logger() = default;

    Logger(const Logger&) = delete;
    Logger& operator=(const Logger&) = delete;

    struct LogQueue {
        std::array<juce::String, 256> logs;
        std::atomic<uint8_t> writeIndex{0};
        std::atomic<uint8_t> count{0};
        uint8_t readIndex{0};
    };

    LogQueue logQueue_;

    mutable std::mutex logMutex_;
    mutable std::mutex editorMutex_;

    // Oprava: Použit unique_ptr místo deprecated ScopedPointer
    AudioPluginAudioProcessorEditor* editorPtr_{nullptr};

    void pushToLogQueue(const juce::String& logEntry);
    juce::StringArray getCurrentLogs() const;
    void scheduleGUIUpdate();

    // Oprava: Použit unique_ptr místo deprecated ScopedPointer
    std::unique_ptr<juce::FileLogger> fileLogger_;
};


===== File: MidiStateManager.cpp =====
Path: C:\Users\jindr\IthacaPlayer\MidiStateManager.cpp
=====
#include "MidiStateManager.h"
#include <algorithm>
#include <cassert>

#ifdef _WIN32
#pragma warning(push)
#pragma warning(disable: 4244)  // Varování konverze pro MIDI hodnoty
#endif

/**
 * @brief Konstruktor MidiStateManager.
 * Inicializuje logger, resetuje queue a nastaví výchozí hodnoty controllerů podle MIDI standardu.
 */
MidiStateManager::MidiStateManager()
    : logger_(Logger::getInstance())
{
    logger_.log("MidiStateManager/constructor", "info", "=== INICIALIZACE MIDI STATE MANAGER ===");
    
    // Inicializace aktivních not
    for (auto& note : activeNotes_) {
        note.store(false);  // Všechny noty neaktivní
    }
    
    // Inicializace MIDI controller hodnot
    for (int channel = 0; channel < MIDI_CHANNELS; ++channel) {
        for (int controller = 0; controller < 128; ++controller) {
            controllerValues_[channel][controller] = 0;  // Výchozí 0
        }
        
        // Výchozí hodnoty pro standardní controllery
        controllerValues_[channel][7] = 100;   // Volume (výchozí vysoká)
        controllerValues_[channel][10] = 64;   // Pan (střed)
        controllerValues_[channel][11] = 127;  // Expression (max)
        controllerValues_[channel][64] = 0;    // Sustain pedal (vypnutý)
        controllerValues_[channel][91] = 0;    // Reverb (vypnutý)
        controllerValues_[channel][93] = 0;    // Chorus (vypnutý)
    }
    
    // Reset všech queue
    for (auto& queue : noteOnQueues_) {
        queue.reset();
    }
    for (auto& queue : noteOffQueues_) {
        queue.reset();
    }
    
    logger_.log("MidiStateManager/constructor", "info", "Inicializace dokončena.");
    DBG("MidiStateManager initialized.");  // Přidaný debug pro konzoli
}

/**
 * @brief Resetuje NoteQueue na výchozí stav.
 * Nastaví indexy a počet na 0, nemusí čistit array (přepsáno při použití).
 */
void MidiStateManager::NoteQueue::reset() {
    writeIndex.store(0);
    count.store(0);
    readIndex = 0;
}

/**
 * @brief Přidá note-on do queue a aktualizuje stav aktivní noty a velocity.
 * @param channel MIDI kanál (0-15)
 * @param note MIDI nota (0-127)
 * @param velocity Velocity (0-127)
 */
void MidiStateManager::pushNoteOn(uint8_t channel, uint8_t note, uint8_t velocity) {
    if (channel >= MIDI_CHANNELS || note >= MIDI_NOTES) return;  // Bezpečnostní kontrola
    
    pushToQueue(noteOnQueues_[channel], note);
    activeNotes_[note].store(true);
    velocities_[channel][note] = velocity;
    
    logger_.log("MidiStateManager/pushNoteOn", "debug", "NoteOn kanál " + juce::String(channel) + ", nota " + juce::String(note));
}

/**
 * @brief Přidá note-off do queue a deaktivuje notu.
 * @param channel MIDI kanál (0-15)
 * @param note MIDI nota (0-127)
 */
void MidiStateManager::pushNoteOff(uint8_t channel, uint8_t note) {
    if (channel >= MIDI_CHANNELS || note >= MIDI_NOTES) return;
    
    pushToQueue(noteOffQueues_[channel], note);
    activeNotes_[note].store(false);
    
    logger_.log("MidiStateManager/pushNoteOff", "debug", "NoteOff kanál " + juce::String(channel) + ", nota " + juce::String(note));
}

/**
 * @brief Vytáhne note-on z queue pro daný kanál.
 * @param channel MIDI kanál
 * @return Nota (0-127) nebo 255 pokud prázdná queue (🔧 Změna: Pro odstranění warningu C4244)
 */
uint8_t MidiStateManager::popNoteOn(uint8_t channel) {  // 🔧 Změna: Změněno na uint8_t
    if (channel >= MIDI_CHANNELS) return 255;
    return popFromQueue(noteOnQueues_[channel]);
}

/**
 * @brief Vytáhne note-off z queue pro daný kanál.
 * @param channel MIDI kanál
 * @return Nota (0-127) nebo 255 pokud prázdná queue (🔧 Změna: Pro odstranění warningu C4244)
 */
uint8_t MidiStateManager::popNoteOff(uint8_t channel) {  // 🔧 Změna: Změněno na uint8_t
    if (channel >= MIDI_CHANNELS) return 255;
    return popFromQueue(noteOffQueues_[channel]);
}

/**
 * @brief Zkontroluje, zda je nota aktivní.
 * @param channel MIDI kanál
 * @param note MIDI nota
 * @return True pokud aktivní
 */
bool MidiStateManager::isNoteActive(uint8_t channel, uint8_t note) const {
    if (channel >= MIDI_CHANNELS || note >= MIDI_NOTES) return false;
    return activeNotes_[note].load();
}

/**
 * @brief Vrátí velocity aktivní noty.
 * @param channel MIDI kanál
 * @param note MIDI nota
 * @return Velocity (0-127)
 */
uint8_t MidiStateManager::getVelocity(uint8_t channel, uint8_t note) const {
    if (channel >= MIDI_CHANNELS || note >= MIDI_NOTES) return 0;
    return velocities_[channel][note];
}

/**
 * @brief Nastaví hodnotu MIDI controlleru.
 * @param channel MIDI kanál
 * @param controller Číslo controlleru (0-127)
 * @param value Hodnota (0-127)
 */
void MidiStateManager::setControllerValue(uint8_t channel, uint8_t controller, uint8_t value) {
    if (channel >= MIDI_CHANNELS || controller > 127) return;
    controllerValues_[channel][controller] = value;
}

/**
 * @brief Vrátí hodnotu MIDI controlleru.
 * @param channel MIDI kanál
 * @param controller Číslo controlleru
 * @return Hodnota (0-127)
 */
uint8_t MidiStateManager::getControllerValue(uint8_t channel, uint8_t controller) const {
    if (channel >= MIDI_CHANNELS || controller > 127) return 0;
    return controllerValues_[channel][controller];
}

/**
 * @brief Přidá prvek do circular queue s automatickým přetečením.
 * @param queue Reference na queue
 * @param note Hodnota k přidání
 * Zjednodušeno: Používá modulo pro index, atomic operace pro count.
 */
void MidiStateManager::pushToQueue(NoteQueue& queue, uint8_t note) {
    std::lock_guard<std::mutex> lock(queue.mutex);

    if (queue.count.load() >= 256) {
        logger_.log("MidiStateManager/pushToQueue", "warn", "Queue plná - zpráva ztracena");
        return;  // Zachováno varování při plné queue
    }

    uint8_t index = queue.writeIndex.load();
    queue.notes[index] = note;
    queue.writeIndex.store((index + 1) % 256);  // Automatické přetečení modulo 256
    queue.count.fetch_add(1);  // Atomic inkrement počtu
}

/**
 * @brief Vytáhne prvek z circular queue.
 * @param queue Reference na queue
 * @return Hodnota nebo 255 při prázdné queue (🔧 Změna: Pro konzistenci s uint8_t)
 */
uint8_t MidiStateManager::popFromQueue(NoteQueue& queue) {
    std::lock_guard<std::mutex> lock(queue.mutex);

    if (queue.count.load() == 0) {
        return 255;  // 🔧 Změna: 255 místo 0xff pro uint8_t (prázdná queue)
    }

    uint8_t note = queue.notes[queue.readIndex];
    queue.readIndex = (queue.readIndex + 1) % 256;  // Modulo pro přetečení
    queue.count.fetch_sub(1);  // Atomic dekrement počtu
    return note;
}

#ifdef _WIN32
#pragma warning(pop)
#endif


===== File: MidiStateManager.h =====
Path: C:\Users\jindr\IthacaPlayer\MidiStateManager.h
=====
#pragma once

#include <juce_core/juce_core.h>
#include <juce_audio_basics/juce_audio_basics.h>
#include <array>
#include <atomic>
#include <mutex>
#include "Logger.h"

// Konstanty pro MIDI rozsahy
constexpr uint8_t MIDI_NOTES = 128;  // Standardní počet MIDI not (0-127)
constexpr uint8_t MIDI_CHANNELS = 16;  // Standardní počet MIDI kanálů

/**
 * @class MidiStateManager
 * @brief Spravuje stav MIDI zpráv, včetně aktivních not, velocity, controllerů a queue pro note-on/off.
 * 
 * Tato třída je thread-safe díky mutexům a atomic proměnným. Poskytuje metody pro push/pop MIDI událostí,
 * sledování aktivních not a controller hodnot. Inicializuje výchozí hodnoty controllerů podle MIDI standardu.
 */
class MidiStateManager
{
public:
    MidiStateManager();

    // Metody pro note-on/off
    void pushNoteOn(uint8_t channel, uint8_t note, uint8_t velocity);  // Přidá note-on do queue a aktualizuje stav
    void pushNoteOff(uint8_t channel, uint8_t note);  // Přidá note-off do queue a aktualizuje stav
    uint8_t popNoteOn(uint8_t channel);  // 🔧 Změna: Změněno na uint8_t, vrací 255 pokud prázdná (pro odstranění warningu C4244)
    uint8_t popNoteOff(uint8_t channel);  // 🔧 Změna: Změněno na uint8_t, vrací 255 pokud prázdná

    // Metody pro aktivní noty
    bool isNoteActive(uint8_t channel, uint8_t note) const;  // Zkontroluje, zda je nota aktivní
    uint8_t getVelocity(uint8_t channel, uint8_t note) const;  // Vrátí velocity aktivní noty

    // Metody pro MIDI controllery
    void setControllerValue(uint8_t channel, uint8_t controller, uint8_t value);  // Nastaví hodnotu controlleru
    uint8_t getControllerValue(uint8_t channel, uint8_t controller) const;  // Vrátí hodnotu controlleru

private:
    Logger& logger_;  // Reference na logger pro logování událostí

    // Struktura pro circular buffer queue (zachována pro efektivitu a thread-safety)
    struct NoteQueue {
        std::array<uint8_t, 256> notes;  // Circular buffer o velikosti 256 (magické číslo zachováno)
        std::atomic<uint8_t> writeIndex{0};  // Atomic index pro zápis (thread-safe)
        std::atomic<uint8_t> count{0};  // Počet prvků v queue (atomic pro bezpečný přístup)
        uint8_t readIndex{0};  // Index pro čtení (chráněn mutexem)
        mutable std::mutex mutex;  // Mutex pro synchronizaci přístupu

        void reset();  // Resetuje queue na výchozí stav
    };

    // Queue pro note-on a note-off pro každý kanál
    std::array<NoteQueue, MIDI_CHANNELS> noteOnQueues_;
    std::array<NoteQueue, MIDI_CHANNELS> noteOffQueues_;

    // Pole pro aktivní noty a velocity
    std::array<std::atomic<bool>, MIDI_NOTES> activeNotes_;  // Atomic pro thread-safety
    std::array<std::array<uint8_t, MIDI_NOTES>, MIDI_CHANNELS> velocities_;  // Velocity pro každý kanál a notu
    std::array<std::array<uint8_t, 128>, MIDI_CHANNELS> controllerValues_;  // Controller hodnoty

    // Interní helper metody
    void pushToQueue(NoteQueue& queue, uint8_t note);  // Přidá do queue s automatickým přetečením
    uint8_t popFromQueue(NoteQueue& queue);  // Vytáhne z queue, vrací 255 při prázdné
};


===== File: PluginEditor.cpp =====
Path: C:\Users\jindr\IthacaPlayer\PluginEditor.cpp
=====
#include "PluginProcessor.h"
#include "PluginEditor.h"
#include "Logger.h"

//==============================================================================
AudioPluginAudioProcessorEditor::AudioPluginAudioProcessorEditor (AudioPluginAudioProcessor& p)
    : AudioProcessorEditor (&p), processorRef (p)
{
    DBG("Editor constructor started...");  // Přidaný debug pro konzoli
    juce::ignoreUnused (processorRef);
    
    // Logování vytváření editoru
    Logger::getInstance().log("PluginEditor/constructor", "info", "=== INICIALIZACE GUI ===");
    Logger::getInstance().log("PluginEditor/constructor", "info", "Vytvářeni komponenty editoru");
    
    // Inicializace log display (multiline, read-only, se scrollbar)
    logDisplay = std::make_unique<juce::TextEditor>();
    logDisplay->setMultiLine(true);
    logDisplay->setReadOnly(true);
    logDisplay->setScrollbarsShown(true);
    
    // Oprava deprecated Font konstruktoru
    juce::Font monoFont(juce::FontOptions(juce::Font::getDefaultMonospacedFontName(), 11.0f, juce::Font::plain));
    logDisplay->setFont(monoFont);
    
    // Styling pro lepší čitelnost
    logDisplay->setColour(juce::TextEditor::backgroundColourId, juce::Colour(0xff1e1e1e)); // Tmavě šedé pozadí
    logDisplay->setColour(juce::TextEditor::textColourId, juce::Colour(0xff00ff00));        // Zelený text (matrix style)
    logDisplay->setColour(juce::TextEditor::outlineColourId, juce::Colour(0xff404040));     // Tmavý okraj
    
    addAndMakeVisible(logDisplay.get());
    
    Logger::getInstance().log("PluginEditor/constructor", "info", "Log display inicializovan s matrix theme");

    // Inicializace toggle tlačítka
    toggleLogging = std::make_unique<juce::ToggleButton>("Zapnout/Vypnout logovani");
    toggleLogging->setToggleState(Logger::loggingEnabled, juce::dontSendNotification);
    toggleLogging->onClick = [this] {
        bool newState = toggleLogging->getToggleState();
        Logger::loggingEnabled = newState;
        Logger::getInstance().log("PluginEditor/toggleButton", "info", 
            "Logovani " + juce::String(newState ? "ZAPNUTO" : "VYPNUTO"));
        if (!Logger::loggingEnabled) {
            logDisplay->clear();  // Vyčištění display při vypnutí
        }
    };
    addAndMakeVisible(toggleLogging.get());
    
    Logger::getInstance().log("PluginEditor/constructor", "info", "Toggle button inicializovan");

    // Přidání tlačítka pro vyčištění logů
    clearLogsButton = std::make_unique<juce::TextButton>("Vycistit logy");
    clearLogsButton->onClick = [this] {
        logDisplay->clear();
        Logger::getInstance().log("PluginEditor/clearButton", "info", "=== LOGY VYCISTENY UZIVATELEM ===");
    };
    addAndMakeVisible(clearLogsButton.get());
    
    Logger::getInstance().log("PluginEditor/constructor", "info", "Clear button inicializovan");

    // Nastavení reference na tento editor v Loggeru
    Logger::getInstance().setEditor(this);
    Logger::getInstance().log("PluginEditor/constructor", "info", "Reference na editor nastavena v Loggeru");

    // Rozšířená velikost okna na 800x500
    setSize (1024, 600);
    Logger::getInstance().log("PluginEditor/constructor", "info", "Velikost okna nastavena: 800x500");
    Logger::getInstance().log("PluginEditor/constructor", "info", "=== GUI INICIALIZACE DOKONČENA ===");
}

AudioPluginAudioProcessorEditor::~AudioPluginAudioProcessorEditor()
{
    // Logování před destrukcí
    Logger::getInstance().log("PluginEditor/destructor", "info", "=== UZAVIRANI GUI ===");
    Logger::getInstance().log("PluginEditor/destructor", "info", "Zahajeni destrukce editoru");
    
    // Odstranění reference při destrukci
    Logger::getInstance().setEditor(nullptr);
    Logger::getInstance().log("PluginEditor/destructor", "info", "Reference na editor odstranena");
    Logger::getInstance().log("PluginEditor/destructor", "info", "=== GUI UZAVRENO ===");
    DBG("Editor destructor called.");  // Přidaný debug pro konzoli
}

//==============================================================================
void AudioPluginAudioProcessorEditor::paint (juce::Graphics& g)
{
    DBG("Painting editor...");  // Přidaný debug pro vykreslení
    // Logování pouze při prvním vykreslení
    static bool firstPaint = true;
    if (firstPaint)
    {
        Logger::getInstance().log("PluginEditor/paint", "info", "=== PRVNI VYKRESLENI GUI ===");
        Logger::getInstance().log("PluginEditor/paint", "info", "Rozmery canvas: " + 
            juce::String(getWidth()) + "x" + juce::String(getHeight()));
        firstPaint = false;
    }
    
    // Gradient pozadí
    juce::ColourGradient gradient(juce::Colour(0xff2a2a2a), 0, 0,
                                  juce::Colour(0xff1a1a1a), 0, (float)getHeight(), false);
    g.setGradientFill(gradient);
    g.fillAll();

    // Horní sekce - nadpis a info
    g.setColour (juce::Colours::lightblue);
    g.setFont(juce::FontOptions(20.0f, juce::Font::bold));
    g.drawFittedText("IthacaPlayer Debug Interface", 10, 10, getWidth() - 20, 40, juce::Justification::centred, 1);
    
    g.setColour(juce::Colours::lightgrey);
    g.setFont(juce::FontOptions(12.0f));
    g.drawFittedText("Real-time logging a debugging audio pluginu", 10, 50, getWidth() - 20, 20, juce::Justification::centred, 1);
    
    // Oddělovací čára
    g.setColour(juce::Colour(0xff404040));
    g.fillRect(10, 80, getWidth() - 20, 1);
}

void AudioPluginAudioProcessorEditor::resized()
{
    DBG("Resizing editor...");  // Přidaný debug pro změnu velikosti
    // Logování změny velikosti
    Logger::getInstance().log("PluginEditor/resized", "debug", "Zmena velikosti GUI: " + 
        juce::String(getWidth()) + "x" + juce::String(getHeight()));
    
    // Layout - rozložení komponent
    int margin = 10;
    int buttonHeight = 30;
    int headerHeight = 90;  // Prostor pro nadpis
    
    // Log display zabírá většinu místa
    int logDisplayHeight = getHeight() - headerHeight - buttonHeight * 2 - margin * 4;
    logDisplay->setBounds(margin, headerHeight, getWidth() - 2 * margin, logDisplayHeight);

    // Tlačítka ve spodní části
    int buttonY = headerHeight + logDisplayHeight + margin;
    int buttonWidth = (getWidth() - 3 * margin) / 2;
    
    toggleLogging->setBounds(margin, buttonY, buttonWidth, buttonHeight);
    clearLogsButton->setBounds(margin * 2 + buttonWidth, buttonY, buttonWidth, buttonHeight);
    
    Logger::getInstance().log("PluginEditor/resized", "debug", "Layout komponent aktualizovan - log area: " + 
        juce::String(logDisplay->getWidth()) + "x" + juce::String(logDisplay->getHeight()));
}

/**
 * Aktualizace log display s auto-scroll na konec.
 */
void AudioPluginAudioProcessorEditor::updateLogDisplay()
{
    DBG("Updating log display...");  // Přidaný debug pro aktualizaci display
    // Získání bufferu z Loggeru přes getter
    const juce::StringArray& buffer = Logger::getInstance().getLogBuffer();

    // Sestavení textu
    juce::String logText;
    for (const auto& entry : buffer)
    {
        logText += entry + "\n";
    }

    // Nastavení textu
    logDisplay->setText(logText);

    // Auto-scroll na konec pro sledování nových událostí
    logDisplay->moveCaretToEnd();
    
    // Jednoduchý scroll na konec
    logDisplay->scrollEditorToPositionCaret(0, logDisplay->getHeight() - 20);
}


===== File: PluginEditor.h =====
Path: C:\Users\jindr\IthacaPlayer\PluginEditor.h
=====
#pragma once

#include "PluginProcessor.h"
#include <juce_gui_basics/juce_gui_basics.h>

//==============================================================================
class AudioPluginAudioProcessorEditor final : public juce::AudioProcessorEditor
{
public:
    explicit AudioPluginAudioProcessorEditor (AudioPluginAudioProcessor&);
    ~AudioPluginAudioProcessorEditor() override;

    //==============================================================================
    void paint (juce::Graphics&) override;
    void resized() override;

    // Metoda pro aktualizaci log display
    void updateLogDisplay();

private:
    // Reference na procesor
    AudioPluginAudioProcessor& processorRef;

    // Komponenty pro logování a ovládání
    std::unique_ptr<juce::TextEditor> logDisplay;
    std::unique_ptr<juce::ToggleButton> toggleLogging;
    std::unique_ptr<juce::TextButton> clearLogsButton;

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (AudioPluginAudioProcessorEditor)
};


===== File: PluginProcessor.cpp =====
Path: C:\Users\jindr\IthacaPlayer\PluginProcessor.cpp
=====
#include "PluginProcessor.h"
#include "PluginEditor.h"
#include "SampleLibrary.h"

/**
 * @brief Konstruktor AudioPluginAudioProcessor.
 * Inicializuje komponenty a stav.
 */
AudioPluginAudioProcessor::AudioPluginAudioProcessor()
    : AudioProcessor(BusesProperties()
                     .withOutput("Output", juce::AudioChannelSet::stereo(), true))
    , logger_(Logger::getInstance())
    , voiceManager_(sampleLibrary_)  // VoiceManager vyžaduje SampleLibrary
{
    logger_.log("PluginProcessor/constructor", "info", "=== ZAHÁJENÍ INICIALIZACE PROCESSOR ===");
    
    try {
        // Inicializace s bezpečnými výchozími hodnotami
        sampleRate_ = 44100.0;
        synthState_.store(SynthState::Uninitialized);
        processingEnabled_.store(false);
        
        logger_.log("PluginProcessor/constructor", "info", "Základní komponenty inicializovány");
        logger_.log("PluginProcessor/constructor", "info", "Výchozí sample rate: " + juce::String(sampleRate_));
        
    } catch (const std::exception& e) {
        logger_.log("PluginProcessor/constructor", "error", "Chyba v konstruktoru: " + juce::String(e.what()));
        synthState_.store(SynthState::Error);
    } catch (...) {
        logger_.log("PluginProcessor/constructor", "error", "Neznámá chyba v konstruktoru");
        synthState_.store(SynthState::Error);
    }
    
    logger_.log("PluginProcessor/constructor", "info", "=== PROCESSOR KONSTRUKTOR DOKONČEN ===");
    DBG("Processor constructor completed with state: " + getStateDescription());
}

/**
 * @brief Destruktor s kompletním cleanup a logováním.
 */
AudioPluginAudioProcessor::~AudioPluginAudioProcessor() 
{
    logger_.log("PluginProcessor/destructor", "info", "=== ZAHÁJENÍ DESTRUKCE PROCESSOR ===");
    
    try {
        // Okamžité zastavení zpracování
        processingEnabled_.store(false);
        synthState_.store(SynthState::Uninitialized);
        
        logger_.log("PluginProcessor/destructor", "info", "Audio zpracování zastaveno");
        
        // Uvolnění zdrojů v správném pořadí
        sampleLibrary_.clear();
        logger_.log("PluginProcessor/destructor", "info", "Sample library vyčištěna");
        
        // Krátké čekání pro dokončení případných audio vláken
        juce::Thread::sleep(10);
        
    } catch (const std::exception& e) {
        logger_.log("PluginProcessor/destructor", "error", "Chyba v destruktoru: " + juce::String(e.what()));
    } catch (...) {
        logger_.log("PluginProcessor/destructor", "error", "Neznámá chyba v destruktoru");
    }
    
    logger_.log("PluginProcessor/destructor", "info", "=== DESTRUKCE PROCESSOR DOKONČENA ===");
    DBG("Processor destructor completed");
}

/**
 * @brief Příprava na přehrávání s kompletním error handlingem.
 * @param sampleRate Sample rate
 * @param samplesPerBlock Blok velikost
 */
void AudioPluginAudioProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    logger_.log("PluginProcessor/prepareToPlay", "info", "=== ZAHÁJENÍ PREPARE TO PLAY ===");
    logger_.log("PluginProcessor/prepareToPlay", "info", 
                "Parametry - SampleRate: " + juce::String(sampleRate) + 
                ", BufferSize: " + juce::String(samplesPerBlock));
    
    try {
        // Validace vstupních parametrů
        if (sampleRate <= 0.0 || sampleRate > 192000.0) {
            logger_.log("PluginProcessor/prepareToPlay", "error", "Neplatný sample rate: " + juce::String(sampleRate));
            throw std::invalid_argument(("Neplatný sample rate: " + juce::String(sampleRate)).toStdString());
        }
        
        if (samplesPerBlock <= 0 || samplesPerBlock > 8192) {
            logger_.log("PluginProcessor/prepareToPlay", "error", "Neplatná velikost bufferu: " + juce::String(samplesPerBlock));
            throw std::invalid_argument(("Neplatná velikost bufferu: " + juce::String(samplesPerBlock)).toStdString());
        }
        
        // Dočasné zastavení zpracování během inicializace
        processingEnabled_.store(false);
        synthState_.store(SynthState::Initializing);
        
        sampleRate_ = sampleRate;
        samplesPerBlock_ = samplesPerBlock;
        
        logger_.log("PluginProcessor/prepareToPlay", "info", "Parametry validovány a uloženy");
        
        // Inicializace syntezátoru
        initializeSynth();
        
        // Povolení zpracování pouze po úspěšné inicializaci
        if (synthState_.load() == SynthState::Ready) {
            processingEnabled_.store(true);
            logger_.log("PluginProcessor/prepareToPlay", "info", "Audio zpracování povoleno");
        }
        
    } catch (const std::exception& e) {
        logger_.log("PluginProcessor/prepareToPlay", "error", "Chyba v prepareToPlay: " + juce::String(e.what()));
        handleSynthError("Chyba v prepareToPlay: " + juce::String(e.what()));
        synthState_.store(SynthState::Error);
        processingEnabled_.store(false);
    } catch (...) {
        logger_.log("PluginProcessor/prepareToPlay", "error", "Neznámá chyba v prepareToPlay");
        handleSynthError("Neznámá chyba v prepareToPlay");
        synthState_.store(SynthState::Error);
        processingEnabled_.store(false);
    }
    
    logger_.log("PluginProcessor/prepareToPlay", "info", "=== PREPARE TO PLAY DOKONČEN - Stav: " + getStateDescription() + " ===");
    DBG("prepareToPlay completed with state: " + getStateDescription());
}

/**
 * @brief Uvolní zdroje s kompletním logováním.
 */
void AudioPluginAudioProcessor::releaseResources()
{
    logger_.log("PluginProcessor/releaseResources", "info", "=== ZAHÁJENÍ RELEASE RESOURCES ===");
    
    try {
        // Okamžité zastavení zpracování
        processingEnabled_.store(false);
        
        // Vyčištění vzorků
        sampleLibrary_.clear();
        logger_.log("PluginProcessor/releaseResources", "info", "Sample library vyčištěna");
        
        // Reset stavu
        synthState_.store(SynthState::Uninitialized);
        
        logger_.log("PluginProcessor/releaseResources", "info", "Všechny zdroje uvolněny");
        
    } catch (const std::exception& e) {
        logger_.log("PluginProcessor/releaseResources", "error", "Chyba při uvolňování: " + juce::String(e.what()));
    } catch (...) {
        logger_.log("PluginProcessor/releaseResources", "error", "Neznámá chyba při uvolňování");
    }
    
    logger_.log("PluginProcessor/releaseResources", "info", "=== RELEASE RESOURCES DOKONČEN ===");
    DBG("Resources released");
}

/**
 * @brief Inicializuje syntetizér s robustním error handlingem.
 */
void AudioPluginAudioProcessor::initializeSynth()
{
    if (synthState_.load() != SynthState::Initializing) {
        logger_.log("PluginProcessor/initializeSynth", "warn", "Inicializace přeskočena - nesprávný stav: " + getStateDescription());
        return;
    }

    logger_.log("PluginProcessor/initializeSynth", "info", "Zahájení inicializace syntezátoru");
    
    try {
        if (sampleRate_ <= 0.0) {
            throw std::runtime_error("Sample rate není nastaven");
        }
        
        logger_.log("PluginProcessor/initializeSynth", "info", "Inicializace sample library...");
        sampleLibrary_.initialize(sampleRate_);
        
        // Kontrola, zda byla inicializace úspěšná
        bool hasValidSamples = false;
        for (uint8_t note = SampleLibrary::MIN_NOTE; note <= SampleLibrary::MAX_NOTE; ++note) {
            for (uint8_t level = 0; level < 8; ++level) {
                if (sampleLibrary_.isNoteAvailable(note, level)) {
                    hasValidSamples = true;
                    break;
                }
            }
            if (hasValidSamples) break;
        }
        
        if (!hasValidSamples) {
            throw std::runtime_error("Žádné vzorky nebyly vygenerovány");
        }
        
        synthState_.store(SynthState::Ready);
        logger_.log("PluginProcessor/initializeSynth", "info", "Syntezátор úspěšně inicializován");
        
    } catch (const std::exception& e) {
        handleSynthError("Inicializace selhala: " + juce::String(e.what()));
        synthState_.store(SynthState::Error);
    } catch (...) {
        handleSynthError("Neznámá chyba při inicializaci");
        synthState_.store(SynthState::Error);
    }
}

/**
 * @brief Centrální handling chyb s detailním logováním.
 * @param errorMessage Zpráva o chybě
 */
void AudioPluginAudioProcessor::handleSynthError(const juce::String& errorMessage)
{
    logger_.log("PluginProcessor/handleSynthError", "error", errorMessage);
    
    // Zastavení zpracování při chybě
    processingEnabled_.store(false);
    
    // Možné rozšíření o recovery mechanismy
    DBG("Synth error: " + errorMessage);
}

/**
 * @brief Vrátí popis stavu s dodatečnými informacemi.
 * @return String popis
 */
juce::String AudioPluginAudioProcessor::getStateDescription() const
{
    juce::String base;
    switch (synthState_.load()) {
        case SynthState::Uninitialized: base = "Neinicializováno"; break;
        case SynthState::Initializing: base = "Inicializace"; break;
        case SynthState::Ready: base = "Připraveno"; break;
        case SynthState::Error: base = "Chyba"; break;
        default: base = "Neznámý stav"; break;
    }
    
    base += " (Processing: " + juce::String(processingEnabled_.load() ? "ON" : "OFF") + ")";
    logger_.log("PluginProcessor/getStateDescription", "debug", "Vrácen popis stavu: " + base);
    return base;
}

/**
 * @brief Zpracuje audio blok s kompletním error handlingem a validací.
 * @param buffer Audio buffer
 * @param midiMessages MIDI buffer
 */
void AudioPluginAudioProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midiMessages)
{
    static int blockCounter = 0;
    blockCounter++;
    
    // Periodicr logging každých 1000 bloků pro snížení zátěže
    bool shouldLog = (blockCounter % 1000 == 1) || (blockCounter <= 10);
    
    if (shouldLog) {
        logger_.log("PluginProcessor/processBlock", "info", "Blok #" + juce::String(blockCounter) + " - Stav: " + getStateDescription() + 
                   ", Velikost: " + juce::String(buffer.getNumSamples()) + 
                   ", Kanály: " + juce::String(buffer.getNumChannels()));
    }
    
    try {
        // Základní validace
        if (!processingEnabled_.load() || synthState_.load() != SynthState::Ready) {
            buffer.clear();
            if (shouldLog) {
                logger_.log("PluginProcessor/processBlock", "debug", "Blok přeskočen - zpracování vypnuto nebo nesprávný stav");
            }
            return;
        }
        
        // Validace bufferu
        if (buffer.getNumSamples() <= 0 || buffer.getNumChannels() < 2) {  // Změna: Vyžaduje stereo
            logger_.log("PluginProcessor/processBlock", "error", "Neplatný buffer - samples: " + 
                       juce::String(buffer.getNumSamples()) + ", channels: " + juce::String(buffer.getNumChannels()));
            return;
        }
        
        // Zpracování MIDI zpráv s error handlingem
        int midiEventCount = 0;
        try {
            for (const auto metadata : midiMessages) {
                auto msg = metadata.getMessage();
                midiEventCount++;
                
                if (msg.isNoteOn()) {
                    midiState_.pushNoteOn(msg.getChannel() - 1, msg.getNoteNumber(), msg.getVelocity());
                    if (shouldLog) {
                        logger_.log("PluginProcessor/processBlock", "debug", 
                                   "NoteOn: nota " + juce::String(msg.getNoteNumber()) + 
                                   ", velocity " + juce::String(msg.getVelocity()) + 
                                   ", kanál " + juce::String(msg.getChannel()));
                    }
                } else if (msg.isNoteOff()) {
                    midiState_.pushNoteOff(msg.getChannel() - 1, msg.getNoteNumber());
                    if (shouldLog) {
                        logger_.log("PluginProcessor/processBlock", "debug", 
                                   "NoteOff: nota " + juce::String(msg.getNoteNumber()) + 
                                   ", kanál " + juce::String(msg.getChannel()));
                    }
                } else if (msg.isController()) {
                    midiState_.setControllerValue(msg.getChannel() - 1, msg.getControllerNumber(), msg.getControllerValue());
                    if (shouldLog) {
                        logger_.log("PluginProcessor/processBlock", "debug", 
                                   "Controller: #" + juce::String(msg.getControllerNumber()) + 
                                   " = " + juce::String(msg.getControllerValue()));
                    }
                }
            }
        } catch (const std::exception& e) {
            logger_.log("PluginProcessor/processBlock", "error", "Chyba při zpracování MIDI: " + juce::String(e.what()));
            // Pokračujeme bez MIDI dat
        }
        
        if (shouldLog && midiEventCount > 0) {
            logger_.log("PluginProcessor/processBlock", "debug", "MIDI zprávy zpracovány: " + juce::String(midiEventCount));
        }

        // Zpracování hlasů s error handlingem
        try {
            voiceManager_.processMidiEvents(midiState_);
        } catch (const std::exception& e) {
            logger_.log("PluginProcessor/processBlock", "error", "Chyba při zpracování hlasů: " + juce::String(e.what()));
            buffer.clear();
            return;
        }

        // Generace audio s bezpečnostními kontrolami
        buffer.clear();
        
        try {
            voiceManager_.generateAudio(buffer, buffer.getNumSamples());
        } catch (const std::exception& e) {
            logger_.log("PluginProcessor/processBlock", "error", "Chyba při generaci audio: " + juce::String(e.what()));
            buffer.clear();
            return;
        }

        if (shouldLog) {
            int activeVoices = voiceManager_.getActiveVoiceCount();
            logger_.log("PluginProcessor/processBlock", "debug", 
                       "Blok dokončen - Aktivní hlasy: " + juce::String(activeVoices));
        }
        
    } catch (const std::exception& e) {
        logger_.log("PluginProcessor/processBlock", "error", "Výjimka v processBlock: " + juce::String(e.what()));
        buffer.clear(); // Zajistíme tichý výstup při chybě
        processingEnabled_.store(false); // Zastavíme zpracování při kritické chybě
    } catch (...) {
        logger_.log("PluginProcessor/processBlock", "error", "Neznámá výjimka v processBlock");
        buffer.clear();
        processingEnabled_.store(false);
    }
}

/**
 * @brief Vytvoří editor s error handlingem.
 */
juce::AudioProcessorEditor* AudioPluginAudioProcessor::createEditor()
{
    logger_.log("PluginProcessor/createEditor", "info", "=== VYTVÁŘENÍ EDITORU ===");
    
    try {
        auto* editor = new AudioPluginAudioProcessorEditor(*this);
        logger_.log("PluginProcessor/createEditor", "info", "Editor úspěšně vytvořen");
        return editor;
    } catch (const std::exception& e) {
        logger_.log("PluginProcessor/createEditor", "error", "Chyba při vytváření editoru: " + juce::String(e.what()));
        return nullptr;
    } catch (...) {
        logger_.log("PluginProcessor/createEditor", "error", "Neznámá chyba při vytváření editoru");
        return nullptr;
    }
}

/**
 * @brief Exportovaná funkce pro JUCE plugin s error handlingem.
 */
juce::AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    try {
        return new AudioPluginAudioProcessor();
    } catch (const std::exception& e) {
        DBG("Error creating plugin: " + juce::String(e.what()));
        return nullptr;
    } catch (...) {
        DBG("Unknown error creating plugin");
        return nullptr;
    }
}


===== File: PluginProcessor.h =====
Path: C:\Users\jindr\IthacaPlayer\PluginProcessor.h
=====
#pragma once

#include <juce_audio_processors/juce_audio_processors.h>
#include <atomic>
#include "SampleLibrary.h"
#include "VoiceManager.h"
#include "MidiStateManager.h"
#include "Logger.h"

// Enum pro stavy syntetizéru s rozšířenou funkcionalitou
enum class SynthState {
    Uninitialized,  // Počáteční stav - nic není inicializováno
    Initializing,   // Probíhá inicializace
    Ready,          // Připraveno k audio zpracování
    Error           // Kritická chyba - vyžaduje restart
};

/**
 * @class AudioPluginAudioProcessor
 * @brief Hlavní audio procesor pluginu (JUCE-based) s robustním error handlingem.
 * 
 * Spravuje inicializaci, zpracování audio/MIDI, stav syntetizéru a error recovery.
 * Nově přidány atomic safety mechanismy a detailní logging pro debugging.
 * 
 * Thread Safety:
 * - synthState_ a processingEnabled_ jsou atomic pro bezpečný přístup z více vláken
 * - Všechny kritické operace jsou chráněny try-catch bloky
 * - Error handling s automatic recovery kde je to možné
 * 
 * Memory Management:
 * - Automatické cleanup v destruktoru
 * - Safe resource deallocation při chybách
 * - Kontrola validity pointerů před použitím
 */
class AudioPluginAudioProcessor : public juce::AudioProcessor
{
public:
    AudioPluginAudioProcessor();
    ~AudioPluginAudioProcessor() override;

    // === JUCE Audio Processor Interface ===
    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    // === Editor Management ===
    juce::AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override { return true; }

    // === Plugin Metadata ===
    const juce::String getName() const override { return JucePlugin_Name; }
    bool acceptsMidi() const override { return true; }
    bool producesMidi() const override { return false; }
    bool isMidiEffect() const override { return false; }
    double getTailLengthSeconds() const override { return 0.0; }

    // === Program Management (Basic Implementation) ===
    int getNumPrograms() override { return 1; }
    int getCurrentProgram() override { return 0; }
    void setCurrentProgram(int) override {}
    const juce::String getProgramName(int) override { return {}; }
    void changeProgramName(int, const juce::String&) override {}

    // === State Persistence (Placeholder) ===
    void getStateInformation(juce::MemoryBlock&) override {}
    void setStateInformation(const void*, int) override {}

    // === Public Status Methods ===
    /**
     * @brief Vrátí lidsky čitelný popis aktuálního stavu.
     * @return String s popisem stavu včetně processing status
     */
    juce::String getStateDescription() const;

    /**
     * @brief Kontroluje, zda je procesor připraven k audio zpracování.
     * @return true pokud je ready a processing enabled
     */
    bool isReadyForProcessing() const { 
        return synthState_.load() == SynthState::Ready && processingEnabled_.load(); 
    }

    /**
     * @brief Vrátí aktuální sample rate.
     * @return Sample rate nebo 0 pokud není nastaven
     */
    double getCurrentSampleRate() const { return sampleRate_; }

    /**
     * @brief Vrátí velikost audio bufferu.
     * @return Velikost bufferu nebo 0 pokud není nastaven
     */
    int getCurrentBufferSize() const { return samplesPerBlock_; }

private:
    // === Core Components ===
    Logger& logger_;  // Reference na singleton logger
    SampleLibrary sampleLibrary_;  // Knihovna audio vzorků
    VoiceManager voiceManager_;  // Manager polyphonic hlasů
    MidiStateManager midiState_;  // Manager MIDI stavu a událostí

    // === State Management (Thread-Safe) ===
    std::atomic<SynthState> synthState_{SynthState::Uninitialized};  // Stav syntetizéru
    std::atomic<bool> processingEnabled_{false};  // Povolení audio zpracování
    
    // === Audio Configuration ===
    double sampleRate_{44100.0};  // Aktuální sample rate
    int samplesPerBlock_{512};     // Velikost audio bufferu

    // === Private Methods ===

    /**
     * @brief Inicializuje syntetizér (vzorky, voices atd.) s error handlingem.
     * Volá se z prepareToPlay po validaci parametrů.
     * 
     * Process:
     * 1. Kontrola přechodů stavů
     * 2. Inicializace SampleLibrary
     * 3. Validace vygenerovaných vzorků
     * 4. Nastavení Ready stavu
     * 
     * @throws std::runtime_error při kritických chybách
     */
    void initializeSynth();

    /**
     * @brief Centrální metoda pro handling chyb s automatickým recovery.
     * 
     * Akce při chybě:
     * - Logování s detailním popisem
     * - Zastavení audio zpracování
     * - Možné future recovery mechanismy
     * 
     * @param errorMessage Zpráva o chybě pro logging
     */
    void handleSynthError(const juce::String& errorMessage);

    // === JUCE Macro for Memory Leak Detection ===
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR(AudioPluginAudioProcessor)
};

// === Global Plugin Factory Function ===
/**
 * @brief Factory funkce pro vytváření plugin instance.
 * Vyžadována JUCE frameworkem pro VST3, AU a další formáty.
 * 
 * @return Novou instanci AudioPluginAudioProcessor nebo nullptr při chybě
 */
juce::AudioProcessor* JUCE_CALLTYPE createPluginFilter();


===== File: README.md =====
Path: C:\Users\jindr\IthacaPlayer\README.md
=====
## Cesty na build soubory

[build]   juce_vst3_helper.vcxproj .\build\Debug\juce_vst3_helper.exe
[build]   IthacaPlayer.vcxproj -> .\build\IthacaPlayer_artefacts\Debug\IthacaPlayer_SharedCode.lib
[build]   IthacaPlayer_VST3.vcxproj -> .\build\IthacaPlayer_artefacts\Debug\VST3\IthacaPlayer.vst3\Contents\x86_64-win\IthacaPlayer.vst3
[build]   IthacaPlayer_Standalone.vcxproj -> .\build\IthacaPlayer_artefacts\Debug\Standalone\IthacaPlayer.exe

## Cesta na aplikacni data

WIN+R: %APPDATA%\IthacaPlayer

C:\Users\nemej992\AppData\Roaming\IthacaPlayer

## Nastavení vývojového prostředí

Pro kompilaci C++ projektu s CMakeLists.txt ve Visual Studio Code (VS Code) proveďte následující kroky. Předpokládá se instalace Visual Studio Build Tools (s MSVC kompilátorem: https://visualstudio.microsoft.com/cs/visual-cpp-build-tools/) a CMake.

### Požadavky
- Visual Studio Build Tools (MSVC kompilátor).
- CMake nainstalovaný a přidán do PATH (např. C:\Program Files\CMake\bin).
- VS Code.

### Kroky nastavení
1. **Instalace rozšíření ve VS Code**:
   - Otevřete Extensions (Ctrl+Shift+X).
   - Nainstalujte: C/C++ (od Microsoftu pro podporu C++ syntaxe, IntelliSense a ladění) a CMake Tools (od Microsoftu pro integraci CMake).
   - Restartujte VS Code.
2. **Otevření projektu**:
   - Přejděte na File > Open Folder a vyberte složku s CMakeLists.txt.
3. **Výběr kompilátoru (kit)**:
   - V Command Palette (Ctrl+Shift+P) napište "CMake: Select a Kit".
   - Vyberte "amd64" (64-bit) nebo ekvivalent podle potřeby (např. x64 pro moderní systémy).
4. **Konfigurace projektu**:
   - V Command Palette napište "CMake: Configure". To vygeneruje build soubory (obvykle ve složce "build").
5. **Build projektu**:
   - V Command Palette napište "CMake: Build" nebo použijte Shift+Ctrl+B (nyní nabídne CMake úlohy).
6. **Debugování (volitelně)**:
   - Nastavte breakpointy a spusťte "CMake: Debug" v Command Palette.

---

# IthacaPlayer - Software Synthesizer

Audio plugin synthesizer implementovaný v JUCE frameworku, inspirovaný hardwarovými syntezátory s modulární architekturou.

## Architektura Systému

### Přehled Komponent

```
AudioPluginAudioProcessor (Main Controller)
├── SampleLibrary (Pre-computed Audio Storage)
├── MidiStateManager (MIDI Event Processing)  
├── VoiceManager (Voice Allocation & Control)
└── Logger (Debug & Monitoring)
```

## Core Komponenty

### 1. SampleLibrary
**Účel:** Správa pre-computed audio sampelů pro jednotlivé MIDI noty

**Klíčové vlastnosti:**
- **Static allocation:** 292MB RAM pro 128 MIDI not × 12 sekund × sample rate
- **Pre-computed sine waves:** Generování při inicializaci místo realtime syntézy
- **Memory management:** Per-nota allocation s bezpečným uvolňováním
- **Rozšiřitelnost:** Připraveno pro načítání WAV souborů

**API:**
```cpp
SampleLibrary(double sampleRate)
bool generateSineWaveForNote(uint8_t midiNote, float frequency)
const float* getSampleData(uint8_t midiNote)
uint32_t getSampleLength(uint8_t midiNote)
bool isNoteAvailable(uint8_t midiNote)
```

**Implementační detaily:**
- Každý sample má pevnou délku 12 sekund
- Amplitude 0.3f pro prevenci clippingu
- Thread-safe přístup k sample datům

### 2. MidiStateManager
**Účel:** Centrální správa MIDI stavu a událostí

**Inspirováno:** Hardware MidiParser + ActiveKeys pattern
- Circular buffer approach pro MIDI zpracování
- Queue-based event distribution
- State tracking pro aktivní noty a controllery

**Klíčové struktury:**
```cpp
struct ActiveNote {
    uint8_t key, velocity, channel;
    bool isActive;
    uint32_t triggerTime; // Pro voice stealing
};
```

**Queue Management:**
- Oddělené queues pro Note On/Off události
- Per-channel event routing (16 MIDI kanálů)
- Pop/push pattern podobný hardware implementaci

**API:**
```cpp
void processMidiBuffer(const juce::MidiBuffer& midiBuffer)
uint8_t popNoteOn(uint8_t channel)   // Returns key nebo 0xff
uint8_t popNoteOff(uint8_t channel)  // Returns key nebo 0xff
void setPitchWheel(int16_t value)
void setControllerValue(uint8_t channel, uint8_t controller, uint8_t value)
```

### 3. VoiceManager
**Účel:** Polyphonic voice allocation a audio generování

**Inspirováno:** Hardware Performer class
- 16 polyphonic hlasů
- Sophisticated voice stealing algorithm
- Queue-based priority system

**Voice Allocation Algorithm:**
```cpp
int getFreeVoice(uint8_t note) {
    // 1. Hledá existující hlas s touto notou
    // 2. Hledá neaktivní hlas s nejvyšší queue pozicí  
    // 3. Krade aktivní hlas s nejvyšší queue pozicí
}
```

**Queue Management (mixleQueue):**
Algoritmus převzatý z HW implementace:
1. Vybraný hlas → queue pozice 0
2. Ostatní hlasy → pozice++
3. Komprese queue pozic > původní pozice

**SynthVoice vlastnosti:**
- Sample position tracking
- Velocity scaling
- Pitch wheel support
- No-loop playback (12s sample se přehraje jednou)

### 4. Logger System
**Účel:** Real-time debugging a monitoring

**Vlastnosti:**
- Thread-safe logování z audio vlákna
- Sliding window buffer (100 zpráv)
- Kategorizace: info/debug/warn
- GUI integration přes MessageManager

**Usage Pattern:**
```cpp
Logger::getInstance().log("Component/method", "severity", "message");
```

## Audio Processing Flow

### Main Processing Loop (processBlock)

```cpp
void processBlock(AudioBuffer<float>& buffer, MidiBuffer& midiMessages) {
    // 1. MIDI Processing
    midiStateManager_->processMidiBuffer(midiMessages);
    
    // 2. Voice Management  
    voiceManager_->processMidiEvents(*midiStateManager_);
    
    // 3. Audio Generation
    voiceManager_->generateAudio(channelData, numSamples, *sampleLibrary_);
    
    // 4. Refresh Cycle
    voiceManager_->refresh();
}
```

### Initialization Sequence

```
Constructor:
├── Create SampleLibrary (dummy sample rate)
├── Create MidiStateManager  
└── Create VoiceManager (16 voices)

prepareToPlay:
├── Reinit SampleLibrary (correct sample rate)
├── Generate sine wave pro Middle C (nota 60)
└── Mark synthInitialized = true
```

## Memory Management

### Sample Library Storage
- **Celková alokace:** ~292MB pro kompletní library
- **Current prototype:** Pouze 1 nota (Middle C) = ~2.3MB
- **Allocation strategy:** On-demand per nota
- **Deallocation:** Automatic při destrukci

### Voice Memory
- **16 SynthVoice objektů:** Minimální memory footprint  
- **Sample position tracking:** uint32_t per voice
- **State variables:** note, velocity, gate status

## MIDI Implementation

### Podporované MIDI zprávy:
- **Note On/Off:** Kompletní support včetně Note On velocity 0
- **Pitch Wheel:** 14-bit resolution (-8192 až +8191)
- **Control Change:** 128 controllers × 16 kanálů
- **Channel support:** 16 MIDI kanálů

### MIDI Routing:
- **Prototype:** Pouze kanál 0 aktivní
- **Full version:** Všech 16 kanálů připraveno

## Build System

### CMake Configuration:
```cmake
IS_SYNTH TRUE
NEEDS_MIDI_INPUT TRUE  
FORMATS AU VST3 Standalone
```

### Source Files:
```
Core Audio:
├── PluginProcessor.h/cpp
├── PluginEditor.h/cpp

Synth Engine:
├── SampleLibrary.h/cpp
├── MidiStateManager.h/cpp
├── VoiceManager.h/cpp

Utilities:
└── Logger.h/cpp
```

## Development Workflow

### Current Prototype Status:
- **Working:** MIDI input, voice allocation, sine wave playback
- **Limitation:** Pouze Middle C (nota 60) generuje audio
- **Voice count:** 16 polyphonic
- **Sample length:** 12 sekund per nota

### Next Development Steps:
1. **Full note range:** Generate sine waves pro všech 128 not
2. **WAV loading:** Implementace načítání externích sampelů
3. **ADSR envelope:** Note-off handling s envelope
4. **Effects:** Reverb, filter, modulation
5. **Preset system:** Save/load configurations

### Debug Features:
- **Real-time logging:** Vše se loguje do GUI
- **MIDI monitoring:** Detailní MIDI event tracking  
- **Voice status:** Queue positions, active notes
- **Performance:** Audio block processing statistics

## Technical Specifications

### Audio:
- **Sample rates:** 44.1kHz - 192kHz support
- **Bit depth:** 32-bit float processing
- **Latency:** Buffer size dependent (~10ms při 480 samples/48kHz)
- **Polyphony:** 16 hlasů

### MIDI:
- **Input latency:** Sub-millisecond  
- **Jitter:** Minimal díky JUCE MIDI buffering
- **Throughput:** Unlimited MIDI events per block

### Memory:
- **Runtime:** ~292MB při full library
- **Prototype:** ~2.3MB current usage
- **Stack:** Minimal - většinou heap allocation

### Performance:
- **CPU usage:** Low - pre-computed samples
- **Real-time safe:** Ano - žádné allokace v audio vlákně
- **Thread safety:** Logger + MIDI state management

## Architecture Decisions

### Pre-computed vs Real-time:
**Volba:** Pre-computed samples
**Důvod:** Konzistentní CPU usage, možnost komplexních waveforms
**Trade-off:** Vysoká paměť vs stabilní performance

### Voice Stealing Algorithm:
**Volba:** Queue-based priority system  
**Důvod:** Zachování hardware workflow, předvídatelné chování
**Benefit:** Longest-idle voice stealing

### MIDI State Management:
**Volba:** Centrální state s queue distribution
**Důvod:** Thread safety, clean separation of concerns
**Pattern:** Hardware MidiParser + ActiveKeys adaptace

### Logging Strategy:
**Volba:** Comprehensive real-time logging
**Důvod:** Complex debugging požadavky
**Implementation:** Thread-safe async GUI updates


===== File: SampleLibrary.cpp =====
Path: C:\Users\jindr\IthacaPlayer\SampleLibrary.cpp
=====
#include "SampleLibrary.h"
#include "SampleLoader.h"  // Nový include
#include <cmath>

SampleLibrary::SampleLibrary() : logger_(Logger::getInstance()) {
    logger_.log("SampleLibrary/constructor", "info", "SampleLibrary inicializována");
}

void SampleLibrary::initialize(double sampleRate) {
    logger_.log("SampleLibrary/initialize", "info", "Začátek inicializace se sample rate=" + juce::String(sampleRate));
    auto startTime = juce::Time::getMillisecondCounterHiRes();
    sampleRate_ = sampleRate;
    clear();

    SampleLoader loader(sampleRate_);
    juce::File instrumentDir = SampleLoader::getDefaultInstrumentDirectory();
    if (!instrumentDir.exists()) {
        instrumentDir.createDirectory();
        logger_.log("SampleLibrary/initialize", "info", "Vytvořen instrument directory: " + instrumentDir.getFullPathName());
    }

    auto progressCallback = [this](int current, int total, const juce::String& status) {
        logger_.log("SampleLibrary/initialize", "info", "Progress: " + juce::String(current) + "/" + juce::String(total) + " - " + status);
    };

    auto loadedSamples = loader.loadInstrument(instrumentDir, progressCallback);

    loadingStats_.totalSamples = static_cast<int>(loadedSamples.size());
    loadingStats_.totalMemoryUsed = 0;
    loadingStats_.loadedFromFiles = 0;
    loadingStats_.generatedSines = 0;

    {
        std::lock_guard<std::mutex> lock(accessMutex_);
        for (auto& sample : loadedSamples) {
            auto& seg = sampleSegments_[sample.midiNote];
            uint8_t level = sample.dynamicLevel;
            seg.dynamicLayers[level] = std::move(sample.audioData);
            seg.layerLengthSamples[level] = sample.lengthSamples;
            seg.layerAllocated[level] = true;
            seg.midiNote = sample.midiNote;

            if (sample.isGenerated) ++loadingStats_.generatedSines;
            else ++loadingStats_.loadedFromFiles;

            loadingStats_.totalMemoryUsed += sample.lengthSamples * 2 * sizeof(float);  // Stereo
        }
    }

    loadingStats_.loadingTimeSeconds = (juce::Time::getMillisecondCounterHiRes() - startTime) / 1000.0;
    logger_.log("SampleLibrary/initialize", "info", "Načítání dokončeno: " + juce::String(loadingStats_.loadedFromFiles) + " z WAV, " +
                juce::String(loadingStats_.generatedSines) + " generovaných, " + juce::String(loadingStats_.totalMemoryUsed / (1024*1024)) + " MB");
}

void SampleLibrary::clear() {
    logger_.log("SampleLibrary/clear", "info", "Začátek čištění SampleLibrary");
    std::lock_guard<std::mutex> lock(accessMutex_);
    for (auto& seg : sampleSegments_) {
        for (int i = 0; i < 8; ++i) {
            seg.dynamicLayers[i].reset();
            seg.layerLengthSamples[i] = 0;
            seg.layerAllocated[i] = false;
        }
        seg.midiNote = 0;
    }
    logger_.log("SampleLibrary/clear", "info", "SampleLibrary vyčištěna");
}

const float* SampleLibrary::getSampleData(uint8_t midiNote, uint8_t dynamicLevel) const {
    std::lock_guard<std::mutex> lock(accessMutex_);
    if (midiNote < sampleSegments_.size() && dynamicLevel < 8 && sampleSegments_[midiNote].layerAllocated[dynamicLevel]) {
        logger_.log("SampleLibrary/getSampleData", "debug", "Vrácena data pro notu " + juce::String(midiNote) + ", vrstva " + juce::String(dynamicLevel));
        return sampleSegments_[midiNote].dynamicLayers[dynamicLevel].get();
    }
    logger_.log("SampleLibrary/getSampleData", "warn", "Žádná data pro notu " + juce::String(midiNote) + ", vrstva " + juce::String(dynamicLevel));
    return nullptr;
}

uint32_t SampleLibrary::getSampleLength(uint8_t midiNote, uint8_t dynamicLevel) const {
    std::lock_guard<std::mutex> lock(accessMutex_);
    if (midiNote < sampleSegments_.size() && dynamicLevel < 8 && sampleSegments_[midiNote].layerAllocated[dynamicLevel]) {
        logger_.log("SampleLibrary/getSampleLength", "debug", "Vrácena délka " + juce::String(sampleSegments_[midiNote].layerLengthSamples[dynamicLevel]) + " pro notu " + juce::String(midiNote) + ", vrstva " + juce::String(dynamicLevel));
        return sampleSegments_[midiNote].layerLengthSamples[dynamicLevel];
    }
    logger_.log("SampleLibrary/getSampleLength", "warn", "Žádná délka pro notu " + juce::String(midiNote) + ", vrstva " + juce::String(dynamicLevel));
    return 0;
}

bool SampleLibrary::isNoteAvailable(uint8_t midiNote, uint8_t dynamicLevel) const {
    std::lock_guard<std::mutex> lock(accessMutex_);
    bool available = midiNote < sampleSegments_.size() && dynamicLevel < 8 && sampleSegments_[midiNote].layerAllocated[dynamicLevel];
    logger_.log("SampleLibrary/isNoteAvailable", "debug", "Nota " + juce::String(midiNote) + ", vrstva " + juce::String(dynamicLevel) + " je " + (available ? "dostupná" : "nedostupná"));
    return available;
}

uint8_t SampleLibrary::velocityToDynamicLevel(uint8_t velocity) const {
    uint8_t level = std::min<uint8_t>(7, velocity / 16);
    logger_.log("SampleLibrary/velocityToDynamicLevel", "debug", "Velocity " + juce::String(velocity) + " mapováno na vrstvu " + juce::String(level));
    return level;
}


===== File: SampleLibrary.h =====
Path: C:\Users\jindr\IthacaPlayer\SampleLibrary.h
=====
#pragma once

#include <juce_core/juce_core.h>
#include <memory>
#include <array>
#include "Logger.h"
#include "SampleLoader.h"  // Přidaný include pro SampleLoader (pro konzistenci, i když není v .h nutný)

/**
 * @struct SampleSegment
 * @brief Struktura pro segment vzorku s dynamickými vrstvami.
 * 
 * Drží data pro 8 dynamických vrstev (stereo interleaved), délky a alokace.
 */
struct SampleSegment {
    std::array<std::unique_ptr<float[]>, 8> dynamicLayers;  // Interleaved stereo data
    std::array<uint32_t, 8> layerLengthSamples{};  // Délka pro jeden kanál
    uint8_t midiNote{0};
    std::array<bool, 8> layerAllocated{false};

    /**
     * @brief Vrátí délku vrstvy.
     * @param dynamicLevel Vrstva (0-7)
     * @return Délka v samplech nebo 0 při nevalidní vrstvě
     */
    uint32_t getLayerLength(uint8_t dynamicLevel) const {
        return (dynamicLevel < 8) ? layerLengthSamples[dynamicLevel] : 0;
    }

    /**
     * @brief Vrátí ukazatel na data vrstvy.
     * @param dynamicLevel Vrstva (0-7)
     * @return Ukazatel na data nebo nullptr při nevalidní vrstvě
     */
    const float* getLayerData(uint8_t dynamicLevel) const {
        return (dynamicLevel < 8 && layerAllocated[dynamicLevel]) ? dynamicLayers[dynamicLevel].get() : nullptr;
    }
};

/**
 * @class SampleLibrary
 * @brief Knihovna samplů s podporou dynamických vrstev a stereo.
 * 
 * Inicializuje samply, poskytuje read-only přístup a mapuje velocity na vrstvy.
 */
class SampleLibrary {
public:
    SampleLibrary();
    ~SampleLibrary() = default;

    /**
     * @brief Inicializuje knihovnu (nutné zavolat před použitím).
     * @param sampleRate Sample rate pro generování/načítání
     */
    void initialize(double sampleRate);

    /**
     * @brief Vyčistí všechny samply (uvolní paměť).
     */
    void clear();

    /**
     * @brief Vrátí data samply pro notu a vrstvu.
     * @param midiNote MIDI nota
     * @param dynamicLevel Dynamická vrstva (0-7)
     * @return Ukazatel na stereo data nebo nullptr
     */
    const float* getSampleData(uint8_t midiNote, uint8_t dynamicLevel) const;

    /**
     * @brief Vrátí délku samply pro notu a vrstvu.
     * @param midiNote MIDI nota
     * @param dynamicLevel Dynamická vrstva (0-7)
     * @return Délka v samplech nebo 0
     */
    uint32_t getSampleLength(uint8_t midiNote, uint8_t dynamicLevel) const;

    /**
     * @brief Zkontroluje dostupnost samply.
     * @param midiNote MIDI nota
     * @param dynamicLevel Dynamická vrstva (0-7)
     * @return True pokud dostupný
     */
    bool isNoteAvailable(uint8_t midiNote, uint8_t dynamicLevel) const;

    /**
     * @brief Mapuje velocity na dynamickou vrstvu.
     * @param velocity Velocity (0-127)
     * @return Vrstva (0-7)
     */
    uint8_t velocityToDynamicLevel(uint8_t velocity) const;

    /**
     * @struct LoadingStats
     * @brief Statistiky načítání samplů.
     */
    struct LoadingStats {
        int totalSamples;
        int loadedFromFiles;
        int generatedSines;
        size_t totalMemoryUsed;
        double loadingTimeSeconds;
    };

    /**
     * @brief Vrátí statistiky načítání.
     * @return Struktura se statistikami
     */
    LoadingStats getLoadingStats() const { return loadingStats_; }

    static constexpr uint8_t MIN_NOTE = 21;   // A0 - minimální MIDI nota
    static constexpr uint8_t MAX_NOTE = 108;  // C8 - maximální MIDI nota

private:
    mutable std::mutex accessMutex_;  // Chrání sampleSegments_
    std::array<SampleSegment, 128> sampleSegments_;  // Úložiště pro MIDI noty
    double sampleRate_{44100.0};  // Aktuální sample rate
    Logger& logger_;  // Reference na logger
    LoadingStats loadingStats_;  // Statistiky

    static constexpr std::array<float, 8> DYNAMIC_AMPLITUDES = {
        0.05f, 0.12f, 0.22f, 0.35f, 0.50f, 0.68f, 0.85f, 1.00f
    };
};


===== File: SampleLoader.cpp =====
Path: C:\Users\jindr\IthacaPlayer\SampleLoader.cpp
=====
#include "SampleLoader.h"
#include <cmath>
#include "Logger.h"

SampleLoader::SampleLoader(double sampleRate) : sampleRate_(sampleRate) {
    formatManager_.registerBasicFormats();  // Podpora WAV, AIFF atd.
    Logger::getInstance().log("SampleLoader/constructor", "info", "SampleLoader inicializován se sample rate " + juce::String(sampleRate));
}

juce::File SampleLoader::getDefaultInstrumentDirectory() {
    juce::File dir = juce::File::getSpecialLocation(juce::File::userApplicationDataDirectory)
        .getChildFile("IthacaPlayer/instrument");
    Logger::getInstance().log("SampleLoader/getDefaultInstrumentDirectory", "debug", "Vrácen default directory: " + dir.getFullPathName());
    return dir;
}

juce::String SampleLoader::generateFilename(uint8_t midiNote, uint8_t dynamicLevel) {
    juce::String filename = "m" + juce::String::formatted("%03d", midiNote) + "-vel" + juce::String(dynamicLevel) + ".lau";
    Logger::getInstance().log("SampleLoader/generateFilename", "debug", "Vygenerován název souboru: " + filename + " pro notu " + juce::String(midiNote) + ", vrstva " + juce::String(dynamicLevel));
    return filename;
}

bool SampleLoader::parseFilename(const juce::String& filename, uint8_t& midiNote, uint8_t& dynamicLevel) {
    if (!filename.endsWith(".lau")) {
        Logger::getInstance().log("SampleLoader/parseFilename", "warn", "Neplatná extension souboru: " + filename);
        return false;
    }
    auto parts = juce::StringArray::fromTokens(filename.upToLastOccurrenceOf(".lau", false, false), "-", "");
    if (parts.size() != 2 || !parts[0].startsWith("m") || !parts[1].startsWith("vel")) {
        Logger::getInstance().log("SampleLoader/parseFilename", "warn", "Neplatný formát názvu souboru: " + filename);
        return false;
    }
    midiNote = static_cast<uint8_t>(parts[0].substring(1).getIntValue());
    dynamicLevel = static_cast<uint8_t>(parts[1].substring(3).getIntValue());
    bool valid = (midiNote >= 21 && midiNote <= 108 && dynamicLevel < 8);
    if (valid) {
        Logger::getInstance().log("SampleLoader/parseFilename", "debug", "Rozparsován soubor: " + filename + " -> nota " + juce::String(midiNote) + ", vrstva " + juce::String(dynamicLevel));
    } else {
        Logger::getInstance().log("SampleLoader/parseFilename", "warn", "Žádný rozsah v souboru: " + filename);
    }
    return valid;
}

/**
 * @brief Analyzuje WAV soubor bez načítání dat.
 * @param file Soubor k analýze
 * @return Struktura s analýzou
 */
FileAnalysis SampleLoader::analyzeWavFile(const juce::File& file) {
    Logger::getInstance().log("SampleLoader/analyzeWavFile", "info", "Začátek analýzy souboru: " + file.getFullPathName());
    FileAnalysis analysis{};
    std::unique_ptr<juce::AudioFormatReader> reader(formatManager_.createReaderFor(file));
    if (!reader) {
        // Rozšířené debug logování pro chyby
        juce::String debugInfo = "Selhalo vytvoření readeru pro soubor: " + file.getFullPathName() + 
                                 ". Soubor existuje: " + (file.existsAsFile() ? "ano" : "ne") + 
                                 ", velikost: " + juce::String(file.getSize()) + " bajtů";
        Logger::getInstance().log("SampleLoader/analyzeWavFile", "error", debugInfo);
        analysis.isValid = false;
        return analysis;
    }
    analysis.originalLengthSamples = static_cast<uint32_t>(reader->lengthInSamples);
    analysis.originalSampleRate = reader->sampleRate;
    analysis.numChannels = reader->numChannels;
    analysis.needsResampling = (analysis.originalSampleRate != sampleRate_);
    analysis.targetLengthSamples = analysis.needsResampling ?
        static_cast<uint32_t>(analysis.originalLengthSamples * (sampleRate_ / analysis.originalSampleRate)) :
        analysis.originalLengthSamples;
    analysis.memoryRequired = analysis.targetLengthSamples * 2 * sizeof(float);  // Vždy stereo
    analysis.isValid = validateFileAnalysis(analysis);
    Logger::getInstance().log("SampleLoader/analyzeWavFile", "info", "Analýza dokončena pro soubor: " + file.getFullPathName() + 
                              ", sample rate: " + juce::String(analysis.originalSampleRate) + 
                              ", kanály: " + juce::String(analysis.numChannels) + 
                              ", potřebuje resampl: " + (analysis.needsResampling ? "ano" : "ne"));
    return analysis;
}

bool SampleLoader::validateFileAnalysis(const FileAnalysis& analysis) {
    bool valid = analysis.originalLengthSamples > 0 && analysis.originalSampleRate > 0 &&
                 analysis.targetLengthSamples > 0 && analysis.memoryRequired < 1024 * 1024 * 1024 &&
                 analysis.numChannels >= 1 && analysis.numChannels <= 2;
    if (!valid) {
        Logger::getInstance().log("SampleLoader/validateFileAnalysis", "warn", "Neplatná analýza: samples=" + juce::String(analysis.originalLengthSamples) + 
                                  ", rate=" + juce::String(analysis.originalSampleRate) + ", kanály=" + juce::String(analysis.numChannels));
    } else {
        Logger::getInstance().log("SampleLoader/validateFileAnalysis", "debug", "Validace úspěšná.");
    }
    return valid;
}

LoadedSample SampleLoader::loadWavFile(const juce::File& file, uint8_t midiNote, uint8_t dynamicLevel) {
    Logger::getInstance().log("SampleLoader/loadWavFile", "info", "Začátek načítání souboru: " + file.getFullPathName() + " pro notu " + juce::String(midiNote) + ", vrstva " + juce::String(dynamicLevel));
    LoadedSample result;
    FileAnalysis analysis = analyzeWavFile(file);
    if (!analysis.isValid) {
        Logger::getInstance().log("SampleLoader/loadWavFile", "error", "Neplatná analýza pro soubor: " + file.getFullPathName());
        throw std::runtime_error("Invalid WAV file: " + file.getFullPathName().toStdString());
    }
    result.audioData = std::make_unique<float[]>(analysis.targetLengthSamples * 2);  // Stereo interleaved
    result.lengthSamples = analysis.targetLengthSamples;
    result.midiNote = midiNote;
    result.dynamicLevel = dynamicLevel;
    result.isGenerated = false;
    result.sourcePath = file.getFullPathName();

    std::unique_ptr<juce::AudioFormatReader> reader(formatManager_.createReaderFor(file));
    juce::AudioSampleBuffer tempBuffer(analysis.numChannels, analysis.originalLengthSamples);
    reader->read(&tempBuffer, 0, analysis.originalLengthSamples, 0, true, true);

    const float* srcL = tempBuffer.getReadPointer(0);
    const float* srcR = (analysis.numChannels == 2) ? tempBuffer.getReadPointer(1) : srcL;  // Pokud mono, duplikuj L

    if (analysis.needsResampling) {
        Logger::getInstance().log("SampleLoader/loadWavFile", "info", "Provádím resamplování souboru: " + file.getFullPathName());
        uint32_t outLen = analysis.targetLengthSamples;
        auto resampledL = resampleIfNeeded(srcL, analysis.originalLengthSamples, analysis.originalSampleRate, outLen, 1);
        auto resampledR = resampleIfNeeded(srcR, analysis.originalLengthSamples, analysis.originalSampleRate, outLen, 1);
        for (uint32_t i = 0; i < outLen; ++i) {
            result.audioData[i * 2] = resampledL[i];
            result.audioData[i * 2 + 1] = resampledR[i];
        }
    } else {
        for (uint32_t i = 0; i < analysis.originalLengthSamples; ++i) {
            result.audioData[i * 2] = srcL[i];
            result.audioData[i * 2 + 1] = srcR[i];
        }
    }
    Logger::getInstance().log("SampleLoader/loadWavFile", "info", "Načítání souboru dokončeno: " + file.getFullPathName() + ", délka=" + juce::String(result.lengthSamples));
    return result;
}

std::unique_ptr<float[]> SampleLoader::resampleIfNeeded(const float* sourceData, uint32_t sourceLength,
                                                        double sourceSampleRate, uint32_t& outputLength, int numChannels) {
    Logger::getInstance().log("SampleLoader/resampleIfNeeded", "debug", "Začátek resamplování: source length=" + juce::String(sourceLength) + ", rate=" + juce::String(sourceSampleRate));
    
    double ratio = sampleRate_ / sourceSampleRate;
    
    auto resampled = std::make_unique<float[]>(outputLength * numChannels);
    
    for (uint32_t i = 0; i < outputLength; ++i) {
        double srcPos = i / ratio;
        int idx = static_cast<int>(srcPos);
        float frac = static_cast<float>(srcPos - idx);
        for (int ch = 0; ch < numChannels; ++ch) {
            if (idx + 1 < static_cast<int>(sourceLength)) {
                resampled[i * numChannels + ch] = sourceData[idx * numChannels + ch] * (1 - frac) + sourceData[(idx + 1) * numChannels + ch] * frac;
            } else {
                resampled[i * numChannels + ch] = sourceData[idx * numChannels + ch];
            }
        }
    }
    
    Logger::getInstance().log("SampleLoader/resampleIfNeeded", "debug", "Resamplování dokončeno, výstupní délka=" + juce::String(outputLength));
    return resampled;
}

/**
 * @brief Generuje sine vlnu pro placeholder.
 * @param midiNote MIDI nota
 * @param dynamicLevel Vrstva (0-7)
 * @return LoadedSample s daty
 */
LoadedSample SampleLoader::generateSineWave(uint8_t midiNote, uint8_t dynamicLevel) {
    Logger::getInstance().log("SampleLoader/generateSineWave", "info", "Generování sine vlny pro notu " + juce::String(midiNote) + ", vrstva " + juce::String(dynamicLevel));
    LoadedSample result;
    double freq = 440.0 * std::pow(2.0, (midiNote - 69) / 12.0);
    constexpr double fixedRate = 44100.0;  // Fixní sample rate pro generování
    uint32_t length = static_cast<uint32_t>(fixedRate * 12.0);  // 12s fallback
    result.audioData = std::make_unique<float[]>(length * 2);  // Stereo interleaved
    result.lengthSamples = length;
    result.midiNote = midiNote;
    result.dynamicLevel = dynamicLevel;
    result.isGenerated = true;
    result.sourcePath = "Generated sine";

    constexpr std::array<float, 8> amplitudes = {0.05f, 0.12f, 0.22f, 0.35f, 0.50f, 0.68f, 0.85f, 1.00f};
    float amp = amplitudes[dynamicLevel];
    double phaseInc = 2.0 * juce::MathConstants<double>::pi * freq / fixedRate;
    for (uint32_t i = 0; i < length; ++i) {
        float val = amp * static_cast<float>(std::sin(phaseInc * i));
        result.audioData[i * 2] = val;      // Left
        result.audioData[i * 2 + 1] = val;  // Right (stejný)
    }
    Logger::getInstance().log("SampleLoader/generateSineWave", "info", "Sine vlna vygenerována, délka=" + juce::String(length));
    return result;
}

bool SampleLoader::saveGeneratedSample(const juce::File& file, const float* data, uint32_t lengthSamples) {
    Logger::getInstance().log("SampleLoader/saveGeneratedSample", "info", "Začátek ukládání generovaného souboru: " + file.getFullPathName());
    if (file.existsAsFile()) {
        Logger::getInstance().log("SampleLoader/saveGeneratedSample", "debug", "Soubor již existuje, přeskakuji: " + file.getFullPathName());
        return true;
    }

    std::unique_ptr<juce::FileOutputStream> stream(file.createOutputStream());
    if (!stream || stream->failedToOpen()) {
        Logger::getInstance().log("SampleLoader/saveGeneratedSample", "error", "Selhalo otevření souboru pro zápis: " + file.getFullPathName());
        return false;
    }

    juce::WavAudioFormat wavFormat;
    std::unique_ptr<juce::AudioFormatWriter> writer(
        wavFormat.createWriterFor(stream.get(), 44100.0, 2, 16, {}, 0)  // Fixní 44100 Hz pro ukládání
    );
    if (!writer) {
        Logger::getInstance().log("SampleLoader/saveGeneratedSample", "error", "Selhalo vytvoření WAV writeru pro: " + file.getFullPathName());
        return false;
    }

    // Rozdělení interleaved data na left a right kanály pro non-interleaved zápis
    std::unique_ptr<float[]> left = std::make_unique<float[]>(lengthSamples);
    std::unique_ptr<float[]> right = std::make_unique<float[]>(lengthSamples);
    for (uint32_t i = 0; i < lengthSamples; ++i) {
        left[i] = data[i * 2];
        right[i] = data[i * 2 + 1];
    }

    // Použití writeFromFloatArrays pro stereo zápis
    const float* channels[2] = { left.get(), right.get() };
    if (!writer->writeFromFloatArrays(channels, 2, lengthSamples)) {
        Logger::getInstance().log("SampleLoader/saveGeneratedSample", "error", "Selhalo zápis dat do souboru: " + file.getFullPathName());
        return false;
    }

    writer.reset();
    stream.reset();

    Logger::getInstance().log("SampleLoader/saveGeneratedSample", "info", "Placeholder soubor vygenerován a uložen: " + file.getFullPathName());
    return true;
}

std::vector<LoadedSample> SampleLoader::loadInstrument(const juce::File& instrumentDirectory, ProgressCallback progressCallback) {
    Logger::getInstance().log("SampleLoader/loadInstrument", "info", "Začátek načítání instrumentu z directory: " + instrumentDirectory.getFullPathName());
    std::vector<LoadedSample> samples;
    auto files = instrumentDirectory.findChildFiles(juce::File::findFiles, false, "*.lau");
    int total = 8 * (108 - 21 + 1);
    int current = 0;

    for (uint8_t note = 21; note <= 108; ++note) {
        for (uint8_t level = 0; level < 8; ++level) {
            juce::String filename = generateFilename(note, level);
            juce::File file = instrumentDirectory.getChildFile(filename);
            LoadedSample sample;
            try {
                if (file.existsAsFile()) {
                    Logger::getInstance().log("SampleLoader/loadInstrument", "debug", "Soubor existuje, načítám: " + filename);
                    sample = loadWavFile(file, note, level);
                } else {
                    Logger::getInstance().log("SampleLoader/loadInstrument", "warn", "Soubor neexistuje, generuji placeholder: " + filename);
                    sample = generateSineWave(note, level);
                    if (saveGeneratedSample(file, sample.audioData.get(), sample.lengthSamples)) {
                        sample = loadWavFile(file, note, level);
                    } else {
                        Logger::getInstance().log("SampleLoader/loadInstrument", "warn", "Používám generovaná data přímo (ukládání selhalo): " + filename);
                    }
                }
                samples.push_back(std::move(sample));
            } catch (const std::exception& e) {
                Logger::getInstance().log("SampleLoader/loadInstrument", "error", "Chyba při načítání " + filename + ": " + juce::String(e.what()));
                if (progressCallback) progressCallback(current, total, "Error loading " + filename);
            }
            current++;
            if (progressCallback) progressCallback(current, total, "Loaded " + filename);
        }
    }
    Logger::getInstance().log("SampleLoader/loadInstrument", "info", "Načítání instrumentu dokončeno, celkem samplů: " + juce::String(samples.size()));
    return samples;
}


===== File: SampleLoader.h =====
Path: C:\Users\jindr\IthacaPlayer\SampleLoader.h
=====
#pragma once

#include <juce_audio_formats/juce_audio_formats.h>
#include <juce_core/juce_core.h>
#include <memory>
#include <functional>

struct LoadedSample {
    std::unique_ptr<float[]> audioData;  // Interleaved stereo data (lengthSamples * 2 floats)
    uint32_t lengthSamples;  // Délka v samplech (pro jeden kanál)
    uint8_t midiNote;
    uint8_t dynamicLevel;
    bool isGenerated;
    juce::String sourcePath;
};

struct FileAnalysis {
    uint32_t originalLengthSamples;
    uint32_t targetLengthSamples;
    double originalSampleRate;
    bool needsResampling;
    size_t memoryRequired;
    bool isValid;
    int numChannels;  // Počet kanálů v souboru
};

class SampleLoader {
public:
    using ProgressCallback = std::function<void(int current, int total, const juce::String& status)>;

    SampleLoader(double sampleRate);

    std::vector<LoadedSample> loadInstrument(
        const juce::File& instrumentDirectory,
        ProgressCallback progressCallback = nullptr
    );

    static juce::File getDefaultInstrumentDirectory();
    static juce::String generateFilename(uint8_t midiNote, uint8_t dynamicLevel);
    static bool parseFilename(const juce::String& filename, uint8_t& midiNote, uint8_t& dynamicLevel);

private:
    double sampleRate_;
    juce::AudioFormatManager formatManager_;

    FileAnalysis analyzeWavFile(const juce::File& file);
    bool validateFileAnalysis(const FileAnalysis& analysis);

    LoadedSample loadWavFile(const juce::File& file, uint8_t midiNote, uint8_t dynamicLevel);
    LoadedSample generateSineWave(uint8_t midiNote, uint8_t dynamicLevel);

    // Uloží generovaná data jako stereo WAV soubor (.lau extension)
    bool saveGeneratedSample(const juce::File& file, const float* data, uint32_t lengthSamples);

    std::unique_ptr<float[]> resampleIfNeeded(
        const float* sourceData,
        uint32_t sourceLength,
        double sourceSampleRate,
        uint32_t& outputLength,
        int numChannels  // Pro stereo resamplování
    );
};


===== File: SAMPLES.md =====
Path: C:\Users\jindr\IthacaPlayer\SAMPLES.md
=====
# Kompletní Specifikace: Hybridní Sample Loading Systém s Dynamic Layers

## Přehled systému

Refaktoring IthacaPlayer pro podporu external WAV samples s 8 úrovněmi dynamiky, fallback sine generace a variable sample length support.

## File System & Naming Convention

### Directory struktura
```
%APPDATA%\Roaming\IthacaPlayer\instrument\
├── m021-vel0.lau    // A0, dynamic level 0
├── m021-vel1.lau    // A0, dynamic level 1
├── m060-vel0.lau    // Middle C, dynamic level 0
├── m060-vel7.lau    // Middle C, dynamic level 7
└── m108-vel7.lau    // C8, dynamic level 7
```

### Naming pattern
- **Format:** `mXXX-velY.lau`
- **XXX:** MIDI note (021-108, zero-padded)
- **Y:** Dynamic level (0-7)
- **Extension:** `.lau` (custom identifier)

## Core Architecture Changes

### 1. Nový SampleLoader modul

**SampleLoader.h**
```cpp
#pragma once
#include <juce_audio_formats/juce_audio_formats.h>
#include <juce_core/juce_core.h>
#include <memory>
#include <functional>

struct LoadedSample {
    std::unique_ptr<float[]> audioData;
    uint32_t lengthSamples;
    uint8_t midiNote;
    uint8_t dynamicLevel;
    bool isGenerated;
    juce::String sourcePath;
};

struct FileAnalysis {
    uint32_t originalLengthSamples;
    uint32_t targetLengthSamples;
    double originalSampleRate;
    bool needsResampling;
    size_t memoryRequired;
    bool isValid;
};

class SampleLoader {
public:
    using ProgressCallback = std::function<void(int current, int total, const juce::String& status)>;
    
    SampleLoader(double sampleRate);
    
    // Main interface
    std::vector<LoadedSample> loadInstrument(
        const juce::File& instrumentDirectory,
        ProgressCallback progressCallback = nullptr
    );
    
    // Utility methods
    static juce::File getDefaultInstrumentDirectory();
    static juce::String generateFilename(uint8_t midiNote, uint8_t dynamicLevel);
    static bool parseFilename(const juce::String& filename, uint8_t& midiNote, uint8_t& dynamicLevel);
    
private:
    double sampleRate_;
    juce::AudioFormatManager formatManager_;
    
    // Analysis & validation
    FileAnalysis analyzeWavFile(const juce::File& file);
    bool validateFileAnalysis(const FileAnalysis& analysis);
    
    // Loading methods
    LoadedSample loadWavFile(const juce::File& file, uint8_t midiNote, uint8_t dynamicLevel);
    LoadedSample generateSineWave(uint8_t midiNote, uint8_t dynamicLevel);
    
    // Processing
    std::unique_ptr<float[]> resampleIfNeeded(
        const float* sourceData, 
        uint32_t sourceLength, 
        double sourceSampleRate,
        uint32_t& outputLength
    );
};
```

**SampleLoader.cpp klíčové metody**
```cpp
FileAnalysis SampleLoader::analyzeWavFile(const juce::File& file) {
    FileAnalysis analysis{};
    
    // 1. Analýza BEZ načítání dat
    std::unique_ptr<juce::AudioFormatReader> reader(formatManager_.createReaderFor(file));
    if (!reader) {
        analysis.isValid = false;
        return analysis;
    }
    
    // 2. Získání metadata
    analysis.originalLengthSamples = static_cast<uint32_t>(reader->lengthInSamples);
    analysis.originalSampleRate = reader->sampleRate;
    analysis.needsResampling = (analysis.originalSampleRate != sampleRate_);
    
    // 3. Výpočet target délky
    if (analysis.needsResampling) {
        analysis.targetLengthSamples = static_cast<uint32_t>(
            analysis.originalLengthSamples * (sampleRate_ / analysis.originalSampleRate)
        );
    } else {
        analysis.targetLengthSamples = analysis.originalLengthSamples;
    }
    
    // 4. Memory requirement
    analysis.memoryRequired = analysis.targetLengthSamples * sizeof(float);
    analysis.isValid = validateFileAnalysis(analysis);
    
    return analysis;
}

LoadedSample SampleLoader::loadWavFile(const juce::File& file, uint8_t midiNote, uint8_t dynamicLevel) {
    LoadedSample result;
    
    // 1. Analýza první
    FileAnalysis analysis = analyzeWavFile(file);
    if (!analysis.isValid) {
        throw std::runtime_error("Invalid WAV file: " + file.getFullPathName().toStdString());
    }
    
    // 2. Alokace přesné velikosti
    result.audioData = std::make_unique<float[]>(analysis.targetLengthSamples);
    result.lengthSamples = analysis.targetLengthSamples;
    result.midiNote = midiNote;
    result.dynamicLevel = dynamicLevel;
    result.isGenerated = false;
    result.sourcePath = file.getFullPathName();
    
    // 3. Načtení dat
    std::unique_ptr<juce::AudioFormatReader> reader(formatManager_.createReaderFor(file));
    
    if (analysis.needsResampling) {
        // Resample data
        // ... resampling logic
    } else {
        // Direct load
        reader->read(result.audioData.get(), 1, 0, analysis.originalLengthSamples);
    }
    
    return result;
}
```

### 2. Rozšířený SampleLibrary

**SampleLibrary.h změny**
```cpp
struct SampleSegment {
    std::array<std::unique_ptr<float[]>, 8> dynamicLayers;
    std::array<uint32_t, 8> layerLengthSamples;  // Variable length per layer
    uint8_t midiNote;
    std::array<bool, 8> layerAllocated{false};
    
    uint32_t getLayerLength(uint8_t dynamicLevel) const {
        return (dynamicLevel < 8) ? layerLengthSamples[dynamicLevel] : 0;
    }
    
    const float* getLayerData(uint8_t dynamicLevel) const {
        return (dynamicLevel < 8 && layerAllocated[dynamicLevel]) 
               ? dynamicLayers[dynamicLevel].get() : nullptr;
    }
};

class SampleLibrary {
public:
    // Rozšířené API
    const float* getSampleData(uint8_t midiNote, uint8_t dynamicLevel) const;
    uint32_t getSampleLength(uint8_t midiNote, uint8_t dynamicLevel) const;
    uint8_t velocityToDynamicLevel(uint8_t velocity) const;
    
    // Loading statistics
    struct LoadingStats {
        int totalSamples;
        int loadedFromFiles;
        int generatedSines;
        size_t totalMemoryUsed;
        double loadingTimeSeconds;
    };
    
    LoadingStats getLoadingStats() const { return loadingStats_; }
    
private:
    LoadingStats loadingStats_;
    void storeSample(const LoadedSample& sample);
    
    static constexpr std::array<float, 8> DYNAMIC_AMPLITUDES = {
        0.05f, 0.12f, 0.22f, 0.35f, 0.50f, 0.68f, 0.85f, 1.00f
    };
};
```

**SampleLibrary.cpp změny**
```cpp
void SampleLibrary::initialize(double sampleRate) {
    auto startTime = juce::Time::getMillisecondCounterHiRes();
    
    sampleRate_ = sampleRate;
    clear();
    
    // Use SampleLoader
    SampleLoader loader(sampleRate);
    juce::File instrumentDir = SampleLoader::getDefaultInstrumentDirectory();
    
    // Ensure directory exists
    if (!instrumentDir.exists()) {
        instrumentDir.createDirectory();
        logger_.log("SampleLibrary", "info", "Created instrument directory: " + instrumentDir.getFullPathName());
    }
    
    auto progressCallback = [this](int current, int total, const juce::String& status) {
        logger_.log("SampleLibrary", "info", 
                   "Progress: " + juce::String(current) + "/" + juce::String(total) + " - " + status);
    };
    
    std::vector<LoadedSample> loadedSamples = loader.loadInstrument(instrumentDir, progressCallback);
    
    // Store samples
    loadingStats_.totalSamples = static_cast<int>(loadedSamples.size());
    for (const auto& sample : loadedSamples) {
        storeSample(sample);
        if (sample.isGenerated) {
            loadingStats_.generatedSines++;
        } else {
            loadingStats_.loadedFromFiles++;
        }
        loadingStats_.totalMemoryUsed += sample.lengthSamples * sizeof(float);
    }
    
    loadingStats_.loadingTimeSeconds = (juce::Time::getMillisecondCounterHiRes() - startTime) / 1000.0;
    
    logger_.log("SampleLibrary", "info", 
               "Loading complete: " + juce::String(loadingStats_.loadedFromFiles) + " WAV files, " + 
               juce::String(loadingStats_.generatedSines) + " generated, " +
               juce::String(loadingStats_.totalMemoryUsed / (1024*1024)) + "MB, " +
               juce::String(loadingStats_.loadingTimeSeconds, 2) + "s");
}

uint8_t SampleLibrary::velocityToDynamicLevel(uint8_t velocity) const {
    // Map velocity 0-127 to dynamic level 0-7
    return std::min(7, velocity / 16);
}
```

### 3. Voice Management úpravy

**SynthVoice.h změny**
```cpp
class SynthVoice {
private:
    uint8_t currentDynamicLevel_{0};
    uint32_t currentSampleLength_{0};  // Variable per sample
    
public:
    void start(uint8_t midiNote, uint8_t velocity, const SampleLibrary& library);
    uint8_t getDynamicLevel() const { return currentDynamicLevel_; }
};
```

**SynthVoice.cpp změny**
```cpp
void SynthVoice::start(uint8_t midiNote, uint8_t velocity, const SampleLibrary& library) {
    reset();
    
    midiNote_ = midiNote;
    velocity_ = velocity;
    currentDynamicLevel_ = library.velocityToDynamicLevel(velocity);
    
    // Get specific dynamic layer
    sampleData_ = library.getSampleData(midiNote, currentDynamicLevel_);
    currentSampleLength_ = library.getSampleLength(midiNote, currentDynamicLevel_);
    
    if (!sampleData_ || currentSampleLength_ == 0) {
        logger_.log("SynthVoice", "error", 
                   "Invalid sample for note " + juce::String((int)midiNote) + 
                   " level " + juce::String((int)currentDynamicLevel_));
        isActive_ = false;
        return;
    }
    
    position_ = 0;
    isActive_ = true;
    
    logger_.log("SynthVoice", "debug", 
               "Started note " + juce::String((int)midiNote) + 
               " level " + juce::String((int)currentDynamicLevel_) +
               " length " + juce::String(currentSampleLength_) + " samples");
}

void SynthVoice::render(float* outputBuffer, int numSamples) {
    if (!isActive_ || sampleData_ == nullptr || currentSampleLength_ == 0)
        return;
    
    // No real-time gain - pre-computed in dynamic layers
    for (int i = 0; i < numSamples; ++i) {
        if (position_ >= currentSampleLength_) {
            stop();  // Natural end based on actual sample length
            break;
        }
        outputBuffer[i] += sampleData_[position_];
        ++position_;
    }
}
```

## Dynamic Level Mapping

### Velocity → Dynamic Level
```cpp
uint8_t velocityToDynamicLevel(uint8_t velocity) {
    return std::min(7, velocity / 16);
}
```

### Dynamic Amplitudes
```cpp
static constexpr std::array<float, 8> DYNAMIC_AMPLITUDES = {
    0.05f,  // vel0 - pppp (velocity 1-16)
    0.12f,  // vel1 - ppp  (velocity 17-32)
    0.22f,  // vel2 - pp   (velocity 33-48)
    0.35f,  // vel3 - p    (velocity 49-64)
    0.50f,  // vel4 - mp   (velocity 65-80)
    0.68f,  // vel5 - mf   (velocity 81-96)
    0.85f,  // vel6 - f    (velocity 97-112)
    1.00f   // vel7 - ff   (velocity 113-127)
};
```

## Implementation Strategy

### Phase 1: SampleLoader Infrastructure
1. Create SampleLoader.h/cpp
2. Implement file analysis without loading
3. Add WAV format support
4. Test with single sample

### Phase 2: Dynamic Layers Integration
1. Modify SampleSegment structure
2. Update SampleLibrary API
3. Implement velocity→dynamic level mapping
4. Test with sine generation fallback

### Phase 3: Voice System Updates
1. Update SynthVoice for dynamic levels
2. Remove real-time gain calculation
3. Add variable length support
4. Test complete audio chain

### Phase 4: Error Handling & Optimization
1. Comprehensive validation
2. Memory usage optimization
3. Loading progress reporting
4. Cross-platform path handling

## Memory & Performance Characteristics

### Memory Usage
- **Variable allocation:** Based on actual sample lengths
- **Typical usage:** 200-800MB (vs 1.6GB fixed)
- **Peak usage:** Up to 4GB for very long samples
- **Optimization:** Shared data for identical samples

### Performance Benefits
- **Faster rendering:** No real-time multiplication
- **Natural endings:** Samples end when audio ends
- **Flexible dynamics:** 8 distinct amplitude levels
- **Efficient fallback:** Sine generation only when needed

### File System Benefits
- **User-friendly:** Drop WAV files in known location
- **Incremental:** Add samples as needed
- **Backward compatible:** Works without any external files
- **Debuggable:** Clear file naming and loading logs

## Technical Requirements

### WAV File Specifications
- **Format:** Standard WAV (16-bit, 24-bit, 32-bit float)
- **Channels:** Mono preferred (stereo will be converted)
- **Sample Rate:** Any (will be resampled to project rate)
- **Length:** Variable (0.1s minimum, no maximum)

### Loading Process
1. **Analyze** file metadata (length, sample rate)
2. **Validate** file integrity and specifications
3. **Calculate** memory requirements
4. **Allocate** exact memory needed
5. **Load** and optionally resample audio data
6. **Fallback** to sine generation if file missing/invalid

### Error Handling
- **Invalid files:** Skip with warning, generate sine fallback
- **Memory errors:** Graceful degradation, detailed logging
- **Directory issues:** Auto-create missing directories
- **Loading failures:** Continue with available samples

Tento systém umožňuje postupný přechod od synthetic sine waves k real instrument samples se zachováním plné funkcionality a performance optimizations.


===== File: VoiceManager.cpp =====
Path: C:\Users\jindr\IthacaPlayer\VoiceManager.cpp
=====
#include "VoiceManager.h"
#include "Logger.h"

/**
 * @brief Konstruktor SynthVoice.
 * Inicializuje logger a resetuje stav.
 */
SynthVoice::SynthVoice()
    : logger_(Logger::getInstance())
{
    logger_.log("SynthVoice/constructor", "info", "SynthVoice inicializován");
    reset();
}

/**
 * @brief Spustí hlas s kontrolou dostupnosti vzorku.
 * @param midiNote MIDI nota
 * @param velocity Velocity
 * @param library SampleLibrary pro data
 */
void SynthVoice::start(uint8_t midiNote, uint8_t velocity, const SampleLibrary& library)
{
    logger_.log("SynthVoice/start", "info", "Spouštění hlasu pro notu " + juce::String(midiNote) + ", velocity " + juce::String(velocity));
    reset();

    midiNote_ = midiNote;
    velocity_ = velocity;
    currentDynamicLevel_ = library.velocityToDynamicLevel(velocity);

    sampleData_ = library.getSampleData(midiNote, currentDynamicLevel_);
    sampleLength_ = library.getSampleLength(midiNote, currentDynamicLevel_);

    if (!sampleData_ || sampleLength_ == 0) {
        logger_.log("SynthVoice/start", "error", "Neplatný vzorek pro notu " + juce::String((int)midiNote) + " vrstva " + juce::String((int)currentDynamicLevel_));
        isActive_ = false;
        return;
    }

    position_ = 0;
    isActive_ = true;

    logger_.log("SynthVoice/start", "debug", "Spuštěna nota " + juce::String((int)midiNote) + " vrstva " + juce::String((int)currentDynamicLevel_) + " délka=" + juce::String(sampleLength_));
}

void SynthVoice::stop()
{
    logger_.log("SynthVoice/stop", "debug", "Zastavení hlasu pro notu " + juce::String(midiNote_));
    isActive_ = false;  // Okamžité zastavení (může být rozšířeno o release fázi)
}

void SynthVoice::reset()
{
    logger_.log("SynthVoice/reset", "debug", "Reset hlasu");
    midiNote_ = 0;
    velocity_ = 0;
    isActive_ = false;
    sampleData_ = nullptr;
    sampleLength_ = 0;
    position_ = 0;
    queue_ = 0;  // Reset queue na dno
}

/**
 * @brief Renderuje audio s gainem podle velocity.
 * @param buffer Reference na audio buffer (stereo)
 * @param numSamples Počet samplů
 */
void SynthVoice::render(juce::AudioBuffer<float>& buffer, int numSamples)
{
    if (!isActive_ || sampleData_ == nullptr || sampleLength_ == 0) {
        logger_.log("SynthVoice/render", "debug", "Render přeskočen - hlas neaktivní");
        return;
    }

    if (buffer.getNumChannels() < 2) {
        logger_.log("SynthVoice/render", "warn", "Buffer nemá dost kanálů pro stereo");
        return;
    }

    logger_.log("SynthVoice/render", "debug", "Začátek renderování " + juce::String(numSamples) + " samplů pro notu " + juce::String(midiNote_));
    float* left = buffer.getWritePointer(0);
    float* right = buffer.getWritePointer(1);

    for (int i = 0; i < numSamples; ++i) {
        if (position_ >= sampleLength_) {
            logger_.log("SynthVoice/render", "debug", "Dohráno, zastavuji hlas");
            stop();
            break;
        }
        left[i] += sampleData_[position_ * 2];      // Left
        right[i] += sampleData_[position_ * 2 + 1]; // Right
        ++position_;
    }
    logger_.log("SynthVoice/render", "debug", "Renderování dokončeno");
}

// ======================== VoiceManager =========================

/**
 * @brief Konstruktor VoiceManager.
 * Vytvoří voices s výchozí queue=0.
 * @param library SampleLibrary
 * @param numVoices Počet hlasů
 */
VoiceManager::VoiceManager(const SampleLibrary& library, int numVoices)
    : logger_(Logger::getInstance()), sampleLibrary_(library)
{
    logger_.log("VoiceManager/constructor", "info", "VoiceManager vytvořen s " + juce::String(numVoices) + " hlasy");
    voices_.reserve(numVoices);
    for (int i = 0; i < numVoices; ++i) {
        voices_.emplace_back(std::make_unique<SynthVoice>());
        voices_.back()->setQueue(0);  // Výchozí queue na 0 (dno stacku)
    }
}

/**
 * @brief Zpracuje MIDI události (note-on/off) z queue.
 * @param midiState MidiStateManager
 * Oprava: Upraveno pro uint8_t z popNoteOn/popNoteOff, kontrola if (raw == 255)
 */
void VoiceManager::processMidiEvents(MidiStateManager& midiState)
{
    logger_.log("VoiceManager/processMidiEvents", "info", "Začátek zpracování MIDI událostí");
    // Zpracování NOTE ON
    for (int ch = 0; ch < 16; ++ch) {
        while (true) {
            uint8_t raw = midiState.popNoteOn(static_cast<uint8_t>(ch));  // Oprava: Explicit cast
            if (raw == 255) break;
            uint8_t note = raw;
            uint8_t vel = midiState.getVelocity(static_cast<uint8_t>(ch), note);  // Oprava: Explicit cast
            logger_.log("VoiceManager/processMidiEvents", "debug", "NoteOn kanál " + juce::String(ch) + ", nota " + juce::String(note));
            startVoice(note, vel);
        }
    }

    // Zpracování NOTE OFF
    for (int ch = 0; ch < 16; ++ch) {
        while (true) {
            uint8_t raw = midiState.popNoteOff(static_cast<uint8_t>(ch));  // Oprava: Explicit cast
            if (raw == 255) break;
            uint8_t note = raw;
            logger_.log("VoiceManager/processMidiEvents", "debug", "NoteOff kanál " + juce::String(ch) + ", nota " + juce::String(note));
            stopVoice(note);
        }
    }
    logger_.log("VoiceManager/processMidiEvents", "info", "Zpracování MIDI událostí dokončeno");
}

/**
 * @brief Generuje audio mixem hlasů.
 * @param buffer Audio buffer (stereo)
 * @param numSamples Počet samplů
 */
void VoiceManager::generateAudio(juce::AudioBuffer<float>& buffer, int numSamples)
{
    logger_.log("VoiceManager/generateAudio", "info", "Začátek generace audio, samplů: " + juce::String(numSamples));
    if (numSamples <= 0) {
        logger_.log("VoiceManager/generateAudio", "warn", "Neplatný počet samplů, přeskakuji");
        return;
    }

    buffer.clear();  // Vyčištění stereo bufferu

    for (auto& v : voices_) {
        if (v->isActive()) v->render(buffer, numSamples);
    }
    logger_.log("VoiceManager/generateAudio", "info", "Generace audio dokončena");
}

void VoiceManager::refresh()
{
    logger_.log("VoiceManager/refresh", "debug", "Refresh proveden (aktuálně prázdné)");
}

/**
 * @brief Spustí hlas s lepším voice stealingem (inspirováno HW syntetizérem).
 * Nejprve hledá existující, pak volnou s max queue, pak ukradne.
 * @param midiNote Nota
 * @param velocity Velocity
 */
void VoiceManager::startVoice(uint8_t midiNote, uint8_t velocity)
{
    logger_.log("VoiceManager/startVoice", "info", "Spouštění hlasu pro notu " + juce::String(midiNote) + ", velocity " + juce::String(velocity));
    // Nejprve hledej existující voice pro tuto notu
    for (auto& v : voices_) {
        if (v->isActive() && v->getNote() == midiNote) {
            logger_.log("VoiceManager/startVoice", "debug", "Nalezen existující hlas pro notu " + juce::String(midiNote));
            v->start(midiNote, velocity, sampleLibrary_);
            mixleQueue(v->getQueue());  // Přeuspořádej queue
            v->setQueue(static_cast<uint8_t>(voices_.size() - 1));  // Nastav na top
            return;
        }
    }

    // Hledej volnou voice s nejvyšším queue (nejstarší na top)
    SynthVoice* candidate = nullptr;
    uint8_t maxQueue = 0;
    for (auto& v : voices_) {
        if (!v->isActive() && v->getQueue() >= maxQueue) {
            candidate = v.get();
            maxQueue = v->getQueue();
        }
    }

    // Pokud není volná, ukradni s nejvyšším queue
    if (!candidate) {
        for (auto& v : voices_) {
            if (v->getQueue() >= maxQueue) {
                candidate = v.get();
                maxQueue = v->getQueue();
            }
        }
        logger_.log("VoiceManager/startVoice", "warn", "Voice stealing: ukraden voice pro notu " + juce::String((int)midiNote));
    }

    if (candidate) {
        mixleQueue(candidate->getQueue());  // Přeuspořádej
        candidate->start(midiNote, velocity, sampleLibrary_);
        candidate->setQueue(static_cast<uint8_t>(voices_.size() - 1));  // Nastav na top
        logger_.log("VoiceManager/startVoice", "info", "Hlas spuštěn");
    } else {
        logger_.log("VoiceManager/startVoice", "error", "Žádný dostupný hlas pro notu " + juce::String(midiNote));
    }
}

/**
 * @brief Zastaví hlas a přeuspořádá queue.
 * @param midiNote Nota
 */
void VoiceManager::stopVoice(uint8_t midiNote)
{
    logger_.log("VoiceManager/stopVoice", "info", "Zastavování hlasu pro notu " + juce::String(midiNote));
    for (auto& v : voices_) {
        if (v->isActive() && v->getNote() == midiNote) {
            v->stop();
            mixleQueue(v->getQueue());  // Přeuspořádej po uvolnění
            v->setQueue(0);  // Reset na dno
            logger_.log("VoiceManager/stopVoice", "info", "Hlas zastaven");
            return;
        }
    }
    logger_.log("VoiceManager/stopVoice", "warn", "Žádný aktivní hlas pro notu " + juce::String(midiNote));
}

/**
 * @brief Přeuspořádá queue: Posune vybranou na dno, ostatní posune nahoru/dolů.
 * @param queueNumber Číslo queue k mixlování
 */
void VoiceManager::mixleQueue(uint8_t queueNumber) {
    logger_.log("VoiceManager/mixleQueue", "debug", "Přeuspořádání queue pro číslo " + juce::String(queueNumber));
    for (auto& v : voices_) {
        if (v->getQueue() == queueNumber) {
            v->setQueue(0);  // Posun na dno
        } else if (v->getQueue() > queueNumber) {
            v->setQueue(v->getQueue() - 1);  // Posun dolů
        } else {
            v->setQueue(v->getQueue() + 1);  // Posun nahoru
        }
    }
    logger_.log("VoiceManager/mixleQueue", "debug", "Queue přeuspořádána");
}

int VoiceManager::getActiveVoiceCount() const
{
    int count = 0;
    for (const auto& voice : voices_) {
        if (voice->isActive()) ++count;
    }
    logger_.log("VoiceManager/getActiveVoiceCount", "debug", "Aktivních hlasů: " + juce::String(count));
    return count;
}


===== File: VoiceManager.h =====
Path: C:\Users\jindr\IthacaPlayer\VoiceManager.h
=====
#pragma once

#include <cstdint>
#include <memory>
#include <vector>
#include "SampleLibrary.h"
#include "MidiStateManager.h"
#include "Logger.h"
#include <juce_audio_basics/juce_audio_basics.h>  // Pro AudioBuffer

/**
 * @class SynthVoice
 * @brief Jednoduchý renderer pro jeden hlas (voice), drží data vzorku a pozici.
 * 
 * Renderuje audio z readonly dat SampleLibrary. Podporuje start/stop/reset a rendering do stereo bufferu.
 * Nově přidána queue pro voice stealing (priorita: vyšší = novější).
 */
class SynthVoice
{
public:
    /**
     * @brief Konstruktor SynthVoice.
     * Inicializuje logger a resetuje stav.
     */
    SynthVoice();

    /**
     * @brief Spustí hlas s kontrolou dostupnosti vzorku.
     * @param midiNote MIDI nota
     * @param velocity Velocity
     * @param library SampleLibrary pro data
     */
    void start(uint8_t midiNote, uint8_t velocity, const SampleLibrary& library);

    /**
     * @brief Zastaví hlas (deaktivuje ho).
     */
    void stop();

    /**
     * @brief Resetuje hlas do výchozího stavu.
     */
    void reset();

    /**
     * @brief Renderuje audio do stereo bufferu (přičítá k existujícím datům).
     * @param buffer Reference na audio buffer
     * @param numSamples Počet samplů k renderování
     */
    void render(juce::AudioBuffer<float>& buffer, int numSamples);

    bool isActive() const { return isActive_; }  // Vrátí, zda je hlas aktivní
    uint8_t getNote() const { return midiNote_; }  // Vrátí aktuální notu
    uint8_t getQueue() const { return queue_; }  // Vrátí prioritu queue
    void setQueue(uint8_t queue) { queue_ = queue; }  // Nastaví prioritu queue

private:
    Logger& logger_;  // Reference na logger

    uint8_t midiNote_{0};  // Aktuální MIDI nota
    uint8_t velocity_{0};  // Velocity
    bool isActive_{false};  // Stav aktivity

    const float* sampleData_{nullptr};  // Ukazatel na data vzorku (interleaved stereo)
    uint32_t sampleLength_{0};  // Délka vzorku (pro jeden kanál)
    uint32_t position_{0};  // Aktuální pozice v vzorku

    uint8_t queue_{0};  // Prioritní queue pro stealing (0 = dno, vyšší = top)
    uint8_t currentDynamicLevel_{0};  // Aktuální dynamická vrstva
};

/**
 * @class VoiceManager
 * @brief Spravuje kolekci hlasů (voices), zpracovává MIDI události a generuje audio.
 * 
 * Vyžaduje SampleLibrary. Podporuje voice stealing inspirovaný HW syntetizérem (s queue prioritou).
 * Procesuje MIDI z MidiStateManager a mixuje audio z hlasů do stereo bufferu.
 */
class VoiceManager
{
public:
    /**
     * @brief Konstruktor s referencí na SampleLibrary.
     * @param library Reference na SampleLibrary
     * @param numVoices Počet hlasů (výchozí 16)
     */
    VoiceManager(const SampleLibrary& library, int numVoices = 16);

    ~VoiceManager() = default;

    /**
     * @brief Zpracuje MIDI události z MidiStateManager (note-on/off).
     * @param midiState Reference na MidiStateManager
     */
    void processMidiEvents(MidiStateManager& midiState);

    /**
     * @brief Generuje audio mixem všech aktivních hlasů.
     * @param buffer Reference na audio buffer (stereo)
     * @param numSamples Počet samplů
     */
    void generateAudio(juce::AudioBuffer<float>& buffer, int numSamples);

    /**
     * @brief Housekeeping: Může být rozšířeno (aktuálně prázdné).
     */
    void refresh();

    /**
     * @brief Vrátí počet aktivních hlasů (pro debug a monitoring).
     * @return Počet aktivních hlasů
     */
    int getActiveVoiceCount() const;

private:
    Logger& logger_;  // Reference na logger
    const SampleLibrary& sampleLibrary_;  // Povinná reference na vzorky
    std::vector<std::unique_ptr<SynthVoice>> voices_;  // Kolekce hlasů

    /**
     * @brief Spustí hlas pro danou notu (s voice stealingem).
     * @param midiNote MIDI nota
     * @param velocity Velocity
     */
    void startVoice(uint8_t midiNote, uint8_t velocity);

    /**
     * @brief Zastaví hlas pro danou notu.
     * @param midiNote MIDI nota
     */
    void stopVoice(uint8_t midiNote);

    /**
     * @brief Přeuspořádá queue priorit (posune vybranou na dno, ostatní posune).
     * @param queueNumber Číslo queue k mixlování
     */
    void mixleQueue(uint8_t queueNumber);
};


