===== File: CMakeLists.txt =====
Path: C:\Users\nemej992\Documents\Repos\IthacaPlayer\CMakeLists.txt
=====
cmake_minimum_required(VERSION 3.22)

project(ITHACA_PLAYER VERSION 0.0.1)

add_subdirectory(JUCE)

juce_add_plugin(IthacaPlayer
    COMPANY_NAME "Lord Audio"
    IS_SYNTH TRUE
    NEEDS_MIDI_INPUT TRUE
    NEEDS_MIDI_OUTPUT FALSE
    IS_MIDI_EFFECT FALSE
    PLUGIN_MANUFACTURER_CODE Lau0
    PLUGIN_CODE Itca
    FORMATS AU VST3 Standalone
    PRODUCT_NAME "IthacaPlayer")

juce_generate_juce_header(IthacaPlayer)

target_sources(IthacaPlayer
    PRIVATE
        # Core system
        Logger.h
        Logger.cpp
        
        # Enhanced sample management with dynamic levels
        SampleLoader.h
        SampleLoader.cpp
        SampleLibrary.h
        SampleLibrary.cpp
        
        # MIDI and voice management
        MidiStateManager.h
        MidiStateManager.cpp
        VoiceManager.h
        VoiceManager.cpp
        
        # JUCE plugin interface
        PluginEditor.h
        PluginEditor.cpp
        PluginProcessor.h
        PluginProcessor.cpp)

target_compile_definitions(IthacaPlayer
    PUBLIC
        JUCE_WEB_BROWSER=0
        JUCE_USE_CURL=0
        JUCE_VST3_CAN_REPLACE_VST2=0)

target_link_libraries(IthacaPlayer
    PRIVATE
        juce::juce_audio_utils
        juce::juce_audio_formats  # Přidáno pro WAV loading
    PUBLIC
        juce::juce_recommended_config_flags
        juce::juce_recommended_lto_flags
        juce::juce_recommended_warning_flags)


===== File: JUCE-BUILD.md =====
Path: C:\Users\nemej992\Documents\Repos\IthacaPlayer\JUCE-BUILD.md
=====
# https://cmake.org/download/
# https://trirpi.github.io/posts/developing-audio-plugins-with-juce-and-visual-studio-code/


# pridani JUCE
- git submodule add https://github.com/juce-framework/JUCE.git JUCE

cd JUCE
cmake -B build
cmake -B build -DJUCE_BUILD_EXTRAS=ON
cmake --build build --target AudioPluginHost

# Visual Studio Code

Build the Project 
- Terminal > Run Build Task (or press Ctrl+Shift+B)

Run Without Debugging 
- 


===== File: Logger.cpp =====
Path: C:\Users\nemej992\Documents\Repos\IthacaPlayer\Logger.cpp
=====
#include "Logger.h"
#include "PluginEditor.h"
#include <sstream>

std::atomic<bool> Logger::loggingEnabled{true};

/**
 * @brief Konstruktor Logger.
 * Inicializuje singleton a přidává file logger.
 * Oprava: Použit unique_ptr místo deprecated ScopedPointer.
 */
Logger::Logger() {
    // Oprava: Inicializace file loggeru (umístění v default app log složce)
    fileLogger_ = std::unique_ptr<juce::FileLogger>(
        juce::FileLogger::createDefaultAppLogger("IthacaPlayer", "IthacaPlayer.log", "Start IthacaPlayer logu", 0)
    );
    DBG("Logger initialized.");  // Přidaný debug pro konzoli
}

/**
 * @brief Vrátí singleton instanci Logger.
 * @return Reference na instanci
 */
Logger& Logger::getInstance()
{
    static Logger instance;
    return instance;
}

/**
 * @brief Loguje zprávu s časovým razítkem, komponentou a závažností.
 * @param component Komponenta (např. třída/metoda)
 * @param severity Závažnost (info, debug, error, warn)
 * @param message Zpráva
 * Oprava: Přidán zápis do fileLogger, pokud existuje.
 */
void Logger::log(const juce::String& component, const juce::String& severity, const juce::String& message)
{
    if (!loggingEnabled.load(std::memory_order_relaxed))
        return;

    try {
        auto now = juce::Time::getCurrentTime();
        juce::String timestamp = now.formatted("%Y-%m-%d %H:%M:%S");
        juce::String logEntry = "[" + timestamp + "] [" + component + "] [" + severity + "]: " + message;

        pushToLogQueue(logEntry);
        scheduleGUIUpdate();

        // Oprava: Zápis do souboru, pokud fileLogger existuje
        if (fileLogger_ != nullptr) {
            fileLogger_->logMessage(logEntry);
        }
    } catch (...) {
        // Bezpečný fallback při chybě
        DBG("Logger error in log method.");  // Přidaný debug pro chyby
    }
}

void Logger::pushToLogQueue(const juce::String& logEntry)
{
    std::lock_guard<std::mutex> lock(logMutex_);

    uint8_t writeIndex = logQueue_.writeIndex.load();
    uint8_t currentCount = logQueue_.count.load();

    logQueue_.logs[writeIndex] = logEntry;
    logQueue_.writeIndex.store(static_cast<uint8_t>(writeIndex + 1));

    if (currentCount < 256) {
        logQueue_.count.store(currentCount + 1);
    } else {
        logQueue_.readIndex = static_cast<uint8_t>(logQueue_.readIndex + 1);
    }

    if (logQueue_.count.load() > MAX_LOG_ENTRIES) {
        uint8_t excess = logQueue_.count.load() - MAX_LOG_ENTRIES;
        logQueue_.readIndex = static_cast<uint8_t>(logQueue_.readIndex + excess);
        logQueue_.count.store(MAX_LOG_ENTRIES);
    }
}

void Logger::setEditor(AudioPluginAudioProcessorEditor* ed)
{
    std::lock_guard<std::mutex> lock(editorMutex_);
    editorPtr_ = ed;
    DBG("Editor set in Logger.");  // Přidaný debug pro nastavení editoru
}

void Logger::scheduleGUIUpdate()
{
    juce::MessageManager::callAsync([this]() {
        std::lock_guard<std::mutex> lock(editorMutex_);
        if (editorPtr_ != nullptr) {
            editorPtr_->updateLogDisplay();
        }
    });
}

juce::StringArray Logger::getLogBuffer() const
{
    return getCurrentLogs();
}

juce::StringArray Logger::getCurrentLogs() const
{
    std::lock_guard<std::mutex> lock(logMutex_);

    juce::StringArray result;
    uint8_t currentCount = logQueue_.count.load();
    uint8_t readIndex = logQueue_.readIndex;

    for (uint8_t i = 0; i < currentCount; ++i) {
        uint8_t index = static_cast<uint8_t>(readIndex + i);
        result.add(logQueue_.logs[index]);
    }
    return result;
}

void Logger::clearLogs()
{
    std::lock_guard<std::mutex> lock(logMutex_);
    logQueue_.writeIndex.store(0);
    logQueue_.count.store(0);
    logQueue_.readIndex = 0;
    for (auto& log : logQueue_.logs) {
        log = juce::String();
    }
    DBG("Logs cleared.");  // Přidaný debug pro čištění logů
}

size_t Logger::getLogCount() const
{
    return logQueue_.count.load(std::memory_order_relaxed);
}


===== File: Logger.h =====
Path: C:\Users\nemej992\Documents\Repos\IthacaPlayer\Logger.h
=====
#pragma once

#include <juce_core/juce_core.h>
#include <juce_gui_basics/juce_gui_basics.h>
#include <juce_events/juce_events.h>
#include <atomic>
#include <mutex>
#include <array>
#include <memory>

#define MAX_LOG_ENTRIES 100

class AudioPluginAudioProcessorEditor;

class Logger
{
public:
    static Logger& getInstance();

    void log(const juce::String& component, const juce::String& severity, const juce::String& message);
    static std::atomic<bool> loggingEnabled;

    void setEditor(AudioPluginAudioProcessorEditor* ed);

    juce::StringArray getLogBuffer() const;
    void clearLogs();
    size_t getLogCount() const;

private:
    Logger();
    ~Logger() = default;

    Logger(const Logger&) = delete;
    Logger& operator=(const Logger&) = delete;

    struct LogQueue {
        std::array<juce::String, 256> logs;
        std::atomic<uint8_t> writeIndex{0};
        std::atomic<uint8_t> count{0};
        uint8_t readIndex{0};
    };

    LogQueue logQueue_;

    mutable std::mutex logMutex_;
    mutable std::mutex editorMutex_;

    // Oprava: Použit unique_ptr místo deprecated ScopedPointer
    AudioPluginAudioProcessorEditor* editorPtr_{nullptr};

    void pushToLogQueue(const juce::String& logEntry);
    juce::StringArray getCurrentLogs() const;
    void scheduleGUIUpdate();

    // Oprava: Použit unique_ptr místo deprecated ScopedPointer
    std::unique_ptr<juce::FileLogger> fileLogger_;
};


===== File: MidiStateManager.cpp =====
Path: C:\Users\nemej992\Documents\Repos\IthacaPlayer\MidiStateManager.cpp
=====
#include "MidiStateManager.h"
#include <algorithm>
#include <cassert>

#ifdef _WIN32
#pragma warning(push)
#pragma warning(disable: 4244)  // Varování konverze pro MIDI hodnoty
#endif

/**
 * @brief Konstruktor MidiStateManager.
 * Inicializuje logger, resetuje queue a nastaví výchozí hodnoty controllerů podle MIDI standardu.
 */
MidiStateManager::MidiStateManager()
    : logger_(Logger::getInstance())
{
    logger_.log("MidiStateManager/constructor", "info", "=== INICIALIZACE MIDI STATE MANAGER ===");
    
    // Inicializace aktivních not
    for (auto& note : activeNotes_) {
        note.store(false);  // Všechny noty neaktivní
    }
    
    // Inicializace MIDI controller hodnot
    for (int channel = 0; channel < MIDI_CHANNELS; ++channel) {
        for (int controller = 0; controller < 128; ++controller) {
            controllerValues_[channel][controller] = 0;  // Výchozí 0
        }
        
        // Výchozí hodnoty pro standardní controllery
        controllerValues_[channel][7] = 100;   // Volume (výchozí vysoká)
        controllerValues_[channel][10] = 64;   // Pan (střed)
        controllerValues_[channel][11] = 127;  // Expression (max)
        controllerValues_[channel][64] = 0;    // Sustain pedal (vypnutý)
        controllerValues_[channel][91] = 0;    // Reverb (vypnutý)
        controllerValues_[channel][93] = 0;    // Chorus (vypnutý)
    }
    
    // Reset všech queue
    for (auto& queue : noteOnQueues_) {
        queue.reset();
    }
    for (auto& queue : noteOffQueues_) {
        queue.reset();
    }
    
    logger_.log("MidiStateManager/constructor", "info", "Inicializace dokončena.");
    DBG("MidiStateManager initialized.");  // Přidaný debug pro konzoli
}

/**
 * @brief Resetuje NoteQueue na výchozí stav.
 * Nastaví indexy a počet na 0, nemusí čistit array (přepsáno při použití).
 */
void MidiStateManager::NoteQueue::reset() {
    writeIndex.store(0);
    count.store(0);
    readIndex = 0;
}

/**
 * @brief Přidá note-on do queue a aktualizuje stav aktivní noty a velocity.
 * @param channel MIDI kanál (0-15)
 * @param note MIDI nota (0-127)
 * @param velocity Velocity (0-127)
 */
void MidiStateManager::pushNoteOn(uint8_t channel, uint8_t note, uint8_t velocity) {
    if (channel >= MIDI_CHANNELS || note >= MIDI_NOTES) return;  // Bezpečnostní kontrola
    
    pushToQueue(noteOnQueues_[channel], note);
    activeNotes_[note].store(true);
    velocities_[channel][note] = velocity;
    
    logger_.log("MidiStateManager/pushNoteOn", "debug", "NoteOn kanál " + juce::String(channel) + ", nota " + juce::String(note));
}

/**
 * @brief Přidá note-off do queue a deaktivuje notu.
 * @param channel MIDI kanál (0-15)
 * @param note MIDI nota (0-127)
 */
void MidiStateManager::pushNoteOff(uint8_t channel, uint8_t note) {
    if (channel >= MIDI_CHANNELS || note >= MIDI_NOTES) return;
    
    pushToQueue(noteOffQueues_[channel], note);
    activeNotes_[note].store(false);
    
    logger_.log("MidiStateManager/pushNoteOff", "debug", "NoteOff kanál " + juce::String(channel) + ", nota " + juce::String(note));
}

/**
 * @brief Vytáhne note-on z queue pro daný kanál.
 * @param channel MIDI kanál
 * @return Nota (0-127) nebo 255 pokud prázdná queue (🔧 Změna: Pro odstranění warningu C4244)
 */
uint8_t MidiStateManager::popNoteOn(uint8_t channel) {  // 🔧 Změna: Změněno na uint8_t
    if (channel >= MIDI_CHANNELS) return 255;
    return popFromQueue(noteOnQueues_[channel]);
}

/**
 * @brief Vytáhne note-off z queue pro daný kanál.
 * @param channel MIDI kanál
 * @return Nota (0-127) nebo 255 pokud prázdná queue (🔧 Změna: Pro odstranění warningu C4244)
 */
uint8_t MidiStateManager::popNoteOff(uint8_t channel) {  // 🔧 Změna: Změněno na uint8_t
    if (channel >= MIDI_CHANNELS) return 255;
    return popFromQueue(noteOffQueues_[channel]);
}

/**
 * @brief Zkontroluje, zda je nota aktivní.
 * @param channel MIDI kanál
 * @param note MIDI nota
 * @return True pokud aktivní
 */
bool MidiStateManager::isNoteActive(uint8_t channel, uint8_t note) const {
    if (channel >= MIDI_CHANNELS || note >= MIDI_NOTES) return false;
    return activeNotes_[note].load();
}

/**
 * @brief Vrátí velocity aktivní noty.
 * @param channel MIDI kanál
 * @param note MIDI nota
 * @return Velocity (0-127)
 */
uint8_t MidiStateManager::getVelocity(uint8_t channel, uint8_t note) const {
    if (channel >= MIDI_CHANNELS || note >= MIDI_NOTES) return 0;
    return velocities_[channel][note];
}

/**
 * @brief Nastaví hodnotu MIDI controlleru.
 * @param channel MIDI kanál
 * @param controller Číslo controlleru (0-127)
 * @param value Hodnota (0-127)
 */
void MidiStateManager::setControllerValue(uint8_t channel, uint8_t controller, uint8_t value) {
    if (channel >= MIDI_CHANNELS || controller > 127) return;
    controllerValues_[channel][controller] = value;
}

/**
 * @brief Vrátí hodnotu MIDI controlleru.
 * @param channel MIDI kanál
 * @param controller Číslo controlleru
 * @return Hodnota (0-127)
 */
uint8_t MidiStateManager::getControllerValue(uint8_t channel, uint8_t controller) const {
    if (channel >= MIDI_CHANNELS || controller > 127) return 0;
    return controllerValues_[channel][controller];
}

/**
 * @brief Přidá prvek do circular queue s automatickým přetečením.
 * @param queue Reference na queue
 * @param note Hodnota k přidání
 * Zjednodušeno: Používá modulo pro index, atomic operace pro count.
 */
void MidiStateManager::pushToQueue(NoteQueue& queue, uint8_t note) {
    std::lock_guard<std::mutex> lock(queue.mutex);

    if (queue.count.load() >= 256) {
        logger_.log("MidiStateManager/pushToQueue", "warn", "Queue plná - zpráva ztracena");
        return;  // Zachováno varování při plné queue
    }

    uint8_t index = queue.writeIndex.load();
    queue.notes[index] = note;
    queue.writeIndex.store((index + 1) % 256);  // Automatické přetečení modulo 256
    queue.count.fetch_add(1);  // Atomic inkrement počtu
}

/**
 * @brief Vytáhne prvek z circular queue.
 * @param queue Reference na queue
 * @return Hodnota nebo 255 při prázdné queue (🔧 Změna: Pro konzistenci s uint8_t)
 */
uint8_t MidiStateManager::popFromQueue(NoteQueue& queue) {
    std::lock_guard<std::mutex> lock(queue.mutex);

    if (queue.count.load() == 0) {
        return 255;  // 🔧 Změna: 255 místo 0xff pro uint8_t (prázdná queue)
    }

    uint8_t note = queue.notes[queue.readIndex];
    queue.readIndex = (queue.readIndex + 1) % 256;  // Modulo pro přetečení
    queue.count.fetch_sub(1);  // Atomic dekrement počtu
    return note;
}

#ifdef _WIN32
#pragma warning(pop)
#endif


===== File: MidiStateManager.h =====
Path: C:\Users\nemej992\Documents\Repos\IthacaPlayer\MidiStateManager.h
=====
#pragma once

#include <juce_core/juce_core.h>
#include <juce_audio_basics/juce_audio_basics.h>
#include <array>
#include <atomic>
#include <mutex>
#include "Logger.h"

// Konstanty pro MIDI rozsahy
constexpr uint8_t MIDI_NOTES = 128;  // Standardní počet MIDI not (0-127)
constexpr uint8_t MIDI_CHANNELS = 16;  // Standardní počet MIDI kanálů

/**
 * @class MidiStateManager
 * @brief Spravuje stav MIDI zpráv, včetně aktivních not, velocity, controllerů a queue pro note-on/off.
 * 
 * Tato třída je thread-safe díky mutexům a atomic proměnným. Poskytuje metody pro push/pop MIDI událostí,
 * sledování aktivních not a controller hodnot. Inicializuje výchozí hodnoty controllerů podle MIDI standardu.
 */
class MidiStateManager
{
public:
    MidiStateManager();

    // Metody pro note-on/off
    void pushNoteOn(uint8_t channel, uint8_t note, uint8_t velocity);  // Přidá note-on do queue a aktualizuje stav
    void pushNoteOff(uint8_t channel, uint8_t note);  // Přidá note-off do queue a aktualizuje stav
    uint8_t popNoteOn(uint8_t channel);  // 🔧 Změna: Změněno na uint8_t, vrací 255 pokud prázdná (pro odstranění warningu C4244)
    uint8_t popNoteOff(uint8_t channel);  // 🔧 Změna: Změněno na uint8_t, vrací 255 pokud prázdná

    // Metody pro aktivní noty
    bool isNoteActive(uint8_t channel, uint8_t note) const;  // Zkontroluje, zda je nota aktivní
    uint8_t getVelocity(uint8_t channel, uint8_t note) const;  // Vrátí velocity aktivní noty

    // Metody pro MIDI controllery
    void setControllerValue(uint8_t channel, uint8_t controller, uint8_t value);  // Nastaví hodnotu controlleru
    uint8_t getControllerValue(uint8_t channel, uint8_t controller) const;  // Vrátí hodnotu controlleru

private:
    Logger& logger_;  // Reference na logger pro logování událostí

    // Struktura pro circular buffer queue (zachována pro efektivitu a thread-safety)
    struct NoteQueue {
        std::array<uint8_t, 256> notes;  // Circular buffer o velikosti 256 (magické číslo zachováno)
        std::atomic<uint8_t> writeIndex{0};  // Atomic index pro zápis (thread-safe)
        std::atomic<uint8_t> count{0};  // Počet prvků v queue (atomic pro bezpečný přístup)
        uint8_t readIndex{0};  // Index pro čtení (chráněn mutexem)
        mutable std::mutex mutex;  // Mutex pro synchronizaci přístupu

        void reset();  // Resetuje queue na výchozí stav
    };

    // Queue pro note-on a note-off pro každý kanál
    std::array<NoteQueue, MIDI_CHANNELS> noteOnQueues_;
    std::array<NoteQueue, MIDI_CHANNELS> noteOffQueues_;

    // Pole pro aktivní noty a velocity
    std::array<std::atomic<bool>, MIDI_NOTES> activeNotes_;  // Atomic pro thread-safety
    std::array<std::array<uint8_t, MIDI_NOTES>, MIDI_CHANNELS> velocities_;  // Velocity pro každý kanál a notu
    std::array<std::array<uint8_t, 128>, MIDI_CHANNELS> controllerValues_;  // Controller hodnoty

    // Interní helper metody
    void pushToQueue(NoteQueue& queue, uint8_t note);  // Přidá do queue s automatickým přetečením
    uint8_t popFromQueue(NoteQueue& queue);  // Vytáhne z queue, vrací 255 při prázdné
};


===== File: PluginEditor.h =====
Path: C:\Users\nemej992\Documents\Repos\IthacaPlayer\PluginEditor.h
=====
#pragma once

#include "PluginProcessor.h"
#include <juce_gui_basics/juce_gui_basics.h>

//==============================================================================
class AudioPluginAudioProcessorEditor final : public juce::AudioProcessorEditor
{
public:
    explicit AudioPluginAudioProcessorEditor (AudioPluginAudioProcessor&);
    ~AudioPluginAudioProcessorEditor() override;

    //==============================================================================
    void paint (juce::Graphics&) override;
    void resized() override;

    // Metoda pro aktualizaci log display
    void updateLogDisplay();

private:
    // Reference na procesor
    AudioPluginAudioProcessor& processorRef;

    // Komponenty pro logování a ovládání
    std::unique_ptr<juce::TextEditor> logDisplay;
    std::unique_ptr<juce::ToggleButton> toggleLogging;
    std::unique_ptr<juce::TextButton> clearLogsButton;

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (AudioPluginAudioProcessorEditor)
};


===== File: PluginProcessor.cpp =====
Path: C:\Users\nemej992\Documents\Repos\IthacaPlayer\PluginProcessor.cpp
=====
#include "PluginProcessor.h"
#include "PluginEditor.h"

/**
 * @brief Konstruktor AudioPluginAudioProcessor.
 * Inicializuje komponenty a stav.
 */
AudioPluginAudioProcessor::AudioPluginAudioProcessor()
    : AudioProcessor(BusesProperties()
                     .withOutput("Output", juce::AudioChannelSet::stereo(), true))
    , logger_(Logger::getInstance())
    , voiceManager_(sampleLibrary_)  // VoiceManager vyžaduje SampleLibrary
{
    logger_.log("PluginProcessor/constructor", "info", "=== ZAHÁJENÍ INICIALIZACE PROCESSOR ===");
    
    try {
        // Inicializace s bezpečnými výchozími hodnotami
        sampleRate_ = 44100.0;
        synthState_.store(SynthState::Uninitialized);
        processingEnabled_.store(false);
        
        logger_.log("PluginProcessor/constructor", "info", "Základní komponenty inicializovány");
        logger_.log("PluginProcessor/constructor", "info", "Výchozí sample rate: " + juce::String(sampleRate_));
        
    } catch (const std::exception& e) {
        logger_.log("PluginProcessor/constructor", "error", "Chyba v konstruktoru: " + juce::String(e.what()));
        synthState_.store(SynthState::Error);
    } catch (...) {
        logger_.log("PluginProcessor/constructor", "error", "Neznámá chyba v konstruktoru");
        synthState_.store(SynthState::Error);
    }
    
    logger_.log("PluginProcessor/constructor", "info", "=== PROCESSOR KONSTRUKTOR DOKONČEN ===");
    DBG("Processor constructor completed with state: " + getStateDescription());
}

/**
 * @brief Destruktor s kompletním cleanup a logováním.
 */
AudioPluginAudioProcessor::~AudioPluginAudioProcessor() 
{
    logger_.log("PluginProcessor/destructor", "info", "=== ZAHÁJENÍ DESTRUKCE PROCESSOR ===");
    
    try {
        // Okamžité zastavení zpracování
        processingEnabled_.store(false);
        synthState_.store(SynthState::Uninitialized);
        
        logger_.log("PluginProcessor/destructor", "info", "Audio zpracování zastaveno");
        
        // Uvolnění zdrojů v správném pořadí
        sampleLibrary_.clear();
        logger_.log("PluginProcessor/destructor", "info", "Sample library vyčištěna");
        
        // Krátké čekání pro dokončení případných audio vláken
        juce::Thread::sleep(10);
        
    } catch (const std::exception& e) {
        logger_.log("PluginProcessor/destructor", "error", "Chyba v destruktoru: " + juce::String(e.what()));
    } catch (...) {
        logger_.log("PluginProcessor/destructor", "error", "Neznámá chyba v destruktoru");
    }
    
    logger_.log("PluginProcessor/destructor", "info", "=== DESTRUKCE PROCESSOR DOKONČENA ===");
    DBG("Processor destructor completed");
}

void AudioPluginAudioProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    logger_.log("PluginProcessor/prepareToPlay", "info", "=== ZAHÁJENÍ PREPARE TO PLAY ===");
    logger_.log("PluginProcessor/prepareToPlay", "info", 
                "Parametry - SampleRate: " + juce::String(sampleRate) + 
                ", BufferSize: " + juce::String(samplesPerBlock));
    
    try {
        // Validace vstupních parametrů
        if (sampleRate <= 0.0 || sampleRate > 192000.0) {
            logger_.log("PluginProcessor/prepareToPlay", "error", "Neplatný sample rate: " + juce::String(sampleRate));
            throw std::invalid_argument(("Neplatný sample rate: " + juce::String(sampleRate)).toStdString());
        }
        
        if (samplesPerBlock <= 0 || samplesPerBlock > 8192) {
            logger_.log("PluginProcessor/prepareToPlay", "error", "Neplatná velikost bufferu: " + juce::String(samplesPerBlock));
            throw std::invalid_argument(("Neplatná velikost bufferu: " + juce::String(samplesPerBlock)).toStdString());
        }
        
        // Uložení starých hodnot pro porovnání
        double oldSampleRate = sampleRate_;
        int oldBufferSize = samplesPerBlock_;
        
        // Uložení nových parametrů
        sampleRate_ = sampleRate;
        samplesPerBlock_ = samplesPerBlock;
        
        // TEPRVE TEĎ detekce změn (po uložení nových hodnot)
        bool sampleRateChanged = (std::abs(sampleRate - oldSampleRate) > 1.0);
        bool bufferSizeChanged = (samplesPerBlock != oldBufferSize);
        bool isFirstInit = (synthState_.load() == SynthState::Uninitialized);
        bool hasError = (synthState_.load() == SynthState::Error);
        
        logger_.log("PluginProcessor/prepareToPlay", "info", 
                   "Změny - SampleRate: " + juce::String(sampleRateChanged ? "ANO" : "NE") + 
                   " (" + juce::String(oldSampleRate) + " -> " + juce::String(sampleRate) + ")" +
                   ", BufferSize: " + juce::String(bufferSizeChanged ? "ANO" : "NE") + 
                   " (" + juce::String(oldBufferSize) + " -> " + juce::String(samplesPerBlock) + ")" +
                   ", FirstInit: " + juce::String(isFirstInit ? "ANO" : "NE") + 
                   ", HasError: " + juce::String(hasError ? "ANO" : "NE"));
        
        // OPTIMALIZACE: Reinicializace pouze když je skutečně potřeba
        bool needsFullReinit = isFirstInit || hasError || sampleRateChanged;
        
        if (needsFullReinit) {
            logger_.log("PluginProcessor/prepareToPlay", "info", 
                       "Provádím PLNOU reinicializaci - důvod: " + 
                       juce::String(isFirstInit ? "první inicializace" : 
                                   hasError ? "chybový stav" : 
                                   sampleRateChanged ? "změna sample rate" : "neznámý"));
            
            // Dočasné zastavení zpracování
            processingEnabled_.store(false);
            synthState_.store(SynthState::Initializing);
            
            // Plná reinicializace (vzorky, voice manager, atd.)
            initializeSynth();
            
        } else if (bufferSizeChanged) {
            logger_.log("PluginProcessor/prepareToPlay", "info", 
                       "Změna POUZE velikosti bufferu z " + juce::String(oldBufferSize) + 
                       " na " + juce::String(samplesPerBlock) + 
                       " - žádná reinicializace vzorků není potřeba");
            
            // Pouze logování změny - žádná reinicializace
            // Audio systém už je připraven, jen se změnila velikost bloku
            
        } else {
            logger_.log("PluginProcessor/prepareToPlay", "info", 
                       "Žádné změny nevyžadují akci - stav zůstává: " + getStateDescription());
        }
        
        // Povolení zpracování pouze pokud je vše v pořádku
        if (synthState_.load() == SynthState::Ready) {
            processingEnabled_.store(true);
            logger_.log("PluginProcessor/prepareToPlay", "info", "Audio zpracování povoleno");
        } else if (!needsFullReinit) {
            // Pokud nebyla reinicializace a přesto není Ready, je problém
            logger_.log("PluginProcessor/prepareToPlay", "warn", 
                       "Neočekávaný stav po změně bufferu: " + getStateDescription());
        }
        
    } catch (const std::exception& e) {
        logger_.log("PluginProcessor/prepareToPlay", "error", "Chyba v prepareToPlay: " + juce::String(e.what()));
        handleSynthError("Chyba v prepareToPlay: " + juce::String(e.what()));
        synthState_.store(SynthState::Error);
        processingEnabled_.store(false);
    } catch (...) {
        logger_.log("PluginProcessor/prepareToPlay", "error", "Neznámá chyba v prepareToPlay");
        handleSynthError("Neznámá chyba v prepareToPlay");
        synthState_.store(SynthState::Error);
        processingEnabled_.store(false);
    }
    
    logger_.log("PluginProcessor/prepareToPlay", "info", 
               "=== PREPARE TO PLAY DOKONČEN - Stav: " + getStateDescription() + 
               ", SampleRate: " + juce::String(sampleRate_) + 
               ", BufferSize: " + juce::String(samplesPerBlock_) + " ===");
    DBG("prepareToPlay completed with state: " + getStateDescription());
}

/**
 * @brief Uvolní zdroje s kompletním logováním.
 */
void AudioPluginAudioProcessor::releaseResources()
{
    logger_.log("PluginProcessor/releaseResources", "info", "=== ZAHÁJENÍ RELEASE RESOURCES ===");
    
    try {
        // Okamžité zastavení zpracování
        processingEnabled_.store(false);
        
        // Vyčištění vzorků
        sampleLibrary_.clear();
        logger_.log("PluginProcessor/releaseResources", "info", "Sample library vyčištěna");
        
        // Reset stavu
        synthState_.store(SynthState::Uninitialized);
        
        logger_.log("PluginProcessor/releaseResources", "info", "Všechny zdroje uvolněny");
        
    } catch (const std::exception& e) {
        logger_.log("PluginProcessor/releaseResources", "error", "Chyba při uvolňování: " + juce::String(e.what()));
    } catch (...) {
        logger_.log("PluginProcessor/releaseResources", "error", "Neznámá chyba při uvolňování");
    }
    
    logger_.log("PluginProcessor/releaseResources", "info", "=== RELEASE RESOURCES DOKONČEN ===");
    DBG("Resources released");
}

/**
 * @brief Inicializuje syntetizér s robustním error handlingem.
 */
void AudioPluginAudioProcessor::initializeSynth()
{
    if (synthState_.load() != SynthState::Initializing) {
        logger_.log("PluginProcessor/initializeSynth", "warn", "Inicializace přeskočena - nesprávný stav: " + getStateDescription());
        return;
    }

    logger_.log("PluginProcessor/initializeSynth", "info", "Zahájení inicializace syntezátoru");
    
    try {
        if (sampleRate_ <= 0.0) {
            throw std::runtime_error("Sample rate není nastaven");
        }
        
        logger_.log("PluginProcessor/initializeSynth", "info", "Inicializace sample library...");
        sampleLibrary_.initialize(sampleRate_);
        
        // Kontrola, zda byla inicializace úspěšná
        bool hasValidSamples = false;
        for (uint8_t note = SampleLibrary::MIN_NOTE; note <= SampleLibrary::MAX_NOTE; ++note) {
            for (uint8_t level = 0; level < 8; ++level) {
                if (sampleLibrary_.isNoteAvailable(note, level)) {
                    hasValidSamples = true;
                    break;
                }
            }
            if (hasValidSamples) break;
        }
        
        if (!hasValidSamples) {
            throw std::runtime_error("Žádné vzorky nebyly vygenerovány");
        }
        
        synthState_.store(SynthState::Ready);
        logger_.log("PluginProcessor/initializeSynth", "info", "Syntezátor úspěšně inicializován");
        
    } catch (const std::exception& e) {
        handleSynthError("Inicializace selhala: " + juce::String(e.what()));
        synthState_.store(SynthState::Error);
    } catch (...) {
        handleSynthError("Neznámá chyba při inicializaci");
        synthState_.store(SynthState::Error);
    }
}

/**
 * @brief Centrální handling chyb s detailním logováním.
 * @param errorMessage Zpráva o chybě
 */
void AudioPluginAudioProcessor::handleSynthError(const juce::String& errorMessage)
{
    logger_.log("PluginProcessor/handleSynthError", "error", errorMessage);
    
    // Zastavení zpracování při chybě
    processingEnabled_.store(false);
    
    // Možné rozšíření o recovery mechanismy
    DBG("Synth error: " + errorMessage);
}

/**
 * @brief Vrátí popis stavu s dodatečnými informacemi.
 * @return String popis
 */
juce::String AudioPluginAudioProcessor::getStateDescription() const
{
    juce::String base;
    switch (synthState_.load()) {
        case SynthState::Uninitialized: base = "Neinicializováno"; break;
        case SynthState::Initializing: base = "Inicializace"; break;
        case SynthState::Ready: base = "Připraveno"; break;
        case SynthState::Error: base = "Chyba"; break;
        default: base = "Neznámý stav"; break;
    }
    
    base += " (Processing: " + juce::String(processingEnabled_.load() ? "ON" : "OFF") + ")";
    return base;
}

/**
 * @brief Zpracuje audio blok s kompletním error handlingem a validací.
 * @param buffer Audio buffer
 * @param midiMessages MIDI buffer
 */
void AudioPluginAudioProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midiMessages)
{
    static int blockCounter = 0;
    blockCounter++;
    
    // Periodické logging každých 1000 bloků pro snížení zátěže
    bool shouldLog = (blockCounter % 1000 == 1) || (blockCounter <= 10);
    
    try {
        if (shouldLog) {
            logger_.log("PluginProcessor/processBlock", "debug", 
                       "Blok #" + juce::String(blockCounter) + " - Stav: " + getStateDescription() + 
                       ", Velikost: " + juce::String(buffer.getNumSamples()) + 
                       ", Kanály: " + juce::String(buffer.getNumChannels()));
        }
        
        // Základní validace
        if (!processingEnabled_.load() || synthState_.load() != SynthState::Ready) {
            buffer.clear();
            if (shouldLog) {
                logger_.log("PluginProcessor/processBlock", "debug", "Blok přeskočen - zpracování vypnuto nebo nesprávný stav");
            }
            return;
        }
        
        // Validace bufferu
        if (buffer.getNumSamples() <= 0 || buffer.getNumChannels() <= 0) {
            logger_.log("PluginProcessor/processBlock", "error", "Neplatný buffer - samples: " + 
                       juce::String(buffer.getNumSamples()) + ", channels: " + juce::String(buffer.getNumChannels()));
            return;
        }
        
        // Zpracování MIDI zpráv s error handlingem
        int midiEventCount = 0;
        try {
            for (const auto metadata : midiMessages) {
                auto msg = metadata.getMessage();
                midiEventCount++;
                
                if (msg.isNoteOn()) {
                    // OPRAVA: Explicitní cast pro odstranění warning C4244
                    midiState_.pushNoteOn(static_cast<uint8_t>(msg.getChannel() - 1), 
                                         static_cast<uint8_t>(msg.getNoteNumber()), 
                                         static_cast<uint8_t>(msg.getVelocity()));
                    if (shouldLog) {
                        logger_.log("PluginProcessor/processBlock", "debug", 
                                   "NoteOn: nota " + juce::String(msg.getNoteNumber()) + 
                                   ", velocity " + juce::String(msg.getVelocity()) + 
                                   ", kanál " + juce::String(msg.getChannel()));
                    }
                } else if (msg.isNoteOff()) {
                    // OPRAVA: Explicitní cast pro odstranění warning C4244
                    midiState_.pushNoteOff(static_cast<uint8_t>(msg.getChannel() - 1), 
                                          static_cast<uint8_t>(msg.getNoteNumber()));
                    if (shouldLog) {
                        logger_.log("PluginProcessor/processBlock", "debug", 
                                   "NoteOff: nota " + juce::String(msg.getNoteNumber()) + 
                                   ", kanál " + juce::String(msg.getChannel()));
                    }
                } else if (msg.isController()) {
                    // OPRAVA: Explicitní cast pro odstranění warning C4244
                    midiState_.setControllerValue(static_cast<uint8_t>(msg.getChannel() - 1), 
                                                 static_cast<uint8_t>(msg.getControllerNumber()), 
                                                 static_cast<uint8_t>(msg.getControllerValue()));
                    if (shouldLog) {
                        logger_.log("PluginProcessor/processBlock", "debug", 
                                   "Controller: #" + juce::String(msg.getControllerNumber()) + 
                                   " = " + juce::String(msg.getControllerValue()));
                    }
                }
            }
        } catch (const std::exception& e) {
            logger_.log("PluginProcessor/processBlock", "error", "Chyba při zpracování MIDI: " + juce::String(e.what()));
            // Pokračujeme bez MIDI dat
        }
        
        if (shouldLog && midiEventCount > 0) {
            logger_.log("PluginProcessor/processBlock", "debug", "MIDI zprávy zpracovány: " + juce::String(midiEventCount));
        }

        // Zpracování hlasů s error handlingem
        try {
            voiceManager_.processMidiEvents(midiState_);
        } catch (const std::exception& e) {
            logger_.log("PluginProcessor/processBlock", "error", "Chyba při zpracování hlasů: " + juce::String(e.what()));
            buffer.clear();
            return;
        }

        // Generace audio s bezpečnostními kontrolami
        buffer.clear();
        
        // OPRAVA: Získání float* pointeru z AudioBuffer
        float* channelData = buffer.getWritePointer(0);
        if (channelData == nullptr) {
            logger_.log("PluginProcessor/processBlock", "error", "Null pointer pro audio buffer kanál 0");
            return;
        }
        
        try {
            // OPRAVA: Předání float* místo AudioBuffer
            voiceManager_.generateAudio(channelData, buffer.getNumSamples());
        } catch (const std::exception& e) {
            logger_.log("PluginProcessor/processBlock", "error", "Chyba při generaci audio: " + juce::String(e.what()));
            buffer.clear();
            return;
        }

        // Bezpečná konverze na stereo
        if (buffer.getNumChannels() >= 2) {
            try {
                buffer.copyFrom(1, 0, buffer, 0, 0, buffer.getNumSamples());
                if (shouldLog) {
                    logger_.log("PluginProcessor/processBlock", "debug", "Stereo konverze dokončena");
                }
            } catch (const std::exception& e) {
                logger_.log("PluginProcessor/processBlock", "error", "Chyba při stereo konverzi: " + juce::String(e.what()));
                // Necháme mono, není to kritická chyba
            }
        }

        // Refresh voice manageru
        voiceManager_.refresh();

        if (shouldLog) {
            int activeVoices = voiceManager_.getActiveVoiceCount();
            logger_.log("PluginProcessor/processBlock", "debug", 
                       "Blok dokončen - Aktivní hlasy: " + juce::String(activeVoices));
        }
        
    } catch (const std::exception& e) {
        logger_.log("PluginProcessor/processBlock", "error", "Výjimka v processBlock: " + juce::String(e.what()));
        buffer.clear(); // Zajistíme tichý výstup při chybě
        processingEnabled_.store(false); // Zastavíme zpracování při kritické chybě
    } catch (...) {
        logger_.log("PluginProcessor/processBlock", "error", "Neznámá výjimka v processBlock");
        buffer.clear();
        processingEnabled_.store(false);
    }
}

/**
 * @brief Vytvoří editor s error handlingem.
 */
juce::AudioProcessorEditor* AudioPluginAudioProcessor::createEditor()
{
    logger_.log("PluginProcessor/createEditor", "info", "=== VYTVOŘENÍ EDITORU ===");
    
    try {
        auto* editor = new AudioPluginAudioProcessorEditor(*this);
        logger_.log("PluginProcessor/createEditor", "info", "Editor úspěšně vytvořen");
        return editor;
    } catch (const std::exception& e) {
        logger_.log("PluginProcessor/createEditor", "error", "Chyba při vytváření editoru: " + juce::String(e.what()));
        return nullptr;
    } catch (...) {
        logger_.log("PluginProcessor/createEditor", "error", "Neznámá chyba při vytváření editoru");
        return nullptr;
    }
}

/**
 * @brief Exportovaná funkce pro JUCE plugin s error handlingem.
 */
juce::AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    try {
        return new AudioPluginAudioProcessor();
    } catch (const std::exception& e) {
        DBG("Error creating plugin: " + juce::String(e.what()));
        return nullptr;
    } catch (...) {
        DBG("Unknown error creating plugin");
        return nullptr;
    }
}


===== File: PluginProcessor.h =====
Path: C:\Users\nemej992\Documents\Repos\IthacaPlayer\PluginProcessor.h
=====
#pragma once

#include <juce_audio_processors/juce_audio_processors.h>
#include <atomic>
#include "SampleLibrary.h"
#include "VoiceManager.h"
#include "MidiStateManager.h"
#include "Logger.h"

// Enum pro stavy syntetizéru s rozšířenou funkcionalitou
enum class SynthState {
    Uninitialized,  // Počáteční stav - nic není inicializováno
    Initializing,   // Probíhá inicializace
    Ready,          // Připraveno k audio zpracování
    Error           // Kritická chyba - vyžaduje restart
};

/**
 * @class AudioPluginAudioProcessor
 * @brief Hlavní audio procesor pluginu (JUCE-based) s robustním error handlingem.
 * 
 * Spravuje inicializaci, zpracování audio/MIDI, stav syntetizéru a error recovery.
 * Nově přidány atomic safety mechanismy a detailní logging pro debugging.
 * 
 * Thread Safety:
 * - synthState_ a processingEnabled_ jsou atomic pro bezpečný přístup z více vláken
 * - Všechny kritické operace jsou chráněny try-catch bloky
 * - Error handling s automatic recovery kde je to možné
 * 
 * Memory Management:
 * - Automatické cleanup v destruktoru
 * - Safe resource deallocation při chybách
 * - Kontrola validity pointerů před použitím
 */
class AudioPluginAudioProcessor : public juce::AudioProcessor
{
public:
    AudioPluginAudioProcessor();
    ~AudioPluginAudioProcessor() override;

    // === JUCE Audio Processor Interface ===
    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    // === Editor Management ===
    juce::AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override { return true; }

    // === Plugin Metadata ===
    const juce::String getName() const override { return JucePlugin_Name; }
    bool acceptsMidi() const override { return true; }
    bool producesMidi() const override { return false; }
    bool isMidiEffect() const override { return false; }
    double getTailLengthSeconds() const override { return 0.0; }

    // === Program Management (Basic Implementation) ===
    int getNumPrograms() override { return 1; }
    int getCurrentProgram() override { return 0; }
    void setCurrentProgram(int) override {}
    const juce::String getProgramName(int) override { return {}; }
    void changeProgramName(int, const juce::String&) override {}

    // === State Persistence (Placeholder) ===
    void getStateInformation(juce::MemoryBlock&) override {}
    void setStateInformation(const void*, int) override {}

    // === Public Status Methods ===
    /**
     * @brief Vrátí lidsky čitelný popis aktuálního stavu.
     * @return String s popisem stavu včetně processing status
     */
    juce::String getStateDescription() const;

    /**
     * @brief Kontroluje, zda je procesor připraven k audio zpracování.
     * @return true pokud je ready a processing enabled
     */
    bool isReadyForProcessing() const { 
        return synthState_.load() == SynthState::Ready && processingEnabled_.load(); 
    }

    /**
     * @brief Vrátí aktuální sample rate.
     * @return Sample rate nebo 0 pokud není nastaven
     */
    double getCurrentSampleRate() const { return sampleRate_; }

    /**
     * @brief Vrátí velikost audio bufferu.
     * @return Velikost bufferu nebo 0 pokud není nastaven
     */
    int getCurrentBufferSize() const { return samplesPerBlock_; }

private:
    // === Core Components ===
    Logger& logger_;  // Reference na singleton logger
    SampleLibrary sampleLibrary_;  // Knihovna audio vzorků
    VoiceManager voiceManager_;  // Manager polyphonic hlasů
    MidiStateManager midiState_;  // Manager MIDI stavu a událostí

    // === State Management (Thread-Safe) ===
    std::atomic<SynthState> synthState_{SynthState::Uninitialized};  // Stav syntetizéru
    std::atomic<bool> processingEnabled_{false};  // Povolení audio zpracování
    
    // === Audio Configuration ===
    double sampleRate_{44100.0};  // Aktuální sample rate
    int samplesPerBlock_{512};     // Velikost audio bufferu

    // === Private Methods ===

    /**
     * @brief Inicializuje syntetizér (vzorky, voices atd.) s error handlingem.
     * Volá se z prepareToPlay po validaci parametrů.
     * 
     * Process:
     * 1. Kontrola přechodů stavů
     * 2. Inicializace SampleLibrary
     * 3. Validace vygenerovaných vzorků
     * 4. Nastavení Ready stavu
     * 
     * @throws std::runtime_error při kritických chybách
     */
    void initializeSynth();

    /**
     * @brief Centrální metoda pro handling chyb s automatickým recovery.
     * 
     * Akce při chybě:
     * - Logování s detailním popisem
     * - Zastavení audio zpracování
     * - Možné future recovery mechanismy
     * 
     * @param errorMessage Zpráva o chybě pro logging
     */
    void handleSynthError(const juce::String& errorMessage);

    // === JUCE Macro for Memory Leak Detection ===
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR(AudioPluginAudioProcessor)
};

// === Global Plugin Factory Function ===
/**
 * @brief Factory funkce pro vytváření plugin instance.
 * Vyžadována JUCE frameworkem pro VST3, AU a další formáty.
 * 
 * @return Novou instanci AudioPluginAudioProcessor nebo nullptr při chybě
 */
juce::AudioProcessor* JUCE_CALLTYPE createPluginFilter();


===== File: README.md =====
Path: C:\Users\nemej992\Documents\Repos\IthacaPlayer\README.md
=====
## Cesty na build soubory

[build]   juce_vst3_helper.vcxproj .\build\Debug\juce_vst3_helper.exe  
[build]   IthacaPlayer.vcxproj -> .\build\IthacaPlayer_artefacts\Debug\IthacaPlayer_SharedCode.lib  
[build]   IthacaPlayer_VST3.vcxproj -> .\build\IthacaPlayer_artefacts\Debug\VST3\IthacaPlayer.vst3\Contents\x86_64-win\IthacaPlayer.vst3  
[build]   IthacaPlayer_Standalone.vcxproj -> .\build\IthacaPlayer_artefacts\Debug\Standalone\IthacaPlayer.exe  

## Cesta na aplikacni data

WIN+R: %APPDATA%\IthacaPlayer  

C:\Users\[uživatel]\AppData\Roaming\IthacaPlayer  

Zde se ukládají generované WAV soubory pro samples (v podsložce "instrument"), logy a další data.

## MIDI tools

### VMPK

Virtuální MIDI klávesnice pro testování. Použijte počítačovou klávesnici nebo myš k hraní not a spojte s IthacaPlayer přes virtual MIDI porty.  

https://vmpk.sourceforge.io/#Download  
https://sourceforge.net/projects/vmpk/  

### loopMIDI

Nástroj pro vytváření virtuálních MIDI portů na Windows pro propojení aplikací (např. VMPK s IthacaPlayer).  

https://www.tobias-erichsen.de/software/loopmidi.html  

## Nastavení vývojového prostředí

Pro kompilaci C++ projektu s CMakeLists.txt ve Visual Studio Code (VS Code) proveďte následující kroky. Předpokládá se instalace Visual Studio Build Tools (s MSVC kompilátorem: https://visualstudio.microsoft.com/cs/visual-cpp-build-tools/) a CMake.  

### Požadavky  
- Visual Studio Build Tools (MSVC kompilátor).  
- CMake nainstalovaný a přidán do PATH (např. C:\Program Files\CMake\bin).  
- VS Code.  

### Kroky nastavení  
1. **Instalace rozšíření ve VS Code**:  
   - Otevřete Extensions (Ctrl+Shift+X).  
   - Nainstalujte: C/C++ (od Microsoftu pro podporu C++ syntaxe, IntelliSense a ladění) a CMake Tools (od Microsoftu pro integraci CMake).  
   - Restartujte VS Code.  

2. **Otevření projektu**:  
   - Přejděte na File > Open Folder a vyberte složku s CMakeLists.txt.  

3. **Výběr kompilátoru (kit)**:  
   - V Command Palette (Ctrl+Shift+P) napište "CMake: Select a Kit".  
   - Vyberte "amd64" (64-bit) nebo ekvivalent podle potřeby (např. x64 pro moderní systémy).  

4. **Konfigurace projektu**:  
   - V Command Palette napište "CMake: Configure". To vygeneruje build soubory (obvykle ve složce "build").  

5. **Build projektu**:  
   - V Command Palette napište "CMake: Build" nebo použijte Shift+Ctrl+B (nyní nabídne CMake úlohy).  

6. **Debugování (volitelně)**:  
   - Nastavte breakpointy a spusťte "CMake: Debug" v Command Palette.  

---  

# IthacaPlayer - Software Synthesizer  

Audio plugin synthesizer implementovaný v JUCE frameworku, inspirovaný hardwarovými syntezátory s modulární architekturou. Podporuje MIDI vstup, generování audio samplů (fallback na sine vlny), dynamic levels (0-7) pro velocity mapping a stereo samples.  

## Architektura Systému  

### Přehled Komponent  

```
AudioPluginAudioProcessor (Main Controller)
├── SampleLibrary (Pre-computed Audio Storage)
│   └── SampleLoader (Loading/Generating/Resampling WAV)
├── MidiStateManager (MIDI Event Processing)
├── VoiceManager (Voice Allocation & Control)
└── Logger (Debug & Monitoring with Circular Buffer)
```


## Core Komponenty  

### 1. SampleLibrary  
**Účel:** Správa pre-computed audio samplů pro MIDI noty (21-108) s podporou 8 dynamic levels.  
**Klíčové vlastnosti:**  
- Automatické generování sine vln jako fallback.  
- Ukládání/resampling WAV souborů do %APPDATA%\IthacaPlayer\instrument\ (podpora 44.1kHz a 48kHz).  
- Velocity mapping na dynamic levels (0-7).  
- Podpora mono/stereo samplů.  

### 2. SampleLoader  
**Účel:** Načítání/generování samplů s resamplingem.  
**Klíčové vlastnosti:**  
- Naming convention: m[nota]-vel[level]-[sr].wav (např. m060-vel3-44.wav).  
- Fallback: Pokud soubor chybí, generuje sine pro 44.1kHz, resampluje na 48kHz a ukládá.  
- Statistiky loadingu (načtené/generované soubory, paměť).  

### 3. MidiStateManager  
**Účel:** Správa MIDI stavu (noty, velocity, controllery).  
**Klíčové vlastnosti:**  
- Kruhové fronty pro note-on/off (thread-safe s mutex a atomic).  
- Inicializace default controller hodnot (např. volume=100).  
- Podpora 16 kanálů.  

### 4. VoiceManager  
**Účel:** Alokace a kontrola hlasů (polyfonie).  
**Klíčové vlastnosti:**  
- Až 16 hlasů s dynamic level selection.  
- Enhanced voice stealing (nejstarší hlas s nejvyšším progressem).  
- Stereo rendering (mix/duplicate kanálů).  
- Statistiky: Aktivní hlasy, podle levels, průměrný progress, stolen voices.  

### 5. Logger  
**Účel:** Logování s kruhovým bufferem a GUI display.  
**Klíčové vlastnosti:**  
- Kruhový buffer (100 vstupů) pro efektivní paměť.  
- Zápis do souboru (IthacaPlayer.log v %APPDATA%).  
- Podpora úrovní (info/debug/error/warn).  
- Thread-safe s mutex.  

### 6. PluginProcessor  

**Účel:** Hlavní audio procesor (JUCE-based).  
**Klíčové vlastnosti:**  
- Robustní error handling s try-catch a recovery.  
- Inicializace jen při změně sample rate/bufferu.  
- Podpora VST3/AU/Standalone.  


===== File: SampleLibrary.cpp =====
Path: C:\Users\nemej992\Documents\Repos\IthacaPlayer\SampleLibrary.cpp
=====
#include "SampleLibrary.h"
#include <cmath>

/**
 * @brief SampleLibrary constructor
 */
SampleLibrary::SampleLibrary()
    : logger_(Logger::getInstance())
{
    logger_.log("SampleLibrary/constructor", "info", "SampleLibrary initialized with dynamic levels");
}

/**
 * @brief Initializes sample library with hybrid loading system
 */
void SampleLibrary::initialize(double sampleRate, 
                              std::function<void(int, int, const juce::String&)> progressCallback)
{
    if (sampleRate <= 0.0) {
        logger_.log("SampleLibrary/initialize", "error", "Invalid sampleRate: " + juce::String(sampleRate));
        throw std::invalid_argument("Invalid sampleRate");
    }

    auto startTime = juce::Time::getMillisecondCounterHiRes();
    
    sampleRate_ = sampleRate;
    clear();

    logger_.log("SampleLibrary/initialize", "info",
                "Starting initialization with sample rate=" + juce::String(sampleRate_) + 
                " using dynamic levels");

    // Reset statistics
    loadingStats_ = SampleLibraryStats();

    try {
        // Create SampleLoader
        SampleLoader loader(sampleRate);
        juce::File instrumentDir = SampleLoader::getDefaultInstrumentDirectory();
        
        // Ensure directory exists
        if (!instrumentDir.exists()) {
            if (!instrumentDir.createDirectory()) {
                throw std::runtime_error("Cannot create instrument directory: " + 
                                       instrumentDir.getFullPathName().toStdString());
            }
            logger_.log("SampleLibrary/initialize", "info", 
                       "Created instrument directory: " + instrumentDir.getFullPathName());
        }

        // Progress callback wrapper
        auto progressWrapper = [this, progressCallback](int current, int total, const juce::String& status) {
            if (progressCallback) {
                progressCallback(current, total, status);
            }
            // Log every 50th sample to reduce noise
            if (current % 50 == 0 || current == total) {
                logger_.log("SampleLibrary/initialize", "debug", 
                           "Progress: " + juce::String(current) + "/" + juce::String(total) + 
                           " - " + status);
            }
        };

        // Load all samples
        std::vector<LoadedSample> loadedSamples = loader.loadInstrument(instrumentDir, progressWrapper);
        
        // Store samples in internal structure
        for (const auto& sample : loadedSamples) {
            try {
                storeSampleRam(sample);
                loadingStats_.totalSamples++;
                
                if (sample.isGenerated) {
                    loadingStats_.generatedSines++;
                } else {
                    loadingStats_.loadedFromFiles++;
                }
                
            } catch (const std::exception& e) {
                logger_.log("SampleLibrary/initialize", "error",
                           "Error storing sample for note " + juce::String((int)sample.midiNote) + 
                           " level " + juce::String((int)sample.dynamicLevel) + 
                           ": " + juce::String(e.what()));
            }
        }
        
        // Adopt statistics from SampleLoader
        const auto& loaderStats = loader.getLoadingStats();
        loadingStats_.savedToFiles = loaderStats.filesSaved;
        loadingStats_.totalMemoryUsed = getTotalMemoryUsage();
        loadingStats_.loadingTimeSeconds = (juce::Time::getMillisecondCounterHiRes() - startTime) / 1000.0;

        logger_.log("SampleLibrary/initialize", "info",
                   "Initialization completed: " + loadingStats_.getDescription());
        
        // Check if we have any samples
        if (loadingStats_.totalSamples == 0) {
            throw std::runtime_error("No samples were loaded!");
        }
        
        // Check availability of basic notes for debugging
        AvailabilityInfo availInfo = getAvailabilityInfo();
        logger_.log("SampleLibrary/initialize", "info",
                   "Available notes: " + juce::String(availInfo.notesWithAnyLevel) + "/" + 
                   juce::String(MAX_NOTE - MIN_NOTE + 1) + 
                   " (mono: " + juce::String(availInfo.monoSamples) + 
                   ", stereo: " + juce::String(availInfo.stereoSamples) + ")");
        
        // Log dynamic level distribution
        juce::String levelDistribution = "Dynamic levels: ";
        for (int i = 0; i < NUM_DYNAMIC_LEVELS; ++i) {
            levelDistribution += "L" + juce::String(i) + ":" + juce::String(availInfo.levelCounts[i]) + " ";
        }
        logger_.log("SampleLibrary/initialize", "info", levelDistribution);
        
    } catch (const std::exception& e) {
        logger_.log("SampleLibrary/initialize", "error",
                   "Fatal error during initialization: " + juce::String(e.what()));
        throw;
    } catch (...) {
        logger_.log("SampleLibrary/initialize", "error",
                   "Unknown fatal error during initialization");
        throw std::runtime_error("Unknown error during initialization");
    }
}

/**
 * @brief Clears all samples from memory
 */
void SampleLibrary::clear()
{
    std::lock_guard<std::mutex> lock(accessMutex_);
    
    logger_.log("SampleLibrary/clear", "info", "Starting SampleLibrary clear operation");
    
    size_t totalFreed = 0;
    int segmentsCleared = 0;
    
    for (auto& segment : sampleSegments_) {
        if (segment.midiNote != 0) { // Segment has data
            totalFreed += segment.getMemoryUsage();
            segment.reset();
            segmentsCleared++;
        }
    }

    // Reset statistics
    loadingStats_ = SampleLibraryStats();

    logger_.log("SampleLibrary/clear", "info", 
               "SampleLibrary cleared - freed " + juce::String(segmentsCleared) + 
               " segments, " + juce::String(totalFreed / (1024*1024)) + "MB");
}

/**
 * @brief Returns sample data for specific note and dynamic level
 */
const float* SampleLibrary::getSampleData(uint8_t midiNote, uint8_t dynamicLevel) const
{
    if (!isValidNote(midiNote) || !isValidDynamicLevel(dynamicLevel)) {
        return nullptr;
    }
    
    std::lock_guard<std::mutex> lock(accessMutex_);
    return sampleSegments_[midiNote].getLayerData(dynamicLevel);
}

/**
 * @brief Returns sample length for specific note and dynamic level
 */
uint32_t SampleLibrary::getSampleLength(uint8_t midiNote, uint8_t dynamicLevel) const
{
    if (!isValidNote(midiNote) || !isValidDynamicLevel(dynamicLevel)) {
        return 0;
    }
    
    std::lock_guard<std::mutex> lock(accessMutex_);
    return sampleSegments_[midiNote].getLayerLength(dynamicLevel);
}

/**
 * @brief Checks availability of specific dynamic level
 */
bool SampleLibrary::isNoteAvailable(uint8_t midiNote, uint8_t dynamicLevel) const
{
    if (!isValidNote(midiNote) || !isValidDynamicLevel(dynamicLevel)) {
        return false;
    }
    
    std::lock_guard<std::mutex> lock(accessMutex_);
    return sampleSegments_[midiNote].isLayerAvailable(dynamicLevel);
}

/**
 * @brief Checks if sample is stereo
 */
bool SampleLibrary::isSampleStereo(uint8_t midiNote, uint8_t dynamicLevel) const
{
    if (!isValidNote(midiNote) || !isValidDynamicLevel(dynamicLevel)) {
        return false;
    }
    
    std::lock_guard<std::mutex> lock(accessMutex_);
    return sampleSegments_[midiNote].isLayerStereo(dynamicLevel);
}

/**
 * @brief Stores loaded sample into RAM-based internal structure
 */
void SampleLibrary::storeSampleRam(const LoadedSample& sample)
{
    if (!isValidNote(sample.midiNote) || !isValidDynamicLevel(sample.dynamicLevel)) {
        throw std::invalid_argument("Invalid MIDI note or dynamic level");
    }
    
    if (!sample.audioData || sample.lengthSamples == 0) {
        throw std::invalid_argument("Invalid sample data");
    }

    std::lock_guard<std::mutex> lock(accessMutex_);
    
    SampleSegment& segment = sampleSegments_[sample.midiNote];
    segment.midiNote = sample.midiNote;
    
    // Copy data (necessary due to unique_ptr)
    size_t totalSamples = static_cast<size_t>(sample.lengthSamples) * sample.numChannels;
    auto dataCopy = std::make_unique<float[]>(totalSamples);
    std::copy(sample.audioData.get(), 
              sample.audioData.get() + totalSamples, 
              dataCopy.get());
    
    bool isStereo = (sample.numChannels == 2);
    segment.storeLayer(sample.dynamicLevel, std::move(dataCopy), sample.lengthSamples, isStereo);
    
    logger_.log("SampleLibrary/storeSampleRam", "debug",
               "Stored sample in RAM - note " + juce::String((int)sample.midiNote) + 
               " level " + juce::String((int)sample.dynamicLevel) + 
               " (" + juce::String(sample.lengthSamples) + " samples, " +
               juce::String(isStereo ? "stereo" : "mono") + ", " +
               juce::String(sample.isGenerated ? "generated" : "loaded") + ")");
}

/**
 * @brief Maps MIDI velocity to dynamic level
 */
uint8_t SampleLibrary::velocityToDynamicLevel(uint8_t velocity)
{
    return SampleLoader::velocityToDynamicLevel(velocity);
}

/**
 * @brief Returns total memory usage in bytes
 */
size_t SampleLibrary::getTotalMemoryUsage() const
{
    std::lock_guard<std::mutex> lock(accessMutex_);
    
    size_t total = 0;
    for (const auto& segment : sampleSegments_) {
        total += segment.getMemoryUsage();
    }
    
    return total;
}

/**
 * @brief Returns count of available notes
 */
int SampleLibrary::getAvailableNoteCount() const
{
    std::lock_guard<std::mutex> lock(accessMutex_);
    
    int count = 0;
    for (uint8_t note = MIN_NOTE; note <= MAX_NOTE; ++note) {
        // Count note as available if it has at least one dynamic level
        bool hasAnyLevel = false;
        for (uint8_t level = 0; level < NUM_DYNAMIC_LEVELS; ++level) {
            if (sampleSegments_[note].isLayerAvailable(level)) {
                hasAnyLevel = true;
                break;
            }
        }
        if (hasAnyLevel) {
            count++;
        }
    }
    
    return count;
}

/**
 * @brief Returns detailed information about available dynamic levels
 */
SampleLibrary::AvailabilityInfo SampleLibrary::getAvailabilityInfo() const
{
    std::lock_guard<std::mutex> lock(accessMutex_);
    
    AvailabilityInfo info;
    info.totalNotes = MAX_NOTE - MIN_NOTE + 1;
    
    for (uint8_t note = MIN_NOTE; note <= MAX_NOTE; ++note) {
        bool hasAnyLevel = false;
        
        for (uint8_t level = 0; level < NUM_DYNAMIC_LEVELS; ++level) {
            if (sampleSegments_[note].isLayerAvailable(level)) {
                hasAnyLevel = true;
                info.levelCounts[level]++;
                
                if (sampleSegments_[note].isLayerStereo(level)) {
                    info.stereoSamples++;
                } else {
                    info.monoSamples++;
                }
            }
        }
        
        if (hasAnyLevel) {
            info.notesWithAnyLevel++;
        }
    }
    
    return info;
}


===== File: SampleLibrary.h =====
Path: C:\Users\nemej992\Documents\Repos\IthacaPlayer\SampleLibrary.h
=====
#pragma once

#include <juce_core/juce_core.h>
#include <memory>
#include <array>
#include <mutex>
#include "Logger.h"
#include "SampleLoader.h"

/**
 * @struct SampleSegment
 * @brief Container for 8 dynamic levels of a single MIDI note with stereo support
 * 
 * Each MIDI note has 8 dynamic levels (vel0-vel7) with different amplitudes.
 * Each level can have different length and can be mono or stereo.
 */
struct SampleSegment
{
    std::array<std::unique_ptr<float[]>, 8> dynamicLayers;      // 8 dynamic levels
    std::array<uint32_t, 8> layerLengthSamples;                // Length of each level
    std::array<bool, 8> layerAllocated;                        // Whether level is allocated
    std::array<bool, 8> layerIsStereo;                         // Whether level is stereo
    uint8_t midiNote;                                           // MIDI note of this segment
    
    SampleSegment() : layerLengthSamples{}, layerAllocated{}, layerIsStereo{}, midiNote(0) {}
    
    /**
     * @brief Returns length of specific dynamic level
     */
    uint32_t getLayerLength(uint8_t dynamicLevel) const {
        return (dynamicLevel < 8) ? layerLengthSamples[dynamicLevel] : 0;
    }
    
    /**
     * @brief Returns data of specific dynamic level
     */
    const float* getLayerData(uint8_t dynamicLevel) const {
        return (dynamicLevel < 8 && layerAllocated[dynamicLevel]) 
               ? dynamicLayers[dynamicLevel].get() : nullptr;
    }
    
    /**
     * @brief Checks if dynamic level is available
     */
    bool isLayerAvailable(uint8_t dynamicLevel) const {
        return (dynamicLevel < 8) && layerAllocated[dynamicLevel];
    }
    
    /**
     * @brief Checks if dynamic level is stereo
     */
    bool isLayerStereo(uint8_t dynamicLevel) const {
        return (dynamicLevel < 8) && layerIsStereo[dynamicLevel];
    }
    
    /**
     * @brief Stores sample into specific dynamic level
     */
    void storeLayer(uint8_t dynamicLevel, std::unique_ptr<float[]> data, uint32_t length, bool isStereo) {
        if (dynamicLevel < 8) {
            dynamicLayers[dynamicLevel] = std::move(data);
            layerLengthSamples[dynamicLevel] = length;
            layerAllocated[dynamicLevel] = true;
            layerIsStereo[dynamicLevel] = isStereo;
        }
    }
    
    /**
     * @brief Resets all dynamic levels
     */
    void reset() {
        for (int i = 0; i < 8; ++i) {
            dynamicLayers[i].reset();
            layerLengthSamples[i] = 0;
            layerAllocated[i] = false;
            layerIsStereo[i] = false;
        }
        midiNote = 0;
    }
    
    /**
     * @brief Calculates total memory usage of this segment
     */
    size_t getMemoryUsage() const {
        size_t total = 0;
        for (int i = 0; i < 8; ++i) {
            if (layerAllocated[i]) {
                total += layerLengthSamples[i] * sizeof(float) * (layerIsStereo[i] ? 2 : 1);
            }
        }
        return total;
    }
};

/**
 * @struct LoadingStats
 * @brief Extended loading process statistics for SampleLibrary
 */
struct SampleLibraryStats
{
    int totalSamples;           // Total number of loaded samples
    int loadedFromFiles;        // Number loaded from WAV files
    int generatedSines;         // Number of generated sine waves
    int savedToFiles;           // Number of saved generated files
    size_t totalMemoryUsed;     // Total memory usage in bytes
    double loadingTimeSeconds;  // Total loading time
    
    SampleLibraryStats() : totalSamples(0), loadedFromFiles(0), generatedSines(0), 
                          savedToFiles(0), totalMemoryUsed(0), loadingTimeSeconds(0.0) {}
    
    /**
     * @brief Returns human-readable description of statistics
     */
    juce::String getDescription() const {
        return "Samples: " + juce::String(totalSamples) + 
               " (WAV: " + juce::String(loadedFromFiles) + 
               ", Generated: " + juce::String(generatedSines) + 
               ", Saved: " + juce::String(savedToFiles) + ")" +
               ", Memory: " + juce::String(totalMemoryUsed / (1024*1024)) + "MB" +
               ", Time: " + juce::String(loadingTimeSeconds, 2) + "s";
    }
};

/**
 * @class SampleLibrary
 * @brief Refactored sample library with dynamic levels support and hybrid loading
 * 
 * Key features:
 * - 8 dynamic levels per MIDI note (vel0-vel7)
 * - Hybrid loading: WAV files + fallback sine generation
 * - Variable length samples (each level can have different length)
 * - Stereo/mono support with automatic conversion
 * - Automatic saving of generated samples
 * - Thread-safe access with mutex
 * - Detailed loading statistics
 */
class SampleLibrary
{
public:
    SampleLibrary();
    ~SampleLibrary() = default;

    // === Main Interface ===
    
    /**
     * @brief Initializes sample library with hybrid loading system
     * @param sampleRate Target sample rate
     * @param progressCallback Callback for progress reporting
     */
    void initialize(double sampleRate, 
                   std::function<void(int, int, const juce::String&)> progressCallback = nullptr);

    /**
     * @brief Clears all samples (frees memory)
     */
    void clear();

    // === Extended API for dynamic levels with stereo support ===
    
    /**
     * @brief Returns sample data for specific note and dynamic level
     * @param midiNote MIDI note (21-108)
     * @param dynamicLevel Dynamic level (0-7)
     * @return Pointer to audio data or nullptr
     */
    const float* getSampleData(uint8_t midiNote, uint8_t dynamicLevel) const;
    
    /**
     * @brief Returns sample length for specific note and dynamic level
     * @param midiNote MIDI note
     * @param dynamicLevel Dynamic level
     * @return Length in samples or 0
     */
    uint32_t getSampleLength(uint8_t midiNote, uint8_t dynamicLevel) const;
    
    /**
     * @brief Checks availability of specific dynamic level
     * @param midiNote MIDI note
     * @param dynamicLevel Dynamic level
     * @return true if available
     */
    bool isNoteAvailable(uint8_t midiNote, uint8_t dynamicLevel) const;
    
    /**
     * @brief Checks if sample is stereo
     * @param midiNote MIDI note
     * @param dynamicLevel Dynamic level
     * @return true if stereo
     */
    bool isSampleStereo(uint8_t midiNote, uint8_t dynamicLevel) const;

    // === Backward compatibility (uses dynamic level 0) ===
    
    const float* getSampleData(uint8_t midiNote) const {
        return getSampleData(midiNote, 0);
    }
    
    uint32_t getSampleLength(uint8_t midiNote) const {
        return getSampleLength(midiNote, 0);
    }
    
    bool isNoteAvailable(uint8_t midiNote) const {
        return isNoteAvailable(midiNote, 0);
    }

    // === Utility methods ===
    
    /**
     * @brief Maps MIDI velocity to dynamic level
     * @param velocity MIDI velocity (0-127)
     * @return Dynamic level (0-7)
     */
    static uint8_t velocityToDynamicLevel(uint8_t velocity);
    
    /**
     * @brief Returns loading statistics
     */
    const SampleLibraryStats& getLoadingStats() const { return loadingStats_; }
    
    /**
     * @brief Returns total memory usage
     */
    size_t getTotalMemoryUsage() const;
    
    /**
     * @brief Returns count of available notes
     */
    int getAvailableNoteCount() const;
    
    /**
     * @brief Returns detailed information about available dynamic levels
     */
    struct AvailabilityInfo {
        int totalNotes;
        int notesWithAnyLevel;
        std::array<int, 8> levelCounts;  // Count of notes for each level
        int monoSamples;
        int stereoSamples;
        
        AvailabilityInfo() : totalNotes(0), notesWithAnyLevel(0), levelCounts{}, 
                            monoSamples(0), stereoSamples(0) {}
    };
    
    AvailabilityInfo getAvailabilityInfo() const;

    // === Constants ===
    
    static constexpr uint8_t MIN_NOTE = 21;        // A0
    static constexpr uint8_t MAX_NOTE = 108;       // C8
    static constexpr uint8_t NUM_DYNAMIC_LEVELS = 8;
    static constexpr double SAMPLE_SECONDS = 12.0; // Length of generated samples

private:
    // === Private members ===
    
    mutable std::mutex accessMutex_;                        // Thread safety
    std::array<SampleSegment, 128> sampleSegments_;        // Storage for all MIDI notes
    double sampleRate_{44100.0};                           // Current sample rate
    Logger& logger_;                                        // Reference to logger
    SampleLibraryStats loadingStats_;                      // Loading statistics
    
    // === Private methods ===
    
    /**
     * @brief Stores loaded sample into RAM-based internal structure
     * 
     * This method copies audio data from LoadedSample into the internal
     * RAM-based storage structure (sampleSegments_). It does NOT save
     * to disk - that's handled by SampleLoader.
     * 
     * @param sample Loaded sample to store in RAM
     */
    void storeSampleRam(const LoadedSample& sample);
    
    /**
     * @brief Validates MIDI note and dynamic level
     */
    bool isValidNote(uint8_t midiNote) const {
        return midiNote >= MIN_NOTE && midiNote <= MAX_NOTE;
    }
    
    bool isValidDynamicLevel(uint8_t dynamicLevel) const {
        return dynamicLevel < NUM_DYNAMIC_LEVELS;
    }
};


===== File: SampleLoader.cpp =====
Path: C:\Users\nemej992\Documents\Repos\IthacaPlayer\SampleLoader.cpp
=====
#include "SampleLoader.h"
#include <cmath>  // Pro std::sin, std::pow atd.

// Definice konstant
const float SampleLoader::DYNAMIC_AMPLITUDES[8] = {0.05f, 0.1f, 0.2f, 0.3f, 0.4f, 0.6f, 0.8f, 1.0f};

/**
 * @brief Konstruktor SampleLoader.
 * Inicializuje format manager a logger.
 */
SampleLoader::SampleLoader(double sampleRate)
    : sampleRate_(sampleRate), logger_(Logger::getInstance())
{
    formatManager_.registerBasicFormats();  // Registrace WAV atd.
}

/**
 * @brief Načte kompletní instrument.
 * Iteruje přes noty a levels, volá loadSingleSample.
 */
std::vector<LoadedSample> SampleLoader::loadInstrument(
    const juce::File& instrumentDirectory,
    ProgressCallback progressCallback
) {
    std::vector<LoadedSample> loadedSamples;
    loadingStats_ = LoadingStats{};  // Reset statistik
    
    double startTime = juce::Time::getMillisecondCounterHiRes();
    loadingStats_.totalExpected = (MAX_NOTE - MIN_NOTE + 1) * NUM_DYNAMIC_LEVELS;
    
    // Vytvoření directory pokud neexistuje
    if (!instrumentDirectory.exists()) {
        if (!instrumentDirectory.createDirectory()) {
            logger_.log("SampleLoader/loadInstrument", "error", 
                       "Nelze vytvořit directory: " + instrumentDirectory.getFullPathName());
            return loadedSamples;
        }
        logger_.log("SampleLoader/loadInstrument", "info", 
                   "Vytvořen instrument directory");
    }
    
    int processed = 0;
    
    // Načtení všech kombinací nota × dynamic level
    for (uint8_t note = MIN_NOTE; note <= MAX_NOTE; ++note) {
        for (uint8_t level = 0; level < NUM_DYNAMIC_LEVELS; ++level) {
            try {
                // Progress callback
                if (progressCallback) {
                    juce::String status = "Načítám notu " + juce::String((int)note) + 
                                        " úroveň " + juce::String((int)level);
                    progressCallback(processed, loadingStats_.totalExpected, status);
                }
                
                LoadedSample sample = loadSingleSample(instrumentDirectory, note, level);
                loadedSamples.push_back(std::move(sample));  // Použij move pro přesun
                
                ++processed;
                
            } catch (const std::exception& e) {
                logger_.log("SampleLoader/loadInstrument", "error",
                           "Chyba při načítání noty " + juce::String((int)note) + 
                           " level " + juce::String((int)level) + ": " + juce::String(e.what()));
                ++processed; // Pokračujeme i při chybě
            }
        }
    }
    
    // Finální statistiky
    loadingStats_.loadingTimeSeconds = (juce::Time::getMillisecondCounterHiRes() - startTime) / 1000.0;
    
    logger_.log("SampleLoader/loadInstrument", "info",
               "Loading dokončen: " + juce::String(loadingStats_.filesLoaded) + " načteno, " +
               juce::String(loadingStats_.filesGenerated) + " vygenerováno, " +
               juce::String(loadingStats_.filesSaved) + " uloženo, " +
               juce::String(loadingStats_.totalMemoryUsed / (1024*1024)) + "MB, " +
               juce::String(loadingStats_.loadingTimeSeconds, 2) + "s");
    
    return loadedSamples;
}

/**
 * @brief Načte jeden konkrétní sample.
 * Pokusí se načíst pro target SR, fallback na base SR s resamplingem a ukládáním.
 */
LoadedSample SampleLoader::loadSingleSample(
    const juce::File& instrumentDirectory,
    uint8_t midiNote, 
    uint8_t dynamicLevel
) {
    double baseSR = 44100.0;
    double otherSR = (std::abs(sampleRate_ - 44100.0) < 1.0) ? 48000.0 : 44100.0;
    
    // Zkus target SR
    juce::String targetFilename = generateFilename(midiNote, dynamicLevel, sampleRate_);
    juce::File targetFile = instrumentDirectory.getChildFile(targetFilename);
    if (targetFile.exists()) {
        LoadedSample sample = loadWavFile(targetFile, midiNote, dynamicLevel);
        loadingStats_.filesLoaded++;
        loadingStats_.totalMemoryUsed += sample.getDataSize();
        logger_.log("SampleLoader/loadSingleSample", "debug",
                   "Úspěšně načten soubor: " + targetFilename + 
                   " (" + juce::String(sample.isStereo() ? "stereo" : "mono") + ")");
        return sample;
    }
    
    // Zkus other SR a resampluj
    juce::String otherFilename = generateFilename(midiNote, dynamicLevel, otherSR);
    juce::File otherFile = instrumentDirectory.getChildFile(otherFilename);
    if (otherFile.exists()) {
        LoadedSample otherSample = loadWavFile(otherFile, midiNote, dynamicLevel);  // Načti a resampluj interně
        saveGeneratedSample(otherSample, targetFile);  // Ulož resamplovanou verzi pro target
        loadingStats_.filesLoaded++;
        loadingStats_.filesSaved++;
        loadingStats_.totalMemoryUsed += otherSample.getDataSize();
        logger_.log("SampleLoader/loadSingleSample", "info",
                   "Fallback na resampling z " + otherFilename + " a uložení " + targetFilename);
        return otherSample;
    }
    
    // Generuj pro base (44100)
    LoadedSample baseSample = generateSineWave(midiNote, dynamicLevel);  // Generuj pro baseSR
    baseSample.originalSampleRate = baseSR;
    juce::String baseFilename = generateFilename(midiNote, dynamicLevel, baseSR);
    juce::File baseFile = instrumentDirectory.getChildFile(baseFilename);
    saveGeneratedSample(baseSample, baseFile);  // Ulož base
    loadingStats_.filesGenerated++;
    loadingStats_.filesSaved++;
    loadingStats_.totalMemoryUsed += baseSample.getDataSize();
    
    // Resampluj na 48000 a ulož
    uint32_t resampledLength;
    auto resampledData = resampleIfNeeded(baseSample.audioData.get(), baseSample.lengthSamples, baseSR, resampledLength);
    LoadedSample resampledSample(std::move(baseSample));  // Použij move konstruktor
    resampledSample.audioData = std::move(resampledData);
    resampledSample.lengthSamples = resampledLength;
    resampledSample.originalSampleRate = 48000.0;
    juce::String resampledFilename = generateFilename(midiNote, dynamicLevel, 48000.0);
    juce::File resampledFile = instrumentDirectory.getChildFile(resampledFilename);
    saveGeneratedSample(resampledSample, resampledFile);
    loadingStats_.filesGenerated++;
    loadingStats_.filesSaved++;
    
    // Vrátíme verzi pro target SR
    return (std::abs(sampleRate_ - baseSR) < 1.0) ? std::move(baseSample) : std::move(resampledSample);
}

/**
 * @brief Načte WAV soubor s optional resampling.
 */
LoadedSample SampleLoader::loadWavFile(const juce::File& file, uint8_t midiNote, uint8_t dynamicLevel) {
    FileAnalysis analysis = analyzeWavFile(file);
    if (!analysis.isValid) {
        throw std::runtime_error("Invalid WAV file: " + analysis.errorMessage.toStdString());
    }
    
    LoadedSample result;
    result.midiNote = midiNote;
    result.dynamicLevel = dynamicLevel;
    result.isGenerated = false;
    result.sourcePath = file.getFullPathName();
    result.originalSampleRate = analysis.originalSampleRate;
    result.lengthSamples = analysis.targetLengthSamples;
    
    std::unique_ptr<juce::AudioFormatReader> reader(formatManager_.createReaderFor(file));
    if (!reader) {
        throw std::runtime_error("Cannot create reader for: " + file.getFullPathName().toStdString());
    }
    
    result.numChannels = static_cast<uint8_t>(std::min(2, static_cast<int>(reader->numChannels)));
    
    size_t totalSamples = static_cast<size_t>(analysis.targetLengthSamples) * result.numChannels;
    result.audioData = std::make_unique<float[]>(totalSamples);
    
    if (analysis.needsResampling) {
        juce::AudioBuffer<float> tempBuffer(static_cast<int>(reader->numChannels), 
                                           static_cast<int>(analysis.originalLengthSamples));
        if (!reader->read(tempBuffer.getArrayOfWritePointers(), 
                         static_cast<int>(reader->numChannels), 
                         0, 
                         static_cast<int>(analysis.originalLengthSamples))) {
            throw std::runtime_error("Chyba při načítání audio dat pro resampling");
        }
        
        for (int ch = 0; ch < result.numChannels; ++ch) {
            int sourceChannel = std::min(ch, static_cast<int>(reader->numChannels) - 1);
            const float* sourceData = tempBuffer.getReadPointer(sourceChannel);
            
            uint32_t outputLength;
            auto resampledChannel = resampleIfNeeded(
                sourceData, 
                analysis.originalLengthSamples, 
                analysis.originalSampleRate, 
                outputLength
            );
            
            for (uint32_t i = 0; i < outputLength; ++i) {
                result.audioData[i * result.numChannels + ch] = resampledChannel[i];
            }
        }
    } else {
        juce::AudioBuffer<float> tempBuffer(static_cast<int>(reader->numChannels), 
                                           static_cast<int>(analysis.originalLengthSamples));
        if (!reader->read(tempBuffer.getArrayOfWritePointers(), 
                         static_cast<int>(reader->numChannels), 
                         0, 
                         static_cast<int>(analysis.originalLengthSamples))) {
            throw std::runtime_error("Chyba při načítání audio dat");
        }
        
        for (uint32_t i = 0; i < analysis.originalLengthSamples; ++i) {
            for (int ch = 0; ch < result.numChannels; ++ch) {
                int sourceChannel = std::min(ch, static_cast<int>(reader->numChannels) - 1);
                result.audioData[i * result.numChannels + ch] = tempBuffer.getSample(sourceChannel, static_cast<int>(i));
            }
        }
    }
    
    return result;
}

/**
 * @brief Vygeneruje sine wave pro danou notu a dynamic level (pro base SR 44100).
 */
LoadedSample SampleLoader::generateSineWave(uint8_t midiNote, uint8_t dynamicLevel) {
    logger_.log("SampleLoader/generateSineWave", "info",
               "Generování sine vlny pro notu " + juce::String((int)midiNote) + 
               ", vrstva " + juce::String((int)dynamicLevel));
    
    LoadedSample result;
    result.midiNote = midiNote;
    result.dynamicLevel = dynamicLevel;
    result.isGenerated = true;
    result.originalSampleRate = 44100.0;  // Vždy pro base SR
    result.lengthSamples = static_cast<uint32_t>(result.originalSampleRate * SAMPLE_SECONDS);
    result.numChannels = 1; // Generované samples jsou mono
    result.sourcePath = "Generated sine wave";
    
    result.audioData = std::make_unique<float[]>(result.lengthSamples);
    
    double frequency = getFrequencyForNote(midiNote);
    float amplitude = getDynamicAmplitude(dynamicLevel);
    
    const double twoPi = 2.0 * juce::MathConstants<double>::pi;
    const double phaseInc = twoPi * frequency / result.originalSampleRate;
    
    for (uint32_t i = 0; i < result.lengthSamples; ++i) {
        double phase = phaseInc * static_cast<double>(i);
        result.audioData[i] = amplitude * static_cast<float>(std::sin(phase));
    }
    
    logger_.log("SampleLoader/generateSineWave", "info",
               "Sine vlna vygenerována, délka=" + juce::String(result.lengthSamples) + 
               " (mono)");
    
    return result;
}

/**
 * @brief Uloží vygenerovaný sample do .wav souboru.
 */
bool SampleLoader::saveGeneratedSample(const LoadedSample& sample, const juce::File& targetFile) {
    logger_.log("SampleLoader/saveGeneratedSample", "info",
               "Začátek ukládání generovaného souboru: " + targetFile.getFullPathName());
    
    try {
        juce::WavAudioFormat wavFormat;
        std::unique_ptr<juce::FileOutputStream> outputStream(targetFile.createOutputStream());
        
        if (!outputStream) {
            logger_.log("SampleLoader/saveGeneratedSample", "error",
                       "Nelze vytvořit output stream pro: " + targetFile.getFullPathName());
            return false;
        }
        
        std::unique_ptr<juce::AudioFormatWriter> writer(
            wavFormat.createWriterFor(
                outputStream.get(),
                sample.originalSampleRate,
                sample.numChannels,   
                16,                   
                {},                   
                0                     
            )
        );
        
        if (!writer) {
            logger_.log("SampleLoader/saveGeneratedSample", "error",
                       "Nelze vytvořit WAV writer");
            return false;
        }
        
        outputStream.release(); 
        
        if (sample.numChannels == 1) {
            const float* channelData = sample.audioData.get();
            writer->writeFromFloatArrays(&channelData, 1, sample.lengthSamples);
        } else {
            auto leftChannel = std::make_unique<float[]>(sample.lengthSamples);
            auto rightChannel = std::make_unique<float[]>(sample.lengthSamples);
            
            for (uint32_t i = 0; i < sample.lengthSamples; ++i) {
                leftChannel[i] = sample.audioData[i * 2];
                rightChannel[i] = sample.audioData[i * 2 + 1];
            }
            
            const float* channels[] = { leftChannel.get(), rightChannel.get() };
            writer->writeFromFloatArrays(channels, 2, sample.lengthSamples);
        }
        
        writer->flush();
        
        logger_.log("SampleLoader/saveGeneratedSample", "info",
                   "Soubor úspěšně uložen: " + targetFile.getFullPathName() +
                   " (" + juce::String(sample.lengthSamples) + " samples, " +
                   juce::String(sample.numChannels) + " channels)");
        
        return true;
        
    } catch (const std::exception& e) {
        logger_.log("SampleLoader/saveGeneratedSample", "error",
                   "Výjimka při ukládání: " + juce::String(e.what()));
        return false;
    } catch (...) {
        logger_.log("SampleLoader/saveGeneratedSample", "error",
                   "Neznámá výjimka při ukládání");
        return false;
    }
}

/**
 * @brief Analyzuje WAV soubor bez načtení dat (pro memory planning).
 */
FileAnalysis SampleLoader::analyzeWavFile(const juce::File& file) {
    FileAnalysis analysis;
    
    std::unique_ptr<juce::AudioFormatReader> reader(formatManager_.createReaderFor(file));
    if (!reader) {
        analysis.errorMessage = "Cannot create reader";
        return analysis;
    }
    
    analysis.originalLengthSamples = static_cast<uint32_t>(reader->lengthInSamples);
    analysis.originalSampleRate = reader->sampleRate;
    analysis.needsResampling = (std::abs(analysis.originalSampleRate - sampleRate_) > 1.0);
    
    if (analysis.needsResampling) {
        analysis.targetLengthSamples = static_cast<uint32_t>(
            analysis.originalLengthSamples * (sampleRate_ / analysis.originalSampleRate)
        );
    } else {
        analysis.targetLengthSamples = analysis.originalLengthSamples;
    }
    
    int channels = std::min(2, static_cast<int>(reader->numChannels));
    analysis.memoryRequired = analysis.targetLengthSamples * channels * sizeof(float);
    analysis.isValid = validateFileAnalysis(analysis);
    
    return analysis;
}

/**
 * @brief Validuje výsledky file analýzy.
 */
bool SampleLoader::validateFileAnalysis(const FileAnalysis& analysis) {
    if (analysis.originalLengthSamples == 0) {
        return false;
    }
    
    if (analysis.originalSampleRate <= 0.0 || analysis.originalSampleRate > 192000.0) {
        return false;
    }
    
    if (analysis.memoryRequired > 1024 * 1024 * 1024) { // Max 1GB per sample
        return false;
    }
    
    return true;
}

/**
 * @brief Provede resampling pokud je potřeba.
 */
std::unique_ptr<float[]> SampleLoader::resampleIfNeeded(
    const float* sourceData, 
    uint32_t sourceLength, 
    double sourceSampleRate,
    uint32_t& outputLength
) {
    double ratio = sampleRate_ / sourceSampleRate;
    outputLength = static_cast<uint32_t>(sourceLength * ratio);
    
    auto outputData = std::make_unique<float[]>(outputLength);
    
    for (uint32_t i = 0; i < outputLength; ++i) {
        double sourceIndex = static_cast<double>(i) / ratio;
        uint32_t index1 = static_cast<uint32_t>(sourceIndex);
        uint32_t index2 = std::min(index1 + 1, sourceLength - 1);
        
        double fraction = sourceIndex - static_cast<double>(index1);
        outputData[i] = static_cast<float>(
            sourceData[index1] * (1.0 - fraction) + sourceData[index2] * fraction
        );
    }
    
    return outputData;
}

/**
 * @brief Vrátí default instrument directory.
 */
juce::File SampleLoader::getDefaultInstrumentDirectory() {
    juce::File appDataDir = juce::File::getSpecialLocation(juce::File::userApplicationDataDirectory);
    juce::File ithacaDir = appDataDir.getChildFile("IthacaPlayer");
    juce::File instrumentDir = ithacaDir.getChildFile("instrument");
    
    Logger::getInstance().log("SampleLoader/getDefaultInstrumentDirectory", "debug",
                             "Vrácen default directory: " + instrumentDir.getFullPathName());
    
    return instrumentDir;
}

/**
 * @brief Vygeneruje název souboru.
 */
juce::String SampleLoader::generateFilename(uint8_t midiNote, uint8_t dynamicLevel, double sr) {
    juce::String srSuffix = (std::abs(sr - 44100.0) < 1.0) ? "44" : "48";
    juce::String filename = "m" + juce::String(midiNote).paddedLeft('0', 3) + 
                           "-vel" + juce::String(dynamicLevel) + 
                           "-" + srSuffix + ".wav";
    
    Logger::getInstance().log("SampleLoader/generateFilename", "debug",
                             "Vygenerován název souboru: " + filename + 
                             " pro notu " + juce::String((int)midiNote) + 
                             ", vrstva " + juce::String((int)dynamicLevel) +
                             ", SR " + srSuffix);
    
    return filename;
}

/**
 * @brief Parsuje název souboru.
 */
bool SampleLoader::parseFilename(const juce::String& filename, uint8_t& midiNote, uint8_t& dynamicLevel, double& sr) {
    if (!filename.startsWith("m") || !filename.endsWith(".wav")) {
        return false;
    }
    
    juce::StringArray parts = juce::StringArray::fromTokens(filename.upToLastOccurrenceOf(".wav", false, false), "-", "");
    if (parts.size() != 3) {
        return false;
    }
    
    juce::String noteStr = parts[0].substring(1);
    juce::String levelStr = parts[1].substring(3);
    juce::String srStr = parts[2];
    
    int note = noteStr.getIntValue();
    int level = levelStr.getIntValue();
    sr = (srStr == "44") ? 44100.0 : (srStr == "48" ? 48000.0 : 0.0);
    
    if (note < MIN_NOTE || note > MAX_NOTE || level < 0 || level >= NUM_DYNAMIC_LEVELS || sr == 0.0) {
        return false;
    }
    
    midiNote = static_cast<uint8_t>(note);
    dynamicLevel = static_cast<uint8_t>(level);
    
    return true;
}

/**
 * @brief Mapuje velocity na dynamic level.
 */
uint8_t SampleLoader::velocityToDynamicLevel(uint8_t velocity) {
    if (velocity == 0) return 0;
    return std::min(static_cast<uint8_t>(7), static_cast<uint8_t>((velocity - 1) / 16));
}

/**
 * @brief Vrátí amplitude pro dynamic level.
 */
float SampleLoader::getDynamicAmplitude(uint8_t dynamicLevel) {
    if (dynamicLevel >= NUM_DYNAMIC_LEVELS) {
        return DYNAMIC_AMPLITUDES[NUM_DYNAMIC_LEVELS - 1];
    }
    return DYNAMIC_AMPLITUDES[dynamicLevel];
}

/**
 * @brief Vrátí frekvenci pro MIDI notu.
 */
double SampleLoader::getFrequencyForNote(uint8_t midiNote) const {
    return 440.0 * std::pow(2.0, (static_cast<int>(midiNote) - 69) / 12.0);
}


===== File: SampleLoader.h =====
Path: C:\Users\nemej992\Documents\Repos\IthacaPlayer\SampleLoader.h
=====
#pragma once

#include <juce_audio_formats/juce_audio_formats.h>
#include <juce_core/juce_core.h>
#include <memory>
#include <functional>
#include <vector>
#include "Logger.h"

/**
 * @struct LoadedSample
 * @brief Kontejner pro jeden načtený nebo vygenerovaný sample s metadata.
 * Obsahuje audio data, metadata o notě, dynamic levelu a sample rate.
 */
struct LoadedSample {
    std::unique_ptr<float[]> audioData;    // Audio data (interleaved pro stereo)
    uint32_t lengthSamples;                // Délka v samples (per channel)
    uint8_t midiNote;                      // MIDI nota (21-108)
    uint8_t dynamicLevel;                  // Dynamic level (0-7)
    uint8_t numChannels;                   // Počet kanálů (1=mono, 2=stereo)
    bool isGenerated;                      // true = vygenerovaný sine, false = načtený z WAV
    juce::String sourcePath;               // Cesta k source souboru
    double originalSampleRate;             // Původní sample rate (pro debug)
    
    /**
     * @brief Výchozí konstruktor.
     */
    LoadedSample() : lengthSamples(0), midiNote(0), dynamicLevel(0), numChannels(1),
                     isGenerated(false), originalSampleRate(0.0) {}
    
    /**
     * @brief Move konstruktor pro přesun vlastnictví.
     * @param other Zdrojový objekt pro přesun.
     */
    LoadedSample(LoadedSample&& other) noexcept
        : audioData(std::move(other.audioData)),
          lengthSamples(other.lengthSamples),
          midiNote(other.midiNote),
          dynamicLevel(other.dynamicLevel),
          numChannels(other.numChannels),
          isGenerated(other.isGenerated),
          sourcePath(std::move(other.sourcePath)),
          originalSampleRate(other.originalSampleRate) {
        // Reset zdroje po přesunu
        other.lengthSamples = 0;
        other.midiNote = 0;
        other.dynamicLevel = 0;
        other.numChannels = 1;
        other.isGenerated = false;
        other.originalSampleRate = 0.0;
    }
    
    /**
     * @brief Move assignment operator pro přesun vlastnictví.
     * @param other Zdrojový objekt pro přesun.
     * @return Reference na tento objekt.
     */
    LoadedSample& operator=(LoadedSample&& other) noexcept {
        if (this != &other) {
            audioData = std::move(other.audioData);
            lengthSamples = other.lengthSamples;
            midiNote = other.midiNote;
            dynamicLevel = other.dynamicLevel;
            numChannels = other.numChannels;
            isGenerated = other.isGenerated;
            sourcePath = std::move(other.sourcePath);
            originalSampleRate = other.originalSampleRate;
            
            // Reset zdroje
            other.lengthSamples = 0;
            other.midiNote = 0;
            other.dynamicLevel = 0;
            other.numChannels = 1;
            other.isGenerated = false;
            other.originalSampleRate = 0.0;
        }
        return *this;
    }
    
    // Kopírovací konstruktor a assignment zůstávají smazané (implicitně kvůli unique_ptr)
    LoadedSample(const LoadedSample&) = delete;
    LoadedSample& operator=(const LoadedSample&) = delete;
    
    /**
     * @brief Vrátí celkovou velikost dat v bytes.
     * @return Velikost v bytes.
     */
    size_t getDataSize() const {
        return lengthSamples * numChannels * sizeof(float);
    }
    
    /**
     * @brief Zkontroluje zda je sample stereo.
     * @return True pokud stereo.
     */
    bool isStereo() const {
        return numChannels == 2;
    }
};

/**
 * @struct FileAnalysis
 * @brief Analýza WAV souboru před načtením (pro optimalizaci paměti).
 */
struct FileAnalysis {
    uint32_t originalLengthSamples;
    uint32_t targetLengthSamples;
    double originalSampleRate;
    bool needsResampling;
    size_t memoryRequired;
    bool isValid;
    juce::String errorMessage;
    
    FileAnalysis() : originalLengthSamples(0), targetLengthSamples(0), 
                     originalSampleRate(0.0), needsResampling(false), 
                     memoryRequired(0), isValid(false) {}
};

/**
 * @struct LoadingStats
 * @brief Statistiky loading procesu.
 */
struct LoadingStats {
    int totalExpected;          // Očekávaný počet souborů (88 not × 8 levelů)
    int filesLoaded;            // Počet načtených WAV souborů
    int filesGenerated;         // Počet vygenerovaných sine waves
    int filesSaved;             // Počet uložených generovaných souborů
    size_t totalMemoryUsed;     // Celková spotřeba paměti
    double loadingTimeSeconds;  // Celkový čas loading
    
    LoadingStats() : totalExpected(0), filesLoaded(0), filesGenerated(0), 
                     filesSaved(0), totalMemoryUsed(0), loadingTimeSeconds(0.0) {}
};

/**
 * @class SampleLoader
 * @brief Správce načítání/ukládání audio samples s support pro dynamic levels a sample rate verze.
 * 
 * Implementuje hybridní systém:
 * 1. Pokusí se načíst WAV soubor z %APPDATA%/IthacaPlayer/instrument/ s SR v názvu (např. m060-vel3-44.wav).
 * 2. Pokud neexistuje pro target SR, načte z base SR (44100), resampluje a uloží pro target.
 * 3. Pokud nic neexistuje, vygeneruje sine pro base SR, uloží, resampluje pro 48000 a uloží.
 * 4. Podporuje 8 dynamic levels (vel0-vel7) pro každou MIDI notu.
 * 5. Automatické resampling na target sample rate.
 * 6. Zachování stereo formátu pokud existuje.
 */
class SampleLoader
{
public:
    using ProgressCallback = std::function<void(int current, int total, const juce::String& status)>;
    
    /**
     * @brief Konstruktor s target sample rate.
     * @param sampleRate Cílový sample rate pro všechny samples.
     */
    explicit SampleLoader(double sampleRate);
    
    /**
     * @brief Načte kompletní instrument (všechny noty × všechny dynamic levels).
     * @param instrumentDirectory Directory s .wav soubory.
     * @param progressCallback Callback pro progress reporting.
     * @return Vektor načtených samples.
     */
    std::vector<LoadedSample> loadInstrument(
        const juce::File& instrumentDirectory,
        ProgressCallback progressCallback = nullptr
    );
    
    /**
     * @brief Načte jeden konkrétní sample (buď z souboru nebo vygeneruje).
     * @param instrumentDirectory Directory s .wav soubory.
     * @param midiNote MIDI nota (21-108).
     * @param dynamicLevel Dynamic level (0-7).
     * @return Načtený sample.
     */
    LoadedSample loadSingleSample(
        const juce::File& instrumentDirectory,
        uint8_t midiNote, 
        uint8_t dynamicLevel
    );
    
    // === Utility Methods ===
    
    /**
     * @brief Vrátí default instrument directory (%APPDATA%/IthacaPlayer/instrument/).
     * @return Defaultní directory.
     */
    static juce::File getDefaultInstrumentDirectory();
    
    /**
     * @brief Vygeneruje název souboru podle naming convention včetně SR.
     * @param midiNote MIDI nota.
     * @param dynamicLevel Dynamic level.
     * @param sr Sample rate (44100 nebo 48000).
     * @return Název souboru (např. "m060-vel3-44.wav").
     */
    static juce::String generateFilename(uint8_t midiNote, uint8_t dynamicLevel, double sr);
    
    /**
     * @brief Parsuje název souboru a extrahuje MIDI notu, dynamic level a SR.
     * @param filename Název souboru.
     * @param midiNote [out] Extrahovaná MIDI nota.
     * @param dynamicLevel [out] Extrahovaný dynamic level.
     * @param sr [out] Extrahovaný sample rate.
     * @return true pokud parsing úspěšný.
     */
    static bool parseFilename(const juce::String& filename, uint8_t& midiNote, uint8_t& dynamicLevel, double& sr);
    
    /**
     * @brief Mapuje velocity (0-127) na dynamic level (0-7).
     * @param velocity MIDI velocity.
     * @return Dynamic level.
     */
    static uint8_t velocityToDynamicLevel(uint8_t velocity);
    
    /**
     * @brief Vrátí amplitude pro daný dynamic level.
     * @param dynamicLevel Dynamic level (0-7).
     * @return Amplitude (0.05f - 1.0f).
     */
    static float getDynamicAmplitude(uint8_t dynamicLevel);
    
    /**
     * @brief Vrátí loading statistiky.
     * @return Reference na statistiky.
     */
    const LoadingStats& getLoadingStats() const { return loadingStats_; }

private:
    double sampleRate_;                           // Target sample rate
    juce::AudioFormatManager formatManager_;     // JUCE audio format manager
    Logger& logger_;                             // Reference na logger
    LoadingStats loadingStats_;                  // Loading statistiky
    
    // === Private Methods ===
    
    /**
     * @brief Analyzuje WAV soubor bez načtení dat (pro memory planning).
     * @param file Soubor k analýze.
     * @return Analýza souboru.
     */
    FileAnalysis analyzeWavFile(const juce::File& file);
    
    /**
     * @brief Validuje výsledky file analýzy.
     * @param analysis Analýza k validaci.
     * @return True pokud validní.
     */
    bool validateFileAnalysis(const FileAnalysis& analysis);
    
    /**
     * @brief Načte WAV soubor s optional resampling.
     * @param file Soubor k načtení.
     * @param midiNote MIDI nota.
     * @param dynamicLevel Dynamic level.
     * @return Načtený sample.
     */
    LoadedSample loadWavFile(const juce::File& file, uint8_t midiNote, uint8_t dynamicLevel);
    
    /**
     * @brief Vygeneruje sine wave pro danou notu a dynamic level (pro base SR 44100).
     * @param midiNote MIDI nota.
     * @param dynamicLevel Dynamic level.
     * @return Vygenerovaný sample.
     */
    LoadedSample generateSineWave(uint8_t midiNote, uint8_t dynamicLevel);
    
    /**
     * @brief Uloží vygenerovaný sample do .wav souboru.
     * @param sample Sample k uložení.
     * @param targetFile Cílový soubor.
     * @return True pokud úspěšné.
     */
    bool saveGeneratedSample(const LoadedSample& sample, const juce::File& targetFile);
    
    /**
     * @brief Provede resampling pokud je potřeba.
     * @param sourceData Zdrojová data.
     * @param sourceLength Délka zdroje.
     * @param sourceSampleRate Zdrojový SR.
     * @param outputLength [out] Délka výstupu.
     * @return Resamplovaná data.
     */
    std::unique_ptr<float[]> resampleIfNeeded(
        const float* sourceData, 
        uint32_t sourceLength, 
        double sourceSampleRate,
        uint32_t& outputLength
    );
    
    /**
     * @brief Vrátí frekvenci pro MIDI notu.
     * @param midiNote MIDI nota.
     * @return Frekvence v Hz.
     */
    double getFrequencyForNote(uint8_t midiNote) const;
    
    // === Constants ===
    
    static constexpr uint8_t MIN_NOTE = 21;        // A0
    static constexpr uint8_t MAX_NOTE = 108;       // C8
    static constexpr uint8_t NUM_DYNAMIC_LEVELS = 8;
    static constexpr double SAMPLE_SECONDS = 12.0; // Délka generovaných samples
    
    // Dynamic amplitudes pro jednotlivé úrovně
    static const float DYNAMIC_AMPLITUDES[8];
};


===== File: VoiceManager.cpp =====
Path: C:\Users\nemej992\Documents\Repos\IthacaPlayer\VoiceManager.cpp
=====
#include "VoiceManager.h"
#include "Logger.h"

/**
 * @brief Konstruktor SynthVoice
 */
SynthVoice::SynthVoice()
    : logger_(Logger::getInstance())
{
    reset();
}

/**
 * @brief Spustí hlas s automatickým výběrem dynamic levelu
 */
void SynthVoice::start(uint8_t midiNote, uint8_t velocity, const SampleLibrary& library)
{
    reset();

    midiNote_ = midiNote;
    velocity_ = velocity;

    // Mapování velocity na dynamic level
    uint8_t preferredLevel = library.velocityToDynamicLevel(velocity);
    
    // Najdeme nejlepší dostupný level
    uint8_t bestLevel = findBestAvailableLevel(library, midiNote, preferredLevel);
    
    if (bestLevel == 255) {
        logger_.log("SynthVoice/start", "error", 
                   "Žádný dostupný dynamic level pro notu " + juce::String((int)midiNote));
        isActive_ = false;
        return;
    }

    currentDynamicLevel_ = bestLevel;
    sampleData_ = library.getSampleData(midiNote, currentDynamicLevel_);
    currentSampleLength_ = library.getSampleLength(midiNote, currentDynamicLevel_);
    
    // Zjistíme zda je sample stereo
    currentSampleIsStereo_ = library.isSampleStereo(midiNote, currentDynamicLevel_);

    if (!sampleData_ || currentSampleLength_ == 0) {
        logger_.log("SynthVoice/start", "error", 
                   "Neplatný sample pro notu " + juce::String((int)midiNote) + 
                   " level " + juce::String((int)currentDynamicLevel_));
        isActive_ = false;
        return;
    }

    position_ = 0;
    isActive_ = true;

    logger_.log("SynthVoice/start", "debug", 
               "Spuštěna nota " + juce::String((int)midiNote) + 
               " velocity=" + juce::String((int)velocity) +
               " level=" + juce::String((int)currentDynamicLevel_) +
               " délka=" + juce::String(currentSampleLength_) +
               " stereo=" + juce::String(currentSampleIsStereo_ ? "ano" : "ne"));
}

void SynthVoice::stop()
{
    isActive_ = false;
    logger_.log("SynthVoice/stop", "debug", 
               "Zastaven voice nota " + juce::String((int)midiNote_));
}

void SynthVoice::reset()
{
    midiNote_ = 0;
    velocity_ = 0;
    currentDynamicLevel_ = 0;
    isActive_ = false;
    sampleData_ = nullptr;
    currentSampleLength_ = 0;
    position_ = 0;
    queue_ = 0;
    currentSampleIsStereo_ = false;
}

/**
 * @brief Renderuje audio bez real-time gain (pre-computed v samples)
 */
void SynthVoice::render(float* outputBuffer, int numSamples, bool isStereo)
{
    if (!isActive_ || sampleData_ == nullptr || currentSampleLength_ == 0)
        return;

    if (currentSampleIsStereo_ && isStereo) {
        // Stereo sample → stereo output
        for (int i = 0; i < numSamples; ++i) {
            if (position_ >= currentSampleLength_) {
                stop();
                break;
            }
            
            // Interleaved stereo data
            outputBuffer[i * 2] += sampleData_[position_ * 2];     // Left
            outputBuffer[i * 2 + 1] += sampleData_[position_ * 2 + 1]; // Right
            ++position_;
        }
    } else if (!currentSampleIsStereo_ && isStereo) {
        // Mono sample → stereo output (duplicate na oba kanály)
        for (int i = 0; i < numSamples; ++i) {
            if (position_ >= currentSampleLength_) {
                stop();
                break;
            }
            
            float sample = sampleData_[position_];
            outputBuffer[i * 2] += sample;     // Left
            outputBuffer[i * 2 + 1] += sample; // Right
            ++position_;
        }
    } else {
        // Mono sample → mono output NEBO stereo→mono (mix)
        for (int i = 0; i < numSamples; ++i) {
            if (position_ >= currentSampleLength_) {
                stop();
                break;
            }
            
            if (currentSampleIsStereo_) {
                // Stereo sample → mono output (mix L+R)
                float left = sampleData_[position_ * 2];
                float right = sampleData_[position_ * 2 + 1];
                outputBuffer[i] += (left + right) * 0.5f;
            } else {
                // Mono sample → mono output
                outputBuffer[i] += sampleData_[position_];
            }
            ++position_;
        }
    }
}

/**
 * @brief Najde nejlepší dostupný dynamic level
 */
uint8_t SynthVoice::findBestAvailableLevel(const SampleLibrary& library, uint8_t midiNote, uint8_t preferredLevel)
{
    // 1. Zkus preferovaný level
    if (library.isNoteAvailable(midiNote, preferredLevel)) {
        return preferredLevel;
    }

    // 2. Zkus blízké levely (směrem dolů i nahoru)
    for (int offset = 1; offset < 8; ++offset) {
        // Zkus nižší level
        if (preferredLevel >= offset) {
            // Explicitní cast pro odstranění warning C4244
            uint8_t lowerLevel = static_cast<uint8_t>(preferredLevel - offset);
            if (library.isNoteAvailable(midiNote, lowerLevel)) {
                logger_.log("SynthVoice/findBestAvailableLevel", "debug",
                           "Fallback na nižší level " + juce::String((int)lowerLevel) + 
                           " místo " + juce::String((int)preferredLevel));
                return lowerLevel;
            }
        }
        
        // Zkus vyšší level
        // Explicitní cast pro odstranění warning C4244
        uint8_t higherLevel = static_cast<uint8_t>(preferredLevel + offset);
        if (higherLevel < 8 && library.isNoteAvailable(midiNote, higherLevel)) {
            logger_.log("SynthVoice/findBestAvailableLevel", "debug",
                       "Fallback na vyšší level " + juce::String((int)higherLevel) + 
                       " místo " + juce::String((int)preferredLevel));
            return higherLevel;
        }
    }

    // 3. Žádný level není dostupný
    return 255;
}

// ======================== VoiceManager =========================

/**
 * @brief Konstruktor VoiceManager
 */
VoiceManager::VoiceManager(const SampleLibrary& library, int numVoices)
    : logger_(Logger::getInstance()), sampleLibrary_(library)
{
    voices_.reserve(numVoices);
    for (int i = 0; i < numVoices; ++i) {
        voices_.emplace_back(std::make_unique<SynthVoice>());
        voices_.back()->setQueue(0);
    }

    logger_.log("VoiceManager/constructor", "info", 
               "VoiceManager vytvořen s " + juce::String(numVoices) + " hlasy pro dynamic levels");
}

/**
 * @brief Zpracuje MIDI události z MidiStateManager
 */
void VoiceManager::processMidiEvents(MidiStateManager& midiState)
{
    // Zpracování NOTE ON
    for (int ch = 0; ch < 16; ++ch) {
        while (true) {
            uint8_t raw = midiState.popNoteOn(static_cast<uint8_t>(ch));
            if (raw == 255) break;
            
            uint8_t note = raw;
            uint8_t vel = midiState.getVelocity(static_cast<uint8_t>(ch), note);
            startVoice(note, vel);
        }
    }

    // Zpracování NOTE OFF
    for (int ch = 0; ch < 16; ++ch) {
        while (true) {
            uint8_t raw = midiState.popNoteOff(static_cast<uint8_t>(ch));
            if (raw == 255) break;
            
            uint8_t note = raw;
            stopVoice(note);
        }
    }
}

/**
 * @brief Generuje audio mixem hlasů s stereo support
 */
void VoiceManager::generateAudio(float* buffer, int numSamples)
{
    if (buffer == nullptr || numSamples <= 0) return;

    // Detekujeme zda buffer vypadá jako stereo (heuristika)
    // V reálné implementaci by to měl být parametr
    bool isStereoOutput = true; // Předpokládáme stereo output
    
    // Mix všech aktivních hlasů
    for (auto& v : voices_) {
        if (v->isActive()) {
            v->render(buffer, numSamples, isStereoOutput);
        }
    }
}

/**
 * @brief Housekeeping a statistiky
 */
void VoiceManager::refresh()
{
    ++refreshCounter_;
    
    // Reset voice stealing counter
    voicesStolenSinceLastRefresh_ = 0;
    
    // Aktualizace statistik
    updateStatistics();
    
    // Periodické logování
    if (refreshCounter_ % PERIODIC_LOG_INTERVAL == 0) {
        logPeriodicStatus();
    }
}

/**
 * @brief Spustí hlas s enhanced voice stealing
 */
void VoiceManager::startVoice(uint8_t midiNote, uint8_t velocity)
{
    // Nejprve hledej existující voice pro tuto notu
    for (auto& v : voices_) {
        if (v->isActive() && v->getNote() == midiNote) {
            v->start(midiNote, velocity, sampleLibrary_);
            mixleQueue(v->getQueue());
            v->setQueue(static_cast<uint8_t>(voices_.size() - 1));
            return;
        }
    }

    // Hledej volnou voice s nejvyšším queue
    SynthVoice* candidate = nullptr;
    uint8_t maxQueue = 0;
    for (auto& v : voices_) {
        if (!v->isActive() && v->getQueue() >= maxQueue) {
            candidate = v.get();
            maxQueue = v->getQueue();
        }
    }

    // Pokud není volná, použij voice stealing
    if (!candidate) {
        candidate = findVoiceStealingCandidate();
        if (candidate) {
            voicesStolenSinceLastRefresh_++;
            logger_.log("VoiceManager/startVoice", "debug", 
                       "Voice stealing pro notu " + juce::String((int)midiNote) + 
                       " (ukradena nota " + juce::String((int)candidate->getNote()) + ")");
        }
    }

    if (candidate) {
        mixleQueue(candidate->getQueue());
        candidate->start(midiNote, velocity, sampleLibrary_);
        candidate->setQueue(static_cast<uint8_t>(voices_.size() - 1));
    } else {
        logger_.log("VoiceManager/startVoice", "warn", 
                   "Nelze najít voice pro notu " + juce::String((int)midiNote));
    }
}

/**
 * @brief Zastaví hlas pro danou notu
 */
void VoiceManager::stopVoice(uint8_t midiNote)
{
    for (auto& v : voices_) {
        if (v->isActive() && v->getNote() == midiNote) {
            v->stop();
            mixleQueue(v->getQueue());
            v->setQueue(0);
            return;
        }
    }
}

/**
 * @brief Enhanced voice stealing algorithm
 */
SynthVoice* VoiceManager::findVoiceStealingCandidate()
{
    SynthVoice* candidate = nullptr;
    uint8_t maxQueue = 0;
    float maxProgress = 0.0f;
    
    // Najdi voice s nejvyšším queue (nejstarší) a nejvyšším progress
    for (auto& v : voices_) {
        if (v->isActive()) {
            if (v->getQueue() > maxQueue || 
                (v->getQueue() == maxQueue && v->getProgress() > maxProgress)) {
                candidate = v.get();
                maxQueue = v->getQueue();
                maxProgress = v->getProgress();
            }
        }
    }
    
    return candidate;
}

/**
 * @brief Přeuspořádá queue priorit
 */
void VoiceManager::mixleQueue(uint8_t queueNumber) 
{
    for (auto& v : voices_) {
        if (v->getQueue() == queueNumber) {
            v->setQueue(0);  // Posun na dno
        } else if (v->getQueue() > queueNumber) {
            v->setQueue(v->getQueue() - 1);  // Posun dolů
        } else {
            v->setQueue(v->getQueue() + 1);  // Posun nahoru
        }
    }
}

/**
 * @brief Vrátí počet aktivních hlasů
 */
int VoiceManager::getActiveVoiceCount() const
{
    int count = 0;
    for (const auto& voice : voices_) {
        if (voice->isActive()) ++count;
    }
    return count;
}

/**
 * @brief Vrátí počet hlasů podle dynamic levelů
 */
std::array<int, 8> VoiceManager::getVoiceCountByDynamicLevel() const
{
    std::array<int, 8> counts{};
    
    for (const auto& voice : voices_) {
        if (voice->isActive()) {
            uint8_t level = voice->getDynamicLevel();
            if (level < 8) {
                counts[level]++;
            }
        }
    }
    
    return counts;
}

/**
 * @brief Vrátí detailní statistiky
 */
VoiceManager::VoiceStats VoiceManager::getVoiceStats() const
{
    return lastStats_;
}

/**
 * @brief Aktualizuje statistiky
 */
void VoiceManager::updateStatistics() const
{
    lastStats_.totalVoices = static_cast<int>(voices_.size());
    lastStats_.activeVoices = getActiveVoiceCount();
    lastStats_.inactiveVoices = lastStats_.totalVoices - lastStats_.activeVoices;
    lastStats_.dynamicLevelCount = getVoiceCountByDynamicLevel();
    lastStats_.voicesStolenThisRefresh = voicesStolenSinceLastRefresh_;
    
    // Průměrný progress
    float totalProgress = 0.0f;
    int activeCount = 0;
    for (const auto& voice : voices_) {
        if (voice->isActive()) {
            totalProgress += voice->getProgress();
            activeCount++;
        }
    }
    lastStats_.averageProgress = (activeCount > 0) ? (totalProgress / activeCount) : 0.0f;
}

/**
 * @brief Loguje periodický status
 */
void VoiceManager::logPeriodicStatus()
{
    const auto& stats = lastStats_;
    
    juce::String dynamicLevelInfo;
    for (int i = 0; i < 8; ++i) {
        if (stats.dynamicLevelCount[i] > 0) {
            dynamicLevelInfo += "L" + juce::String(i) + ":" + juce::String(stats.dynamicLevelCount[i]) + " ";
        }
    }
    
    logger_.log("VoiceManager/periodicStatus", "info",
               "Voices: " + juce::String(stats.activeVoices) + "/" + juce::String(stats.totalVoices) + 
               " active, avg progress: " + juce::String(stats.averageProgress * 100.0f, 1) + "%" +
               " dynamic levels: " + dynamicLevelInfo);
}


===== File: VoiceManager.h =====
Path: C:\Users\nemej992\Documents\Repos\IthacaPlayer\VoiceManager.h
=====
#pragma once

#include <cstdint>
#include <memory>
#include <vector>
#include "SampleLibrary.h"
#include "MidiStateManager.h"
#include "Logger.h"

/**
 * @class SynthVoice
 * @brief Rozšířený voice renderer s podporou dynamic levels
 * 
 * Nové vlastnosti:
 * - Dynamic level selection based on velocity
 * - Variable sample lengths per dynamic level
 * - No real-time gain calculation (pre-computed in samples)
 * - Improved voice lifecycle management
 */
class SynthVoice
{
public:
    SynthVoice();

    /**
     * @brief Spustí hlas s automatickým výběrem dynamic levelu
     * @param midiNote MIDI nota
     * @param velocity Velocity (automaticky mapováno na dynamic level)
     * @param library Reference na SampleLibrary
     */
    void start(uint8_t midiNote, uint8_t velocity, const SampleLibrary& library);

    /**
     * @brief Zastaví hlas (deaktivuje ho)
     */
    void stop();

    /**
     * @brief Resetuje hlas do výchozího stavu
     */
    void reset();

    /**
     * @brief Renderuje audio bez real-time gain (pre-computed v samples)
     * @param outputBuffer Ukazatel na buffer
     * @param numSamples Počet samplů k renderování
     * @param isStereo Zda je output buffer stereo (pro stereo rendering)
     */
    void render(float* outputBuffer, int numSamples, bool isStereo = false);

    // === Gettery ===
    
    bool isActive() const { return isActive_; }
    uint8_t getNote() const { return midiNote_; }
    uint8_t getVelocity() const { return velocity_; }
    uint8_t getDynamicLevel() const { return currentDynamicLevel_; }
    uint8_t getQueue() const { return queue_; }
    uint32_t getPosition() const { return position_; }
    uint32_t getSampleLength() const { return currentSampleLength_; }
    
    void setQueue(uint8_t queue) { queue_ = queue; }

    /**
     * @brief Vrátí progress jako procenta (0.0-1.0)
     */
    float getProgress() const {
        return (currentSampleLength_ > 0) ? 
               static_cast<float>(position_) / static_cast<float>(currentSampleLength_) : 0.0f;
    }

private:
    Logger& logger_;                    // Reference na logger

    // === Voice State ===
    uint8_t midiNote_{0};              // Aktuální MIDI nota
    uint8_t velocity_{0};              // Velocity
    uint8_t currentDynamicLevel_{0};   // Aktuální dynamic level (0-7)
    bool isActive_{false};             // Stav aktivity

    // === Sample Data ===
    const float* sampleData_{nullptr}; // Ukazatel na data vzorku
    uint32_t currentSampleLength_{0};  // Délka aktuálního sample (variable per dynamic level)
    uint32_t position_{0};             // Aktuální pozice v vzorku
    bool currentSampleIsStereo_{false}; // Zda je aktuální sample stereo

    // === Voice Management ===
    uint8_t queue_{0};                 // Prioritní queue pro stealing (0 = dno, vyšší = top)
    
    /**
     * @brief Najde nejlepší dostupný dynamic level pro danou notu
     * @param library Reference na SampleLibrary
     * @param midiNote MIDI nota
     * @param preferredLevel Preferovaný level
     * @return Nejlepší dostupný level nebo 255 pokud žádný
     */
    uint8_t findBestAvailableLevel(const SampleLibrary& library, uint8_t midiNote, uint8_t preferredLevel);
};

/**
 * @class VoiceManager
 * @brief Rozšířený voice manager s podporou dynamic levels a lepší diagnostikou
 * 
 * Nové vlastnosti:
 * - Automatic dynamic level selection
 * - Enhanced voice stealing algorithm
 * - Real-time voice statistics
 * - Fallback mechanism pro missing dynamic levels
 */
class VoiceManager
{
public:
    /**
     * @brief Konstruktor s referencí na SampleLibrary
     * @param library Reference na SampleLibrary
     * @param numVoices Počet hlasů (výchozí 16)
     */
    VoiceManager(const SampleLibrary& library, int numVoices = 16);

    ~VoiceManager() = default;

    /**
     * @brief Zpracuje MIDI události z MidiStateManager (note-on/off)
     * @param midiState Reference na MidiStateManager
     */
    void processMidiEvents(MidiStateManager& midiState);

    /**
     * @brief Generuje audio mixem všech aktivních hlasů
     * @param buffer Ukazatel na audio buffer
     * @param numSamples Počet samplů
     */
    void generateAudio(float* buffer, int numSamples);

    /**
     * @brief Housekeeping a statistiky
     */
    void refresh();

    // === Statistics & Diagnostics ===
    
    /**
     * @brief Vrátí počet aktivních hlasů
     */
    int getActiveVoiceCount() const;
    
    /**
     * @brief Vrátí počet hlasů podle dynamic levelů
     */
    std::array<int, 8> getVoiceCountByDynamicLevel() const;
    
    /**
     * @brief Vrátí statistiky voice usage
     */
    struct VoiceStats {
        int totalVoices;
        int activeVoices;
        int inactiveVoices;
        std::array<int, 8> dynamicLevelCount;
        float averageProgress;
        int voicesStolenThisRefresh;
        
        VoiceStats() : totalVoices(0), activeVoices(0), inactiveVoices(0), 
                       dynamicLevelCount{}, averageProgress(0.0f), voicesStolenThisRefresh(0) {}
    };
    
    VoiceStats getVoiceStats() const;

private:
    Logger& logger_;                                        // Reference na logger
    const SampleLibrary& sampleLibrary_;                   // Povinná reference na vzorky
    std::vector<std::unique_ptr<SynthVoice>> voices_;      // Kolekce hlasů
    
    // === Statistics ===
    mutable VoiceStats lastStats_;                         // Cache posledních statistik
    int voicesStolenSinceLastRefresh_{0};                  // Počítadlo voice stealing
    
    /**
     * @brief Spustí hlas pro danou notu s automatic dynamic level selection
     * @param midiNote MIDI nota
     * @param velocity Velocity
     */
    void startVoice(uint8_t midiNote, uint8_t velocity);

    /**
     * @brief Zastaví hlas pro danou notu
     * @param midiNote MIDI nota
     */
    void stopVoice(uint8_t midiNote);

    /**
     * @brief Přeuspořádá queue priorit (Enhanced version)
     * @param queueNumber Číslo queue k mixlování
     */
    void mixleQueue(uint8_t queueNumber);
    
    /**
     * @brief Najde nejlepší kandidát pro voice stealing
     * @return Ukazatel na voice nebo nullptr
     */
    SynthVoice* findVoiceStealingCandidate();
    
    /**
     * @brief Aktualizuje statistiky (volané z refresh())
     */
    void updateStatistics() const;
    
    /**
     * @brief Loguje periodic voice status (každých N refresh cyklů)
     */
    void logPeriodicStatus();
    
    // === Constants ===
    static constexpr int PERIODIC_LOG_INTERVAL = 1000;    // Log každých 1000 refresh cyklů
    mutable int refreshCounter_{0};                        // Počítadlo refresh cyklů
};


